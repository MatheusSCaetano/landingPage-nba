"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray2(arr) { return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread2(); }

function _nonIterableSpread2() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray2(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles2(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof4(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof4 = function _typeof4(obj) { return typeof obj; }; } else { _typeof4 = function _typeof4(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof4(obj); }

// NBA3 - AdFuel Modules - 11
// Deployed: 2020-12-11 10:24:56
////////////////////////////////////////////
// AD UTILITIES
////////////////////////////////////////////
(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof4(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.AdFuelUtils = {}));
})(void 0, function (exports) {
  'use strict';

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
    return module = {
      exports: {}
    }, fn(module, module.exports), module.exports;
  }

  function getCjsExportFromNamespace(n) {
    return n && n['default'] || n;
  }

  var _global = createCommonjsModule(function (module) {
    // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
    var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
    : Function('return this')();
    if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
  });

  var _core = createCommonjsModule(function (module) {
    var core = module.exports = {
      version: '2.6.9'
    };
    if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
  });

  var _core_1 = _core.version;

  var _aFunction = function _aFunction(it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  }; // optional / simple context binding


  var _ctx = function _ctx(fn, that, length) {
    _aFunction(fn);

    if (that === undefined) return fn;

    switch (length) {
      case 1:
        return function (a) {
          return fn.call(that, a);
        };

      case 2:
        return function (a, b) {
          return fn.call(that, a, b);
        };

      case 3:
        return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
    }

    return function ()
    /* ...args */
    {
      return fn.apply(that, arguments);
    };
  };

  var _isObject = function _isObject(it) {
    return _typeof4(it) === 'object' ? it !== null : typeof it === 'function';
  };

  var _anObject = function _anObject(it) {
    if (!_isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };

  var _fails = function _fails(exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  }; // Thank's IE8 for his funny defineProperty


  var _descriptors = !_fails(function () {
    return Object.defineProperty({}, 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  });

  var document$1 = _global.document; // typeof document.createElement is 'object' in old IE

  var is = _isObject(document$1) && _isObject(document$1.createElement);

  var _domCreate = function _domCreate(it) {
    return is ? document$1.createElement(it) : {};
  };

  var _ie8DomDefine = !_descriptors && !_fails(function () {
    return Object.defineProperty(_domCreate('div'), 'a', {
      get: function get() {
        return 7;
      }
    }).a != 7;
  }); // 7.1.1 ToPrimitive(input [, PreferredType])
  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string


  var _toPrimitive = function _toPrimitive(it, S) {
    if (!_isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };

  var dP = Object.defineProperty;
  var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    _anObject(O);

    P = _toPrimitive(P, true);

    _anObject(Attributes);

    if (_ie8DomDefine) try {
      return dP(O, P, Attributes);
    } catch (e) {
      /* empty */
    }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };
  var _objectDp = {
    f: f
  };

  var _propertyDesc = function _propertyDesc(bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };

  var _hide = _descriptors ? function (object, key, value) {
    return _objectDp.f(object, key, _propertyDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };

  var hasOwnProperty = {}.hasOwnProperty;

  var _has = function _has(it, key) {
    return hasOwnProperty.call(it, key);
  };

  var PROTOTYPE = 'prototype';

  var $export = function $export(type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var IS_WRAP = type & $export.W;
    var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
    var expProto = exports[PROTOTYPE];
    var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] : (_global[name] || {})[PROTOTYPE];
    var key, own, out;
    if (IS_GLOBAL) source = name;

    for (key in source) {
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined;
      if (own && _has(exports, key)) continue; // export native or passed

      out = own ? target[key] : source[key]; // prevent global pollution for namespaces

      exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] // bind timers to global for call from export context
      : IS_BIND && own ? _ctx(out, _global) // wrap global constructors for prevent change them in library
      : IS_WRAP && target[key] == out ? function (C) {
        var F = function F(a, b, c) {
          if (this instanceof C) {
            switch (arguments.length) {
              case 0:
                return new C();

              case 1:
                return new C(a);

              case 2:
                return new C(a, b);
            }

            return new C(a, b, c);
          }

          return C.apply(this, arguments);
        };

        F[PROTOTYPE] = C[PROTOTYPE];
        return F; // make static versions for prototype methods
      }(out) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out; // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%

      if (IS_PROTO) {
        (exports.virtual || (exports.virtual = {}))[key] = out; // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%

        if (type & $export.R && expProto && !expProto[key]) _hide(expProto, key, out);
      }
    }
  }; // type bitmap


  $export.F = 1; // forced

  $export.G = 2; // global

  $export.S = 4; // static

  $export.P = 8; // proto

  $export.B = 16; // bind

  $export.W = 32; // wrap

  $export.U = 64; // safe

  $export.R = 128; // real proto method for `library`

  var _export = $export; // 7.2.1 RequireObjectCoercible(argument)

  var _defined = function _defined(it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };

  var _stringWs = "\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003" + "\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";

  var space = '[' + _stringWs + ']';
  var non = "\u200B\x85";
  var ltrim = RegExp('^' + space + space + '*');
  var rtrim = RegExp(space + space + '*$');

  var exporter = function exporter(KEY, exec, ALIAS) {
    var exp = {};

    var FORCE = _fails(function () {
      return !!_stringWs[KEY]() || non[KEY]() != non;
    });

    var fn = exp[KEY] = FORCE ? exec(trim) : _stringWs[KEY];
    if (ALIAS) exp[ALIAS] = fn;

    _export(_export.P + _export.F * FORCE, 'String', exp);
  }; // 1 -> String#trimLeft
  // 2 -> String#trimRight
  // 3 -> String#trim


  var trim = exporter.trim = function (string, TYPE) {
    string = String(_defined(string));
    if (TYPE & 1) string = string.replace(ltrim, '');
    if (TYPE & 2) string = string.replace(rtrim, '');
    return string;
  };

  var _stringTrim = exporter;
  var $parseInt = _global.parseInt;
  var $trim = _stringTrim.trim;
  var hex = /^[-+]?0[xX]/;

  var _parseInt = $parseInt(_stringWs + '08') !== 8 || $parseInt(_stringWs + '0x16') !== 22 ? function parseInt(str, radix) {
    var string = $trim(String(str), 3);
    return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
  } : $parseInt; // 18.2.5 parseInt(string, radix)


  _export(_export.G + _export.F * (parseInt != _parseInt), {
    parseInt: _parseInt
  });

  var _parseInt$1 = _core.parseInt;
  var _parseInt$2 = _parseInt$1; // most Object methods by ES6 should accept primitives

  var _objectSap = function _objectSap(KEY, exec) {
    var fn = (_core.Object || {})[KEY] || Object[KEY];
    var exp = {};
    exp[KEY] = exec(fn);

    _export(_export.S + _export.F * _fails(function () {
      fn(1);
    }), 'Object', exp);
  };

  var toString = {}.toString;

  var _cof = function _cof(it) {
    return toString.call(it).slice(8, -1);
  }; // fallback for non-array-like ES3 and non-enumerable old V8 strings
  // eslint-disable-next-line no-prototype-builtins


  var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
    return _cof(it) == 'String' ? it.split('') : Object(it);
  }; // to indexed object, toObject with fallback for non-array-like ES3 strings


  var _toIobject = function _toIobject(it) {
    return _iobject(_defined(it));
  }; // 7.1.4 ToInteger


  var ceil = Math.ceil;
  var floor = Math.floor;

  var _toInteger = function _toInteger(it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  }; // 7.1.15 ToLength


  var min = Math.min;

  var _toLength = function _toLength(it) {
    return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };

  var max = Math.max;
  var min$1 = Math.min;

  var _toAbsoluteIndex = function _toAbsoluteIndex(index, length) {
    index = _toInteger(index);
    return index < 0 ? max(index + length, 0) : min$1(index, length);
  }; // false -> Array#indexOf
  // true  -> Array#includes


  var _arrayIncludes = function _arrayIncludes(IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = _toIobject($this);

      var length = _toLength(O.length);

      var index = _toAbsoluteIndex(fromIndex, length);

      var value; // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare

      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++]; // eslint-disable-next-line no-self-compare

        if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
      } else for (; length > index; index++) {
        if (IS_INCLUDES || index in O) {
          if (O[index] === el) return IS_INCLUDES || index || 0;
        }
      }
      return !IS_INCLUDES && -1;
    };
  };

  var _library = true;

  var _shared = createCommonjsModule(function (module) {
    var SHARED = '__core-js_shared__';
    var store = _global[SHARED] || (_global[SHARED] = {});
    (module.exports = function (key, value) {
      return store[key] || (store[key] = value !== undefined ? value : {});
    })('versions', []).push({
      version: _core.version,
      mode: 'pure',
      copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
    });
  });

  var id = 0;
  var px = Math.random();

  var _uid = function _uid(key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };

  var shared = _shared('keys');

  var _sharedKey = function _sharedKey(key) {
    return shared[key] || (shared[key] = _uid(key));
  };

  var arrayIndexOf = _arrayIncludes(false);

  var IE_PROTO = _sharedKey('IE_PROTO');

  var _objectKeysInternal = function _objectKeysInternal(object, names) {
    var O = _toIobject(object);

    var i = 0;
    var result = [];
    var key;

    for (key in O) {
      if (key != IE_PROTO) _has(O, key) && result.push(key);
    } // Don't enum bug & hidden keys


    while (names.length > i) {
      if (_has(O, key = names[i++])) {
        ~arrayIndexOf(result, key) || result.push(key);
      }
    }

    return result;
  }; // IE 8- don't enum bug keys


  var _enumBugKeys = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(','); // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)


  var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

  var f$1 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return _objectKeysInternal(O, hiddenKeys);
  };

  var _objectGopn = {
    f: f$1
  }; // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

  var gOPN = _objectGopn.f;
  var toString$1 = {}.toString;
  var windowNames = (typeof window === "undefined" ? "undefined" : _typeof4(window)) == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function getWindowNames(it) {
    try {
      return gOPN(it);
    } catch (e) {
      return windowNames.slice();
    }
  };

  var f$2 = function getOwnPropertyNames(it) {
    return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));
  };

  var _objectGopnExt = {
    f: f$2
  }; // 19.1.2.7 Object.getOwnPropertyNames(O)

  _objectSap('getOwnPropertyNames', function () {
    return _objectGopnExt.f;
  });

  var $Object = _core.Object;

  var getOwnPropertyNames = function getOwnPropertyNames(it) {
    return $Object.getOwnPropertyNames(it);
  };

  var getOwnPropertyNames$1 = getOwnPropertyNames;
  var es6_object_toString = /*#__PURE__*/Object.freeze({}); // true  -> String#at
  // false -> String#codePointAt

  var _stringAt = function _stringAt(TO_STRING) {
    return function (that, pos) {
      var s = String(_defined(that));

      var i = _toInteger(pos);

      var l = s.length;
      var a, b;
      if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };

  var _redefine = _hide;
  var _iterators = {}; // 19.1.2.14 / 15.2.3.14 Object.keys(O)

  var _objectKeys = Object.keys || function keys(O) {
    return _objectKeysInternal(O, _enumBugKeys);
  };

  var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
    _anObject(O);

    var keys = _objectKeys(Properties);

    var length = keys.length;
    var i = 0;
    var P;

    while (length > i) {
      _objectDp.f(O, P = keys[i++], Properties[P]);
    }

    return O;
  };

  var document$2 = _global.document;

  var _html = document$2 && document$2.documentElement; // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])


  var IE_PROTO$1 = _sharedKey('IE_PROTO');

  var Empty = function Empty() {
    /* empty */
  };

  var PROTOTYPE$1 = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

  var _createDict = function createDict() {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = _domCreate('iframe');

    var i = _enumBugKeys.length;
    var lt = '<';
    var gt = '>';
    var iframeDocument;
    iframe.style.display = 'none';

    _html.appendChild(iframe);

    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);

    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    _createDict = iframeDocument.F;

    while (i--) {
      delete _createDict[PROTOTYPE$1][_enumBugKeys[i]];
    }

    return _createDict();
  };

  var _objectCreate = Object.create || function create(O, Properties) {
    var result;

    if (O !== null) {
      Empty[PROTOTYPE$1] = _anObject(O);
      result = new Empty();
      Empty[PROTOTYPE$1] = null; // add "__proto__" for Object.getPrototypeOf polyfill

      result[IE_PROTO$1] = O;
    } else result = _createDict();

    return Properties === undefined ? result : _objectDps(result, Properties);
  };

  var _wks = createCommonjsModule(function (module) {
    var store = _shared('wks');

    var _Symbol = _global.Symbol;
    var USE_SYMBOL = typeof _Symbol == 'function';

    var $exports = module.exports = function (name) {
      return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : _uid)('Symbol.' + name));
    };

    $exports.store = store;
  });

  var def = _objectDp.f;

  var TAG = _wks('toStringTag');

  var _setToStringTag = function _setToStringTag(it, tag, stat) {
    if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
      configurable: true,
      value: tag
    });
  };

  var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

  _hide(IteratorPrototype, _wks('iterator'), function () {
    return this;
  });

  var _iterCreate = function _iterCreate(Constructor, NAME, next) {
    Constructor.prototype = _objectCreate(IteratorPrototype, {
      next: _propertyDesc(1, next)
    });

    _setToStringTag(Constructor, NAME + ' Iterator');
  }; // 7.1.13 ToObject(argument)


  var _toObject = function _toObject(it) {
    return Object(_defined(it));
  }; // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


  var IE_PROTO$2 = _sharedKey('IE_PROTO');

  var ObjectProto = Object.prototype;

  var _objectGpo = Object.getPrototypeOf || function (O) {
    O = _toObject(O);
    if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];

    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    }

    return O instanceof Object ? ObjectProto : null;
  };

  var ITERATOR = _wks('iterator');

  var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

  var FF_ITERATOR = '@@iterator';
  var KEYS = 'keys';
  var VALUES = 'values';

  var returnThis = function returnThis() {
    return this;
  };

  var _iterDefine = function _iterDefine(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    _iterCreate(Constructor, NAME, next);

    var getMethod = function getMethod(kind) {
      if (!BUGGY && kind in proto) return proto[kind];

      switch (kind) {
        case KEYS:
          return function keys() {
            return new Constructor(this, kind);
          };

        case VALUES:
          return function values() {
            return new Constructor(this, kind);
          };
      }

      return function entries() {
        return new Constructor(this, kind);
      };
    };

    var TAG = NAME + ' Iterator';
    var DEF_VALUES = DEFAULT == VALUES;
    var VALUES_BUG = false;
    var proto = Base.prototype;
    var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
    var $default = $native || getMethod(DEFAULT);
    var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
    var methods, key, IteratorPrototype; // Fix native

    if ($anyNative) {
      IteratorPrototype = _objectGpo($anyNative.call(new Base()));

      if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
        // Set @@toStringTag to native iterators
        _setToStringTag(IteratorPrototype, TAG, true);
      }
    } // fix Array#{values, @@iterator}.name in V8 / FF


    if (DEF_VALUES && $native && $native.name !== VALUES) {
      VALUES_BUG = true;

      $default = function values() {
        return $native.call(this);
      };
    } // Define iterator


    if (FORCED && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
      _hide(proto, ITERATOR, $default);
    } // Plug for library


    _iterators[NAME] = $default;
    _iterators[TAG] = returnThis;

    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: $entries
      };
      if (FORCED) for (key in methods) {
        if (!(key in proto)) _redefine(proto, key, methods[key]);
      } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }

    return methods;
  };

  var $at = _stringAt(true); // 21.1.3.27 String.prototype[@@iterator]()


  _iterDefine(String, 'String', function (iterated) {
    this._t = String(iterated); // target

    this._i = 0; // next index
    // 21.1.5.2.1 %StringIteratorPrototype%.next()
  }, function () {
    var O = this._t;
    var index = this._i;
    var point;
    if (index >= O.length) return {
      value: undefined,
      done: true
    };
    point = $at(O, index);
    this._i += point.length;
    return {
      value: point,
      done: false
    };
  });

  var _iterStep = function _iterStep(done, value) {
    return {
      value: value,
      done: !!done
    };
  }; // 22.1.3.4 Array.prototype.entries()
  // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()


  var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
    this._t = _toIobject(iterated); // target

    this._i = 0; // next index

    this._k = kind; // kind
    // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  }, function () {
    var O = this._t;
    var kind = this._k;
    var index = this._i++;

    if (!O || index >= O.length) {
      this._t = undefined;
      return _iterStep(1);
    }

    if (kind == 'keys') return _iterStep(0, index);
    if (kind == 'values') return _iterStep(0, O[index]);
    return _iterStep(0, [index, O[index]]);
  }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)


  _iterators.Arguments = _iterators.Array;

  var TO_STRING_TAG = _wks('toStringTag');

  var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' + 'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' + 'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' + 'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' + 'TextTrackList,TouchList').split(',');

  for (var i = 0; i < DOMIterables.length; i++) {
    var NAME = DOMIterables[i];
    var Collection = _global[NAME];
    var proto = Collection && Collection.prototype;
    if (proto && !proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);
    _iterators[NAME] = _iterators.Array;
  } // getting tag from 19.1.3.6 Object.prototype.toString()


  var TAG$1 = _wks('toStringTag'); // ES3 wrong here


  var ARG = _cof(function () {
    return arguments;
  }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

  var tryGet = function tryGet(it, key) {
    try {
      return it[key];
    } catch (e) {
      /* empty */
    }
  };

  var _classof = function _classof(it) {
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T // builtinTag case
    : ARG ? _cof(O) // ES3 arguments fallback
    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };

  var _anInstance = function _anInstance(it, Constructor, name, forbiddenField) {
    if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
      throw TypeError(name + ': incorrect invocation!');
    }

    return it;
  }; // call something on iterator step with safe closing on error


  var _iterCall = function _iterCall(iterator, fn, value, entries) {
    try {
      return entries ? fn(_anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
    } catch (e) {
      var ret = iterator['return'];
      if (ret !== undefined) _anObject(ret.call(iterator));
      throw e;
    }
  }; // check on default Array iterator


  var ITERATOR$1 = _wks('iterator');

  var ArrayProto = Array.prototype;

  var _isArrayIter = function _isArrayIter(it) {
    return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR$1] === it);
  };

  var ITERATOR$2 = _wks('iterator');

  var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
    if (it != undefined) return it[ITERATOR$2] || it['@@iterator'] || _iterators[_classof(it)];
  };

  var _forOf = createCommonjsModule(function (module) {
    var BREAK = {};
    var RETURN = {};

    var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
      var iterFn = ITERATOR ? function () {
        return iterable;
      } : core_getIteratorMethod(iterable);

      var f = _ctx(fn, that, entries ? 2 : 1);

      var index = 0;
      var length, step, iterator, result;
      if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // fast case for arrays with default iterator

      if (_isArrayIter(iterFn)) for (length = _toLength(iterable.length); length > index; index++) {
        result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
        if (result === BREAK || result === RETURN) return result;
      } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
        result = _iterCall(iterator, f, step.value, entries);
        if (result === BREAK || result === RETURN) return result;
      }
    };

    exports.BREAK = BREAK;
    exports.RETURN = RETURN;
  }); // 7.3.20 SpeciesConstructor(O, defaultConstructor)


  var SPECIES = _wks('species');

  var _speciesConstructor = function _speciesConstructor(O, D) {
    var C = _anObject(O).constructor;

    var S;
    return C === undefined || (S = _anObject(C)[SPECIES]) == undefined ? D : _aFunction(S);
  }; // fast apply, http://jsperf.lnkit.com/fast-apply/5


  var _invoke = function _invoke(fn, args, that) {
    var un = that === undefined;

    switch (args.length) {
      case 0:
        return un ? fn() : fn.call(that);

      case 1:
        return un ? fn(args[0]) : fn.call(that, args[0]);

      case 2:
        return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);

      case 3:
        return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);

      case 4:
        return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
    }

    return fn.apply(that, args);
  };

  var process$1 = _global.process;
  var setTask = _global.setImmediate;
  var clearTask = _global.clearImmediate;
  var MessageChannel = _global.MessageChannel;
  var Dispatch = _global.Dispatch;
  var counter = 0;
  var queue = {};
  var ONREADYSTATECHANGE = 'onreadystatechange';
  var defer, channel, port;

  var run = function run() {
    var id = +this; // eslint-disable-next-line no-prototype-builtins

    if (queue.hasOwnProperty(id)) {
      var fn = queue[id];
      delete queue[id];
      fn();
    }
  };

  var listener = function listener(event) {
    run.call(event.data);
  }; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


  if (!setTask || !clearTask) {
    setTask = function setImmediate(fn) {
      var args = [];
      var i = 1;

      while (arguments.length > i) {
        args.push(arguments[i++]);
      }

      queue[++counter] = function () {
        // eslint-disable-next-line no-new-func
        _invoke(typeof fn == 'function' ? fn : Function(fn), args);
      };

      defer(counter);
      return counter;
    };

    clearTask = function clearImmediate(id) {
      delete queue[id];
    }; // Node.js 0.8-


    if (_cof(process$1) == 'process') {
      defer = function defer(id) {
        process$1.nextTick(_ctx(run, id, 1));
      }; // Sphere (JS game engine) Dispatch API

    } else if (Dispatch && Dispatch.now) {
      defer = function defer(id) {
        Dispatch.now(_ctx(run, id, 1));
      }; // Browsers with MessageChannel, includes WebWorkers

    } else if (MessageChannel) {
      channel = new MessageChannel();
      port = channel.port2;
      channel.port1.onmessage = listener;
      defer = _ctx(port.postMessage, port, 1); // Browsers with postMessage, skip WebWorkers
      // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if (_global.addEventListener && typeof postMessage == 'function' && !_global.importScripts) {
      defer = function defer(id) {
        _global.postMessage(id + '', '*');
      };

      _global.addEventListener('message', listener, false); // IE8-

    } else if (ONREADYSTATECHANGE in _domCreate('script')) {
      defer = function defer(id) {
        _html.appendChild(_domCreate('script'))[ONREADYSTATECHANGE] = function () {
          _html.removeChild(this);

          run.call(id);
        };
      }; // Rest old browsers

    } else {
      defer = function defer(id) {
        setTimeout(_ctx(run, id, 1), 0);
      };
    }
  }

  var _task = {
    set: setTask,
    clear: clearTask
  };
  var macrotask = _task.set;
  var Observer = _global.MutationObserver || _global.WebKitMutationObserver;
  var process$2 = _global.process;
  var Promise = _global.Promise;
  var isNode = _cof(process$2) == 'process';

  var _microtask = function _microtask() {
    var head, last, notify;

    var flush = function flush() {
      var parent, fn;
      if (isNode && (parent = process$2.domain)) parent.exit();

      while (head) {
        fn = head.fn;
        head = head.next;

        try {
          fn();
        } catch (e) {
          if (head) notify();else last = undefined;
          throw e;
        }
      }

      last = undefined;
      if (parent) parent.enter();
    }; // Node.js


    if (isNode) {
      notify = function notify() {
        process$2.nextTick(flush);
      }; // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339

    } else if (Observer && !(_global.navigator && _global.navigator.standalone)) {
      var toggle = true;
      var node = document.createTextNode('');
      new Observer(flush).observe(node, {
        characterData: true
      }); // eslint-disable-line no-new

      notify = function notify() {
        node.data = toggle = !toggle;
      }; // environments with maybe non-completely correct, but existent Promise

    } else if (Promise && Promise.resolve) {
      // Promise.resolve without an argument throws an error in LG WebOS 2
      var promise = Promise.resolve(undefined);

      notify = function notify() {
        promise.then(flush);
      }; // for other environments - macrotask based on:
      // - setImmediate
      // - MessageChannel
      // - window.postMessag
      // - onreadystatechange
      // - setTimeout

    } else {
      notify = function notify() {
        // strange IE + webpack dev server bug - use .call(global)
        macrotask.call(_global, flush);
      };
    }

    return function (fn) {
      var task = {
        fn: fn,
        next: undefined
      };
      if (last) last.next = task;

      if (!head) {
        head = task;
        notify();
      }

      last = task;
    };
  }; // 25.4.1.5 NewPromiseCapability(C)


  function PromiseCapability(C) {
    var resolve, reject;
    this.promise = new C(function ($$resolve, $$reject) {
      if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
      resolve = $$resolve;
      reject = $$reject;
    });
    this.resolve = _aFunction(resolve);
    this.reject = _aFunction(reject);
  }

  var f$3 = function f$3(C) {
    return new PromiseCapability(C);
  };

  var _newPromiseCapability = {
    f: f$3
  };

  var _perform = function _perform(exec) {
    try {
      return {
        e: false,
        v: exec()
      };
    } catch (e) {
      return {
        e: true,
        v: e
      };
    }
  };

  var navigator$1 = _global.navigator;

  var _userAgent = navigator$1 && navigator$1.userAgent || '';

  var _promiseResolve = function _promiseResolve(C, x) {
    _anObject(C);

    if (_isObject(x) && x.constructor === C) return x;

    var promiseCapability = _newPromiseCapability.f(C);

    var resolve = promiseCapability.resolve;
    resolve(x);
    return promiseCapability.promise;
  };

  var _redefineAll = function _redefineAll(target, src, safe) {
    for (var key in src) {
      if (safe && target[key]) target[key] = src[key];else _hide(target, key, src[key]);
    }

    return target;
  };

  var SPECIES$1 = _wks('species');

  var _setSpecies = function _setSpecies(KEY) {
    var C = typeof _core[KEY] == 'function' ? _core[KEY] : _global[KEY];
    if (_descriptors && C && !C[SPECIES$1]) _objectDp.f(C, SPECIES$1, {
      configurable: true,
      get: function get() {
        return this;
      }
    });
  };

  var ITERATOR$3 = _wks('iterator');

  var SAFE_CLOSING = false;

  try {
    var riter = [7][ITERATOR$3]();

    riter['return'] = function () {
      SAFE_CLOSING = true;
    }; // eslint-disable-next-line no-throw-literal


    Array.from(riter, function () {
      throw 2;
    });
  } catch (e) {
    /* empty */
  }

  var _iterDetect = function _iterDetect(exec, skipClosing) {
    if (!skipClosing && !SAFE_CLOSING) return false;
    var safe = false;

    try {
      var arr = [7];
      var iter = arr[ITERATOR$3]();

      iter.next = function () {
        return {
          done: safe = true
        };
      };

      arr[ITERATOR$3] = function () {
        return iter;
      };

      exec(arr);
    } catch (e) {
      /* empty */
    }

    return safe;
  };

  var task = _task.set;

  var microtask = _microtask();

  var PROMISE = 'Promise';
  var TypeError$1 = _global.TypeError;
  var process$3 = _global.process;
  var versions = process$3 && process$3.versions;
  var v8 = versions && versions.v8 || '';
  var $Promise = _global[PROMISE];
  var isNode$1 = _classof(process$3) == 'process';

  var empty = function empty() {
    /* empty */
  };

  var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
  var newPromiseCapability = newGenericPromiseCapability = _newPromiseCapability.f;
  var USE_NATIVE = !!function () {
    try {
      // correct subclassing with @@species support
      var promise = $Promise.resolve(1);

      var FakePromise = (promise.constructor = {})[_wks('species')] = function (exec) {
        exec(empty, empty);
      }; // unhandled rejections tracking support, NodeJS Promise without it fails @@species test


      return (isNode$1 || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0 && _userAgent.indexOf('Chrome/66') === -1;
    } catch (e) {
      /* empty */
    }
  }(); // helpers

  var isThenable = function isThenable(it) {
    var then;
    return _isObject(it) && typeof (then = it.then) == 'function' ? then : false;
  };

  var notify = function notify(promise, isReject) {
    if (promise._n) return;
    promise._n = true;
    var chain = promise._c;
    microtask(function () {
      var value = promise._v;
      var ok = promise._s == 1;
      var i = 0;

      var run = function run(reaction) {
        var handler = ok ? reaction.ok : reaction.fail;
        var resolve = reaction.resolve;
        var reject = reaction.reject;
        var domain = reaction.domain;
        var result, then, exited;

        try {
          if (handler) {
            if (!ok) {
              if (promise._h == 2) onHandleUnhandled(promise);
              promise._h = 1;
            }

            if (handler === true) result = value;else {
              if (domain) domain.enter();
              result = handler(value); // may throw

              if (domain) {
                domain.exit();
                exited = true;
              }
            }

            if (result === reaction.promise) {
              reject(TypeError$1('Promise-chain cycle'));
            } else if (then = isThenable(result)) {
              then.call(result, resolve, reject);
            } else resolve(result);
          } else reject(value);
        } catch (e) {
          if (domain && !exited) domain.exit();
          reject(e);
        }
      };

      while (chain.length > i) {
        run(chain[i++]);
      } // variable length - can't use forEach


      promise._c = [];
      promise._n = false;
      if (isReject && !promise._h) onUnhandled(promise);
    });
  };

  var onUnhandled = function onUnhandled(promise) {
    task.call(_global, function () {
      var value = promise._v;
      var unhandled = isUnhandled(promise);
      var result, handler, console;

      if (unhandled) {
        result = _perform(function () {
          if (isNode$1) {
            process$3.emit('unhandledRejection', value, promise);
          } else if (handler = _global.onunhandledrejection) {
            handler({
              promise: promise,
              reason: value
            });
          } else if ((console = _global.console) && console.error) {
            console.error('Unhandled promise rejection', value);
          }
        }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

        promise._h = isNode$1 || isUnhandled(promise) ? 2 : 1;
      }

      promise._a = undefined;
      if (unhandled && result.e) throw result.v;
    });
  };

  var isUnhandled = function isUnhandled(promise) {
    return promise._h !== 1 && (promise._a || promise._c).length === 0;
  };

  var onHandleUnhandled = function onHandleUnhandled(promise) {
    task.call(_global, function () {
      var handler;

      if (isNode$1) {
        process$3.emit('rejectionHandled', promise);
      } else if (handler = _global.onrejectionhandled) {
        handler({
          promise: promise,
          reason: promise._v
        });
      }
    });
  };

  var $reject = function $reject(value) {
    var promise = this;
    if (promise._d) return;
    promise._d = true;
    promise = promise._w || promise; // unwrap

    promise._v = value;
    promise._s = 2;
    if (!promise._a) promise._a = promise._c.slice();
    notify(promise, true);
  };

  var $resolve = function $resolve(value) {
    var promise = this;
    var then;
    if (promise._d) return;
    promise._d = true;
    promise = promise._w || promise; // unwrap

    try {
      if (promise === value) throw TypeError$1("Promise can't be resolved itself");

      if (then = isThenable(value)) {
        microtask(function () {
          var wrapper = {
            _w: promise,
            _d: false
          }; // wrap

          try {
            then.call(value, _ctx($resolve, wrapper, 1), _ctx($reject, wrapper, 1));
          } catch (e) {
            $reject.call(wrapper, e);
          }
        });
      } else {
        promise._v = value;
        promise._s = 1;
        notify(promise, false);
      }
    } catch (e) {
      $reject.call({
        _w: promise,
        _d: false
      }, e); // wrap
    }
  }; // constructor polyfill


  if (!USE_NATIVE) {
    // 25.4.3.1 Promise(executor)
    $Promise = function Promise(executor) {
      _anInstance(this, $Promise, PROMISE, '_h');

      _aFunction(executor);

      Internal.call(this);

      try {
        executor(_ctx($resolve, this, 1), _ctx($reject, this, 1));
      } catch (err) {
        $reject.call(this, err);
      }
    }; // eslint-disable-next-line no-unused-vars


    Internal = function Promise(executor) {
      this._c = []; // <- awaiting reactions

      this._a = undefined; // <- checked in isUnhandled reactions

      this._s = 0; // <- state

      this._d = false; // <- done

      this._v = undefined; // <- value

      this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled

      this._n = false; // <- notify
    };

    Internal.prototype = _redefineAll($Promise.prototype, {
      // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
      then: function then(onFulfilled, onRejected) {
        var reaction = newPromiseCapability(_speciesConstructor(this, $Promise));
        reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
        reaction.fail = typeof onRejected == 'function' && onRejected;
        reaction.domain = isNode$1 ? process$3.domain : undefined;

        this._c.push(reaction);

        if (this._a) this._a.push(reaction);
        if (this._s) notify(this, false);
        return reaction.promise;
      },
      // 25.4.5.1 Promise.prototype.catch(onRejected)
      'catch': function _catch(onRejected) {
        return this.then(undefined, onRejected);
      }
    });

    OwnPromiseCapability = function OwnPromiseCapability() {
      var promise = new Internal();
      this.promise = promise;
      this.resolve = _ctx($resolve, promise, 1);
      this.reject = _ctx($reject, promise, 1);
    };

    _newPromiseCapability.f = newPromiseCapability = function newPromiseCapability(C) {
      return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
    };
  }

  _export(_export.G + _export.W + _export.F * !USE_NATIVE, {
    Promise: $Promise
  });

  _setToStringTag($Promise, PROMISE);

  _setSpecies(PROMISE);

  Wrapper = _core[PROMISE]; // statics

  _export(_export.S + _export.F * !USE_NATIVE, PROMISE, {
    // 25.4.4.5 Promise.reject(r)
    reject: function reject(r) {
      var capability = newPromiseCapability(this);
      var $$reject = capability.reject;
      $$reject(r);
      return capability.promise;
    }
  });

  _export(_export.S + _export.F * _library, PROMISE, {
    // 25.4.4.6 Promise.resolve(x)
    resolve: function resolve(x) {
      return _promiseResolve(this === Wrapper ? $Promise : this, x);
    }
  });

  _export(_export.S + _export.F * !(USE_NATIVE && _iterDetect(function (iter) {
    $Promise.all(iter)['catch'](empty);
  })), PROMISE, {
    // 25.4.4.1 Promise.all(iterable)
    all: function all(iterable) {
      var C = this;
      var capability = newPromiseCapability(C);
      var resolve = capability.resolve;
      var reject = capability.reject;

      var result = _perform(function () {
        var values = [];
        var index = 0;
        var remaining = 1;

        _forOf(iterable, false, function (promise) {
          var $index = index++;
          var alreadyCalled = false;
          values.push(undefined);
          remaining++;
          C.resolve(promise).then(function (value) {
            if (alreadyCalled) return;
            alreadyCalled = true;
            values[$index] = value;
            --remaining || resolve(values);
          }, reject);
        });

        --remaining || resolve(values);
      });

      if (result.e) reject(result.v);
      return capability.promise;
    },
    // 25.4.4.4 Promise.race(iterable)
    race: function race(iterable) {
      var C = this;
      var capability = newPromiseCapability(C);
      var reject = capability.reject;

      var result = _perform(function () {
        _forOf(iterable, false, function (promise) {
          C.resolve(promise).then(capability.resolve, reject);
        });
      });

      if (result.e) reject(result.v);
      return capability.promise;
    }
  });

  _export(_export.P + _export.R, 'Promise', {
    'finally': function _finally(onFinally) {
      var C = _speciesConstructor(this, _core.Promise || _global.Promise);

      var isFunction = typeof onFinally == 'function';
      return this.then(isFunction ? function (x) {
        return _promiseResolve(C, onFinally()).then(function () {
          return x;
        });
      } : onFinally, isFunction ? function (e) {
        return _promiseResolve(C, onFinally()).then(function () {
          throw e;
        });
      } : onFinally);
    }
  }); // https://github.com/tc39/proposal-promise-try


  _export(_export.S, 'Promise', {
    'try': function _try(callbackfn) {
      var promiseCapability = _newPromiseCapability.f(this);

      var result = _perform(callbackfn);

      (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
      return promiseCapability.promise;
    }
  });

  getCjsExportFromNamespace(es6_object_toString);
  var promise = _core.Promise;
  var promise$1 = promise; // 19.1.2.14 Object.keys(O)

  _objectSap('keys', function () {
    return function keys(it) {
      return _objectKeys(_toObject(it));
    };
  });

  var keys = _core.Object.keys;
  var keys$1 = keys; // 7.2.2 IsArray(argument)

  var _isArray = Array.isArray || function isArray(arg) {
    return _cof(arg) == 'Array';
  }; // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)


  _export(_export.S, 'Array', {
    isArray: _isArray
  });

  var isArray = _core.Array.isArray;
  var isArray$1 = isArray;
  var f$4 = _wks;
  var _wksExt = {
    f: f$4
  };

  var iterator = _wksExt.f('iterator');

  var iterator$1 = iterator;

  var _meta = createCommonjsModule(function (module) {
    var META = _uid('meta');

    var setDesc = _objectDp.f;
    var id = 0;

    var isExtensible = Object.isExtensible || function () {
      return true;
    };

    var FREEZE = !_fails(function () {
      return isExtensible(Object.preventExtensions({}));
    });

    var setMeta = function setMeta(it) {
      setDesc(it, META, {
        value: {
          i: 'O' + ++id,
          // object ID
          w: {} // weak collections IDs

        }
      });
    };

    var fastKey = function fastKey(it, create) {
      // return primitive with prefix
      if (!_isObject(it)) return _typeof4(it) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

      if (!_has(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return 'F'; // not necessary to add metadata

        if (!create) return 'E'; // add missing metadata

        setMeta(it); // return object ID
      }

      return it[META].i;
    };

    var getWeak = function getWeak(it, create) {
      if (!_has(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return true; // not necessary to add metadata

        if (!create) return false; // add missing metadata

        setMeta(it); // return hash weak collections IDs
      }

      return it[META].w;
    }; // add metadata on freeze-family methods calling


    var onFreeze = function onFreeze(it) {
      if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);
      return it;
    };

    var meta = module.exports = {
      KEY: META,
      NEED: false,
      fastKey: fastKey,
      getWeak: getWeak,
      onFreeze: onFreeze
    };
  });

  var _meta_1 = _meta.KEY;
  var _meta_2 = _meta.NEED;
  var _meta_3 = _meta.fastKey;
  var _meta_4 = _meta.getWeak;
  var _meta_5 = _meta.onFreeze;
  var defineProperty = _objectDp.f;

  var _wksDefine = function _wksDefine(name) {
    var $Symbol = _core.Symbol || (_core.Symbol = {});
    if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
      value: _wksExt.f(name)
    });
  };

  var f$5 = Object.getOwnPropertySymbols;
  var _objectGops = {
    f: f$5
  };
  var f$6 = {}.propertyIsEnumerable;
  var _objectPie = {
    f: f$6
  }; // all enumerable object keys, includes symbols

  var _enumKeys = function _enumKeys(it) {
    var result = _objectKeys(it);

    var getSymbols = _objectGops.f;

    if (getSymbols) {
      var symbols = getSymbols(it);
      var isEnum = _objectPie.f;
      var i = 0;
      var key;

      while (symbols.length > i) {
        if (isEnum.call(it, key = symbols[i++])) result.push(key);
      }
    }

    return result;
  };

  var gOPD = Object.getOwnPropertyDescriptor;
  var f$7 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
    O = _toIobject(O);
    P = _toPrimitive(P, true);
    if (_ie8DomDefine) try {
      return gOPD(O, P);
    } catch (e) {
      /* empty */
    }
    if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
  };
  var _objectGopd = {
    f: f$7
  }; // ECMAScript 6 symbols shim

  var META = _meta.KEY;
  var gOPD$1 = _objectGopd.f;
  var dP$1 = _objectDp.f;
  var gOPN$1 = _objectGopnExt.f;
  var $Symbol = _global.Symbol;
  var $JSON = _global.JSON;

  var _stringify = $JSON && $JSON.stringify;

  var PROTOTYPE$2 = 'prototype';

  var HIDDEN = _wks('_hidden');

  var TO_PRIMITIVE = _wks('toPrimitive');

  var isEnum = {}.propertyIsEnumerable;

  var SymbolRegistry = _shared('symbol-registry');

  var AllSymbols = _shared('symbols');

  var OPSymbols = _shared('op-symbols');

  var ObjectProto$1 = Object[PROTOTYPE$2];
  var USE_NATIVE$1 = typeof $Symbol == 'function' && !!_objectGops.f;
  var QObject = _global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

  var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

  var setSymbolDesc = _descriptors && _fails(function () {
    return _objectCreate(dP$1({}, 'a', {
      get: function get() {
        return dP$1(this, 'a', {
          value: 7
        }).a;
      }
    })).a != 7;
  }) ? function (it, key, D) {
    var protoDesc = gOPD$1(ObjectProto$1, key);
    if (protoDesc) delete ObjectProto$1[key];
    dP$1(it, key, D);
    if (protoDesc && it !== ObjectProto$1) dP$1(ObjectProto$1, key, protoDesc);
  } : dP$1;

  var wrap = function wrap(tag) {
    var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);

    sym._k = tag;
    return sym;
  };

  var isSymbol = USE_NATIVE$1 && _typeof4($Symbol.iterator) == 'symbol' ? function (it) {
    return _typeof4(it) == 'symbol';
  } : function (it) {
    return it instanceof $Symbol;
  };

  var $defineProperty = function defineProperty(it, key, D) {
    if (it === ObjectProto$1) $defineProperty(OPSymbols, key, D);

    _anObject(it);

    key = _toPrimitive(key, true);

    _anObject(D);

    if (_has(AllSymbols, key)) {
      if (!D.enumerable) {
        if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
        D = _objectCreate(D, {
          enumerable: _propertyDesc(0, false)
        });
      }

      return setSymbolDesc(it, key, D);
    }

    return dP$1(it, key, D);
  };

  var $defineProperties = function defineProperties(it, P) {
    _anObject(it);

    var keys = _enumKeys(P = _toIobject(P));

    var i = 0;
    var l = keys.length;
    var key;

    while (l > i) {
      $defineProperty(it, key = keys[i++], P[key]);
    }

    return it;
  };

  var $create = function create(it, P) {
    return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);
  };

  var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = isEnum.call(this, key = _toPrimitive(key, true));
    if (this === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;
    return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
  };

  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    it = _toIobject(it);
    key = _toPrimitive(key, true);
    if (it === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;
    var D = gOPD$1(it, key);
    if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
    return D;
  };

  var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = gOPN$1(_toIobject(it));
    var result = [];
    var i = 0;
    var key;

    while (names.length > i) {
      if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
    }

    return result;
  };

  var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var IS_OP = it === ObjectProto$1;
    var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));
    var result = [];
    var i = 0;
    var key;

    while (names.length > i) {
      if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto$1, key) : true)) result.push(AllSymbols[key]);
    }

    return result;
  }; // 19.4.1.1 Symbol([description])


  if (!USE_NATIVE$1) {
    $Symbol = function _Symbol2() {
      if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');

      var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);

      var $set = function $set(value) {
        if (this === ObjectProto$1) $set.call(OPSymbols, value);
        if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
        setSymbolDesc(this, tag, _propertyDesc(1, value));
      };

      if (_descriptors && setter) setSymbolDesc(ObjectProto$1, tag, {
        configurable: true,
        set: $set
      });
      return wrap(tag);
    };

    _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {
      return this._k;
    });

    _objectGopd.f = $getOwnPropertyDescriptor;
    _objectDp.f = $defineProperty;
    _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;
    _objectPie.f = $propertyIsEnumerable;
    _objectGops.f = $getOwnPropertySymbols;

    if (_descriptors && !_library) {
      _redefine(ObjectProto$1, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    }

    _wksExt.f = function (name) {
      return wrap(_wks(name));
    };
  }

  _export(_export.G + _export.W + _export.F * !USE_NATIVE$1, {
    Symbol: $Symbol
  });

  for (var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;) {
    _wks(es6Symbols[j++]);
  }

  for (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) {
    _wksDefine(wellKnownSymbols[k++]);
  }

  _export(_export.S + _export.F * !USE_NATIVE$1, 'Symbol', {
    // 19.4.2.1 Symbol.for(key)
    'for': function _for(key) {
      return _has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
    },
    // 19.4.2.5 Symbol.keyFor(sym)
    keyFor: function keyFor(sym) {
      if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');

      for (var key in SymbolRegistry) {
        if (SymbolRegistry[key] === sym) return key;
      }
    },
    useSetter: function useSetter() {
      setter = true;
    },
    useSimple: function useSimple() {
      setter = false;
    }
  });

  _export(_export.S + _export.F * !USE_NATIVE$1, 'Object', {
    // 19.1.2.2 Object.create(O [, Properties])
    create: $create,
    // 19.1.2.4 Object.defineProperty(O, P, Attributes)
    defineProperty: $defineProperty,
    // 19.1.2.3 Object.defineProperties(O, Properties)
    defineProperties: $defineProperties,
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    getOwnPropertyNames: $getOwnPropertyNames,
    // 19.1.2.8 Object.getOwnPropertySymbols(O)
    getOwnPropertySymbols: $getOwnPropertySymbols
  }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
  // https://bugs.chromium.org/p/v8/issues/detail?id=3443


  var FAILS_ON_PRIMITIVES = _fails(function () {
    _objectGops.f(1);
  });

  _export(_export.S + _export.F * FAILS_ON_PRIMITIVES, 'Object', {
    getOwnPropertySymbols: function getOwnPropertySymbols(it) {
      return _objectGops.f(_toObject(it));
    }
  }); // 24.3.2 JSON.stringify(value [, replacer [, space]])


  $JSON && _export(_export.S + _export.F * (!USE_NATIVE$1 || _fails(function () {
    var S = $Symbol(); // MS Edge converts symbol values to JSON as {}
    // WebKit converts symbol values to JSON as null
    // V8 throws on boxed symbols

    return _stringify([S]) != '[null]' || _stringify({
      a: S
    }) != '{}' || _stringify(Object(S)) != '{}';
  })), 'JSON', {
    stringify: function stringify(it) {
      var args = [it];
      var i = 1;
      var replacer, $replacer;

      while (arguments.length > i) {
        args.push(arguments[i++]);
      }

      $replacer = replacer = args[1];
      if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

      if (!_isArray(replacer)) replacer = function replacer(key, value) {
        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return _stringify.apply($JSON, args);
    }
  }); // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

  $Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf); // 19.4.3.5 Symbol.prototype[@@toStringTag]

  _setToStringTag($Symbol, 'Symbol'); // 20.2.1.9 Math[@@toStringTag]


  _setToStringTag(Math, 'Math', true); // 24.3.3 JSON[@@toStringTag]


  _setToStringTag(_global.JSON, 'JSON', true);

  _wksDefine('asyncIterator');

  _wksDefine('observable');

  var symbol = _core.Symbol;
  var symbol$1 = symbol;

  var _typeof_1 = createCommonjsModule(function (module) {
    function _typeof2(obj) {
      if (typeof symbol$1 === "function" && _typeof4(iterator$1) === "symbol") {
        _typeof2 = function _typeof2(obj) {
          return _typeof4(obj);
        };
      } else {
        _typeof2 = function _typeof2(obj) {
          return obj && typeof symbol$1 === "function" && obj.constructor === symbol$1 && obj !== symbol$1.prototype ? "symbol" : _typeof4(obj);
        };
      }

      return _typeof2(obj);
    }

    function _typeof(obj) {
      if (typeof symbol$1 === "function" && _typeof2(iterator$1) === "symbol") {
        module.exports = _typeof = function _typeof(obj) {
          return _typeof2(obj);
        };
      } else {
        module.exports = _typeof = function _typeof(obj) {
          return obj && typeof symbol$1 === "function" && obj.constructor === symbol$1 && obj !== symbol$1.prototype ? "symbol" : _typeof2(obj);
        };
      }

      return _typeof(obj);
    }

    module.exports = _typeof;
  });

  var isMobile = createCommonjsModule(function (module) {
    (function (global) {
      var apple_phone = /iPhone/i,
          apple_ipod = /iPod/i,
          apple_tablet = /iPad/i,
          android_phone = /\bAndroid(?:.+)Mobile\b/i,
          // Match 'Android' AND 'Mobile'
      android_tablet = /Android/i,
          amazon_phone = /\bAndroid(?:.+)SD4930UR\b/i,
          amazon_tablet = /\bAndroid(?:.+)(?:KF[A-Z]{2,4})\b/i,
          windows_phone = /Windows Phone/i,
          windows_tablet = /\bWindows(?:.+)ARM\b/i,
          // Match 'Windows' AND 'ARM'
      other_blackberry = /BlackBerry/i,
          other_blackberry_10 = /BB10/i,
          other_opera = /Opera Mini/i,
          other_chrome = /\b(CriOS|Chrome)(?:.+)Mobile/i,
          other_firefox = /Mobile(?:.+)Firefox\b/i; // Match 'Mobile' AND 'Firefox'

      function match(regex, userAgent) {
        return regex.test(userAgent);
      }

      function isMobile(userAgent) {
        var ua = userAgent || (typeof navigator !== 'undefined' ? navigator.userAgent : ''); // Facebook mobile app's integrated browser adds a bunch of strings that
        // match everything. Strip it out if it exists.

        var tmp = ua.split('[FBAN');

        if (typeof tmp[1] !== 'undefined') {
          ua = tmp[0];
        } // Twitter mobile app's integrated browser on iPad adds a "Twitter for
        // iPhone" string. Same probably happens on other tablet platforms.
        // This will confuse detection so strip it out if it exists.


        tmp = ua.split('Twitter');

        if (typeof tmp[1] !== 'undefined') {
          ua = tmp[0];
        }

        var result = {
          apple: {
            phone: match(apple_phone, ua) && !match(windows_phone, ua),
            ipod: match(apple_ipod, ua),
            tablet: !match(apple_phone, ua) && match(apple_tablet, ua) && !match(windows_phone, ua),
            device: (match(apple_phone, ua) || match(apple_ipod, ua) || match(apple_tablet, ua)) && !match(windows_phone, ua)
          },
          amazon: {
            phone: match(amazon_phone, ua),
            tablet: !match(amazon_phone, ua) && match(amazon_tablet, ua),
            device: match(amazon_phone, ua) || match(amazon_tablet, ua)
          },
          android: {
            phone: !match(windows_phone, ua) && match(amazon_phone, ua) || !match(windows_phone, ua) && match(android_phone, ua),
            tablet: !match(windows_phone, ua) && !match(amazon_phone, ua) && !match(android_phone, ua) && (match(amazon_tablet, ua) || match(android_tablet, ua)),
            device: !match(windows_phone, ua) && (match(amazon_phone, ua) || match(amazon_tablet, ua) || match(android_phone, ua) || match(android_tablet, ua)) || match(/\bokhttp\b/i, ua)
          },
          windows: {
            phone: match(windows_phone, ua),
            tablet: match(windows_tablet, ua),
            device: match(windows_phone, ua) || match(windows_tablet, ua)
          },
          other: {
            blackberry: match(other_blackberry, ua),
            blackberry10: match(other_blackberry_10, ua),
            opera: match(other_opera, ua),
            firefox: match(other_firefox, ua),
            chrome: match(other_chrome, ua),
            device: match(other_blackberry, ua) || match(other_blackberry_10, ua) || match(other_opera, ua) || match(other_firefox, ua) || match(other_chrome, ua)
          }
        };
        result.any = result.apple.device || result.android.device || result.windows.device || result.other.device, // excludes 'other' devices and ipods, targeting touchscreen phones
        result.phone = result.apple.phone || result.android.phone || result.windows.phone, result.tablet = result.apple.tablet || result.android.tablet || result.windows.tablet;
        return result;
      }

      if (module.exports && typeof window === 'undefined') {
        // Node.js
        module.exports = isMobile;
      } else if (module.exports && typeof window !== 'undefined') {
        // Browserify
        module.exports = isMobile();
        module.exports.isMobile = isMobile;
      } else {
        global.isMobile = isMobile();
      }
    })(commonjsGlobal);
  });
  var isMobile_1 = isMobile.isMobile;
  var semver = createCommonjsModule(function (module, exports) {
    exports = module.exports = SemVer;
    var debug;
    /* istanbul ignore next */

    if ((typeof process === "undefined" ? "undefined" : _typeof4(process)) === 'object' && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
      debug = function debug() {
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift('SEMVER');
        console.log.apply(console, args);
      };
    } else {
      debug = function debug() {};
    } // Note: this is the semver.org version of the spec that it implements
    // Not necessarily the package version of this code.


    exports.SEMVER_SPEC_VERSION = '2.0.0';
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
    /* istanbul ignore next */
    9007199254740991; // Max safe segment length for coercion.

    var MAX_SAFE_COMPONENT_LENGTH = 16; // The actual regexps go on exports.re

    var re = exports.re = [];
    var src = exports.src = [];
    var R = 0; // The following Regular Expressions can be used for tokenizing,
    // validating, and parsing SemVer version strings.
    // ## Numeric Identifier
    // A single `0`, or a non-zero digit followed by zero or more digits.

    var NUMERICIDENTIFIER = R++;
    src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
    var NUMERICIDENTIFIERLOOSE = R++;
    src[NUMERICIDENTIFIERLOOSE] = '[0-9]+'; // ## Non-numeric Identifier
    // Zero or more digits, followed by a letter or hyphen, and then zero or
    // more letters, digits, or hyphens.

    var NONNUMERICIDENTIFIER = R++;
    src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*'; // ## Main Version
    // Three dot-separated numeric identifiers.

    var MAINVERSION = R++;
    src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' + '(' + src[NUMERICIDENTIFIER] + ')\\.' + '(' + src[NUMERICIDENTIFIER] + ')';
    var MAINVERSIONLOOSE = R++;
    src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[NUMERICIDENTIFIERLOOSE] + ')'; // ## Pre-release Version Identifier
    // A numeric identifier, or a non-numeric identifier.

    var PRERELEASEIDENTIFIER = R++;
    src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] + '|' + src[NONNUMERICIDENTIFIER] + ')';
    var PRERELEASEIDENTIFIERLOOSE = R++;
    src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] + '|' + src[NONNUMERICIDENTIFIER] + ')'; // ## Pre-release Version
    // Hyphen, followed by one or more dot-separated pre-release version
    // identifiers.

    var PRERELEASE = R++;
    src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] + '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';
    var PRERELEASELOOSE = R++;
    src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] + '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))'; // ## Build Metadata Identifier
    // Any combination of digits, letters, or hyphens.

    var BUILDIDENTIFIER = R++;
    src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+'; // ## Build Metadata
    // Plus sign, followed by one or more period-separated build metadata
    // identifiers.

    var BUILD = R++;
    src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] + '(?:\\.' + src[BUILDIDENTIFIER] + ')*))'; // ## Full Version String
    // A main version, followed optionally by a pre-release version and
    // build metadata.
    // Note that the only major, minor, patch, and pre-release sections of
    // the version string are capturing groups.  The build metadata is not a
    // capturing group, because it should not ever be used in version
    // comparison.

    var FULL = R++;
    var FULLPLAIN = 'v?' + src[MAINVERSION] + src[PRERELEASE] + '?' + src[BUILD] + '?';
    src[FULL] = '^' + FULLPLAIN + '$'; // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
    // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
    // common in the npm registry.

    var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] + src[PRERELEASELOOSE] + '?' + src[BUILD] + '?';
    var LOOSE = R++;
    src[LOOSE] = '^' + LOOSEPLAIN + '$';
    var GTLT = R++;
    src[GTLT] = '((?:<|>)?=?)'; // Something like "2.*" or "1.2.x".
    // Note that "x.x" is a valid xRange identifer, meaning "any version"
    // Only the first item is strictly required.

    var XRANGEIDENTIFIERLOOSE = R++;
    src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
    var XRANGEIDENTIFIER = R++;
    src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';
    var XRANGEPLAIN = R++;
    src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' + '(?:' + src[PRERELEASE] + ')?' + src[BUILD] + '?' + ')?)?';
    var XRANGEPLAINLOOSE = R++;
    src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:' + src[PRERELEASELOOSE] + ')?' + src[BUILD] + '?' + ')?)?';
    var XRANGE = R++;
    src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
    var XRANGELOOSE = R++;
    src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$'; // Coercion.
    // Extract anything that could conceivably be a part of a valid semver

    var COERCE = R++;
    src[COERCE] = '(?:^|[^\\d])' + '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' + '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:$|[^\\d])'; // Tilde ranges.
    // Meaning is "reasonably at or greater than"

    var LONETILDE = R++;
    src[LONETILDE] = '(?:~>?)';
    var TILDETRIM = R++;
    src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
    re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
    var tildeTrimReplace = '$1~';
    var TILDE = R++;
    src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
    var TILDELOOSE = R++;
    src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$'; // Caret ranges.
    // Meaning is "at least and backwards compatible with"

    var LONECARET = R++;
    src[LONECARET] = '(?:\\^)';
    var CARETTRIM = R++;
    src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
    re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
    var caretTrimReplace = '$1^';
    var CARET = R++;
    src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
    var CARETLOOSE = R++;
    src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$'; // A simple gt/lt/eq thing, or just "" to indicate "any version"

    var COMPARATORLOOSE = R++;
    src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
    var COMPARATOR = R++;
    src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$'; // An expression to strip any whitespace between the gtlt and the thing
    // it modifies, so that `> 1.2.3` ==> `>1.2.3`

    var COMPARATORTRIM = R++;
    src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] + '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')'; // this one has to use the /g flag

    re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
    var comparatorTrimReplace = '$1$2$3'; // Something like `1.2.3 - 1.2.4`
    // Note that these all use the loose form, because they'll be
    // checked against either the strict or loose comparator form
    // later.

    var HYPHENRANGE = R++;
    src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' + '\\s+-\\s+' + '(' + src[XRANGEPLAIN] + ')' + '\\s*$';
    var HYPHENRANGELOOSE = R++;
    src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' + '\\s+-\\s+' + '(' + src[XRANGEPLAINLOOSE] + ')' + '\\s*$'; // Star ranges basically just allow anything at all.

    var STAR = R++;
    src[STAR] = '(<|>)?=?\\s*\\*'; // Compile to actual regexp objects.
    // All are flag-free, unless they were created above with a flag.

    for (var i = 0; i < R; i++) {
      debug(i, src[i]);

      if (!re[i]) {
        re[i] = new RegExp(src[i]);
      }
    }

    exports.parse = parse;

    function parse(version, options) {
      if (!options || _typeof4(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (version instanceof SemVer) {
        return version;
      }

      if (typeof version !== 'string') {
        return null;
      }

      if (version.length > MAX_LENGTH) {
        return null;
      }

      var r = options.loose ? re[LOOSE] : re[FULL];

      if (!r.test(version)) {
        return null;
      }

      try {
        return new SemVer(version, options);
      } catch (er) {
        return null;
      }
    }

    exports.valid = valid;

    function valid(version, options) {
      var v = parse(version, options);
      return v ? v.version : null;
    }

    exports.clean = clean;

    function clean(version, options) {
      var s = parse(version.trim().replace(/^[=v]+/, ''), options);
      return s ? s.version : null;
    }

    exports.SemVer = SemVer;

    function SemVer(version, options) {
      if (!options || _typeof4(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (version instanceof SemVer) {
        if (version.loose === options.loose) {
          return version;
        } else {
          version = version.version;
        }
      } else if (typeof version !== 'string') {
        throw new TypeError('Invalid Version: ' + version);
      }

      if (version.length > MAX_LENGTH) {
        throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters');
      }

      if (!(this instanceof SemVer)) {
        return new SemVer(version, options);
      }

      debug('SemVer', version, options);
      this.options = options;
      this.loose = !!options.loose;
      var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL]);

      if (!m) {
        throw new TypeError('Invalid Version: ' + version);
      }

      this.raw = version; // these are actually numbers

      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];

      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError('Invalid major version');
      }

      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError('Invalid minor version');
      }

      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError('Invalid patch version');
      } // numberify any prerelease numeric ids


      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split('.').map(function (id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id;

            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num;
            }
          }

          return id;
        });
      }

      this.build = m[5] ? m[5].split('.') : [];
      this.format();
    }

    SemVer.prototype.format = function () {
      this.version = this.major + '.' + this.minor + '.' + this.patch;

      if (this.prerelease.length) {
        this.version += '-' + this.prerelease.join('.');
      }

      return this.version;
    };

    SemVer.prototype.toString = function () {
      return this.version;
    };

    SemVer.prototype.compare = function (other) {
      debug('SemVer.compare', this.version, this.options, other);

      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }

      return this.compareMain(other) || this.comparePre(other);
    };

    SemVer.prototype.compareMain = function (other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }

      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    };

    SemVer.prototype.comparePre = function (other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      } // NOT having a prerelease is > having one


      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }

      var i = 0;

      do {
        var a = this.prerelease[i];
        var b = other.prerelease[i];
        debug('prerelease compare', i, a, b);

        if (a === undefined && b === undefined) {
          return 0;
        } else if (b === undefined) {
          return 1;
        } else if (a === undefined) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i);
    }; // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.


    SemVer.prototype.inc = function (release, identifier) {
      switch (release) {
        case 'premajor':
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc('pre', identifier);
          break;

        case 'preminor':
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc('pre', identifier);
          break;

        case 'prepatch':
          // If this is already a prerelease, it will bump to the next version
          // drop any prereleases that might already exist, since they are not
          // relevant at this point.
          this.prerelease.length = 0;
          this.inc('patch', identifier);
          this.inc('pre', identifier);
          break;
        // If the input is a non-prerelease version, this acts the same as
        // prepatch.

        case 'prerelease':
          if (this.prerelease.length === 0) {
            this.inc('patch', identifier);
          }

          this.inc('pre', identifier);
          break;

        case 'major':
          // If this is a pre-major version, bump up to the same major version.
          // Otherwise increment major.
          // 1.0.0-5 bumps to 1.0.0
          // 1.1.0 bumps to 2.0.0
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }

          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;

        case 'minor':
          // If this is a pre-minor version, bump up to the same minor version.
          // Otherwise increment minor.
          // 1.2.0-5 bumps to 1.2.0
          // 1.2.1 bumps to 1.3.0
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }

          this.patch = 0;
          this.prerelease = [];
          break;

        case 'patch':
          // If this is not a pre-release version, it will increment the patch.
          // If it is a pre-release it will bump up to the same patch version.
          // 1.2.0-5 patches to 1.2.0
          // 1.2.0 patches to 1.2.1
          if (this.prerelease.length === 0) {
            this.patch++;
          }

          this.prerelease = [];
          break;
        // This probably shouldn't be used publicly.
        // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.

        case 'pre':
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            var i = this.prerelease.length;

            while (--i >= 0) {
              if (typeof this.prerelease[i] === 'number') {
                this.prerelease[i]++;
                i = -2;
              }
            }

            if (i === -1) {
              // didn't increment anything
              this.prerelease.push(0);
            }
          }

          if (identifier) {
            // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
            // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
            if (this.prerelease[0] === identifier) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier, 0];
              }
            } else {
              this.prerelease = [identifier, 0];
            }
          }

          break;

        default:
          throw new Error('invalid increment argument: ' + release);
      }

      this.format();
      this.raw = this.version;
      return this;
    };

    exports.inc = inc;

    function inc(version, release, loose, identifier) {
      if (typeof loose === 'string') {
        identifier = loose;
        loose = undefined;
      }

      try {
        return new SemVer(version, loose).inc(release, identifier).version;
      } catch (er) {
        return null;
      }
    }

    exports.diff = diff;

    function diff(version1, version2) {
      if (eq(version1, version2)) {
        return null;
      } else {
        var v1 = parse(version1);
        var v2 = parse(version2);
        var prefix = '';

        if (v1.prerelease.length || v2.prerelease.length) {
          prefix = 'pre';
          var defaultResult = 'prerelease';
        }

        for (var key in v1) {
          if (key === 'major' || key === 'minor' || key === 'patch') {
            if (v1[key] !== v2[key]) {
              return prefix + key;
            }
          }
        }

        return defaultResult; // may be undefined
      }
    }

    exports.compareIdentifiers = compareIdentifiers;
    var numeric = /^[0-9]+$/;

    function compareIdentifiers(a, b) {
      var anum = numeric.test(a);
      var bnum = numeric.test(b);

      if (anum && bnum) {
        a = +a;
        b = +b;
      }

      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    }

    exports.rcompareIdentifiers = rcompareIdentifiers;

    function rcompareIdentifiers(a, b) {
      return compareIdentifiers(b, a);
    }

    exports.major = major;

    function major(a, loose) {
      return new SemVer(a, loose).major;
    }

    exports.minor = minor;

    function minor(a, loose) {
      return new SemVer(a, loose).minor;
    }

    exports.patch = patch;

    function patch(a, loose) {
      return new SemVer(a, loose).patch;
    }

    exports.compare = compare;

    function compare(a, b, loose) {
      return new SemVer(a, loose).compare(new SemVer(b, loose));
    }

    exports.compareLoose = compareLoose;

    function compareLoose(a, b) {
      return compare(a, b, true);
    }

    exports.rcompare = rcompare;

    function rcompare(a, b, loose) {
      return compare(b, a, loose);
    }

    exports.sort = sort;

    function sort(list, loose) {
      return list.sort(function (a, b) {
        return exports.compare(a, b, loose);
      });
    }

    exports.rsort = rsort;

    function rsort(list, loose) {
      return list.sort(function (a, b) {
        return exports.rcompare(a, b, loose);
      });
    }

    exports.gt = gt;

    function gt(a, b, loose) {
      return compare(a, b, loose) > 0;
    }

    exports.lt = lt;

    function lt(a, b, loose) {
      return compare(a, b, loose) < 0;
    }

    exports.eq = eq;

    function eq(a, b, loose) {
      return compare(a, b, loose) === 0;
    }

    exports.neq = neq;

    function neq(a, b, loose) {
      return compare(a, b, loose) !== 0;
    }

    exports.gte = gte;

    function gte(a, b, loose) {
      return compare(a, b, loose) >= 0;
    }

    exports.lte = lte;

    function lte(a, b, loose) {
      return compare(a, b, loose) <= 0;
    }

    exports.cmp = cmp;

    function cmp(a, op, b, loose) {
      switch (op) {
        case '===':
          if (_typeof4(a) === 'object') a = a.version;
          if (_typeof4(b) === 'object') b = b.version;
          return a === b;

        case '!==':
          if (_typeof4(a) === 'object') a = a.version;
          if (_typeof4(b) === 'object') b = b.version;
          return a !== b;

        case '':
        case '=':
        case '==':
          return eq(a, b, loose);

        case '!=':
          return neq(a, b, loose);

        case '>':
          return gt(a, b, loose);

        case '>=':
          return gte(a, b, loose);

        case '<':
          return lt(a, b, loose);

        case '<=':
          return lte(a, b, loose);

        default:
          throw new TypeError('Invalid operator: ' + op);
      }
    }

    exports.Comparator = Comparator;

    function Comparator(comp, options) {
      if (!options || _typeof4(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }

      if (!(this instanceof Comparator)) {
        return new Comparator(comp, options);
      }

      debug('comparator', comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);

      if (this.semver === ANY) {
        this.value = '';
      } else {
        this.value = this.operator + this.semver.version;
      }

      debug('comp', this);
    }

    var ANY = {};

    Comparator.prototype.parse = function (comp) {
      var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
      var m = comp.match(r);

      if (!m) {
        throw new TypeError('Invalid comparator: ' + comp);
      }

      this.operator = m[1];

      if (this.operator === '=') {
        this.operator = '';
      } // if it literally is just '>' or '' then allow anything.


      if (!m[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m[2], this.options.loose);
      }
    };

    Comparator.prototype.toString = function () {
      return this.value;
    };

    Comparator.prototype.test = function (version) {
      debug('Comparator.test', version, this.options.loose);

      if (this.semver === ANY) {
        return true;
      }

      if (typeof version === 'string') {
        version = new SemVer(version, this.options);
      }

      return cmp(version, this.operator, this.semver, this.options);
    };

    Comparator.prototype.intersects = function (comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError('a Comparator is required');
      }

      if (!options || _typeof4(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      var rangeTmp;

      if (this.operator === '') {
        rangeTmp = new Range(comp.value, options);
        return satisfies(this.value, rangeTmp, options);
      } else if (comp.operator === '') {
        rangeTmp = new Range(this.value, options);
        return satisfies(comp.semver, rangeTmp, options);
      }

      var sameDirectionIncreasing = (this.operator === '>=' || this.operator === '>') && (comp.operator === '>=' || comp.operator === '>');
      var sameDirectionDecreasing = (this.operator === '<=' || this.operator === '<') && (comp.operator === '<=' || comp.operator === '<');
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive = (this.operator === '>=' || this.operator === '<=') && (comp.operator === '>=' || comp.operator === '<=');
      var oppositeDirectionsLessThan = cmp(this.semver, '<', comp.semver, options) && (this.operator === '>=' || this.operator === '>') && (comp.operator === '<=' || comp.operator === '<');
      var oppositeDirectionsGreaterThan = cmp(this.semver, '>', comp.semver, options) && (this.operator === '<=' || this.operator === '<') && (comp.operator === '>=' || comp.operator === '>');
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    };

    exports.Range = Range;

    function Range(range, options) {
      if (!options || _typeof4(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (range instanceof Range) {
        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options);
        }
      }

      if (range instanceof Comparator) {
        return new Range(range.value, options);
      }

      if (!(this instanceof Range)) {
        return new Range(range, options);
      }

      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease; // First, split based on boolean or ||

      this.raw = range;
      this.set = range.split(/\s*\|\|\s*/).map(function (range) {
        return this.parseRange(range.trim());
      }, this).filter(function (c) {
        // throw out any that are not relevant for whatever reason
        return c.length;
      });

      if (!this.set.length) {
        throw new TypeError('Invalid SemVer Range: ' + range);
      }

      this.format();
    }

    Range.prototype.format = function () {
      this.range = this.set.map(function (comps) {
        return comps.join(' ').trim();
      }).join('||').trim();
      return this.range;
    };

    Range.prototype.toString = function () {
      return this.range;
    };

    Range.prototype.parseRange = function (range) {
      var loose = this.options.loose;
      range = range.trim(); // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`

      var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
      range = range.replace(hr, hyphenReplace);
      debug('hyphen replace', range); // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`

      range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
      debug('comparator trim', range, re[COMPARATORTRIM]); // `~ 1.2.3` => `~1.2.3`

      range = range.replace(re[TILDETRIM], tildeTrimReplace); // `^ 1.2.3` => `^1.2.3`

      range = range.replace(re[CARETTRIM], caretTrimReplace); // normalize spaces

      range = range.split(/\s+/).join(' '); // At this point, the range is completely trimmed and
      // ready to be split into comparators.

      var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
      var set = range.split(' ').map(function (comp) {
        return parseComparator(comp, this.options);
      }, this).join(' ').split(/\s+/);

      if (this.options.loose) {
        // in loose mode, throw out any that are not valid comparators
        set = set.filter(function (comp) {
          return !!comp.match(compRe);
        });
      }

      set = set.map(function (comp) {
        return new Comparator(comp, this.options);
      }, this);
      return set;
    };

    Range.prototype.intersects = function (range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError('a Range is required');
      }

      return this.set.some(function (thisComparators) {
        return thisComparators.every(function (thisComparator) {
          return range.set.some(function (rangeComparators) {
            return rangeComparators.every(function (rangeComparator) {
              return thisComparator.intersects(rangeComparator, options);
            });
          });
        });
      });
    }; // Mostly just for testing and legacy API reasons


    exports.toComparators = toComparators;

    function toComparators(range, options) {
      return new Range(range, options).set.map(function (comp) {
        return comp.map(function (c) {
          return c.value;
        }).join(' ').trim().split(' ');
      });
    } // comprised of xranges, tildes, stars, and gtlt's at this point.
    // already replaced the hyphen ranges
    // turn into a set of JUST comparators.


    function parseComparator(comp, options) {
      debug('comp', comp, options);
      comp = replaceCarets(comp, options);
      debug('caret', comp);
      comp = replaceTildes(comp, options);
      debug('tildes', comp);
      comp = replaceXRanges(comp, options);
      debug('xrange', comp);
      comp = replaceStars(comp, options);
      debug('stars', comp);
      return comp;
    }

    function isX(id) {
      return !id || id.toLowerCase() === 'x' || id === '*';
    } // ~, ~> --> * (any, kinda silly)
    // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
    // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
    // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
    // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
    // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0


    function replaceTildes(comp, options) {
      return comp.trim().split(/\s+/).map(function (comp) {
        return replaceTilde(comp, options);
      }).join(' ');
    }

    function replaceTilde(comp, options) {
      var r = options.loose ? re[TILDELOOSE] : re[TILDE];
      return comp.replace(r, function (_, M, m, p, pr) {
        debug('tilde', comp, _, M, m, p, pr);
        var ret;

        if (isX(M)) {
          ret = '';
        } else if (isX(m)) {
          ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
        } else if (isX(p)) {
          // ~1.2 == >=1.2.0 <1.3.0
          ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
        } else if (pr) {
          debug('replaceTilde pr', pr);
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
        } else {
          // ~1.2.3 == >=1.2.3 <1.3.0
          ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
        }

        debug('tilde return', ret);
        return ret;
      });
    } // ^ --> * (any, kinda silly)
    // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
    // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
    // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
    // ^1.2.3 --> >=1.2.3 <2.0.0
    // ^1.2.0 --> >=1.2.0 <2.0.0


    function replaceCarets(comp, options) {
      return comp.trim().split(/\s+/).map(function (comp) {
        return replaceCaret(comp, options);
      }).join(' ');
    }

    function replaceCaret(comp, options) {
      debug('caret', comp, options);
      var r = options.loose ? re[CARETLOOSE] : re[CARET];
      return comp.replace(r, function (_, M, m, p, pr) {
        debug('caret', comp, _, M, m, p, pr);
        var ret;

        if (isX(M)) {
          ret = '';
        } else if (isX(m)) {
          ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
        } else if (isX(p)) {
          if (M === '0') {
            ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
          } else {
            ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
          }
        } else if (pr) {
          debug('replaceCaret pr', pr);

          if (M === '0') {
            if (m === '0') {
              ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + m + '.' + (+p + 1);
            } else {
              ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
            }
          } else {
            ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + (+M + 1) + '.0.0';
          }
        } else {
          debug('no pr');

          if (M === '0') {
            if (m === '0') {
              ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + m + '.' + (+p + 1);
            } else {
              ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
            }
          } else {
            ret = '>=' + M + '.' + m + '.' + p + ' <' + (+M + 1) + '.0.0';
          }
        }

        debug('caret return', ret);
        return ret;
      });
    }

    function replaceXRanges(comp, options) {
      debug('replaceXRanges', comp, options);
      return comp.split(/\s+/).map(function (comp) {
        return replaceXRange(comp, options);
      }).join(' ');
    }

    function replaceXRange(comp, options) {
      comp = comp.trim();
      var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];
      return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
        debug('xRange', comp, ret, gtlt, M, m, p, pr);
        var xM = isX(M);
        var xm = xM || isX(m);
        var xp = xm || isX(p);
        var anyX = xp;

        if (gtlt === '=' && anyX) {
          gtlt = '';
        }

        if (xM) {
          if (gtlt === '>' || gtlt === '<') {
            // nothing is allowed
            ret = '<0.0.0';
          } else {
            // nothing is forbidden
            ret = '*';
          }
        } else if (gtlt && anyX) {
          // we know patch is an x, because we have any x at all.
          // replace X with 0
          if (xm) {
            m = 0;
          }

          p = 0;

          if (gtlt === '>') {
            // >1 => >=2.0.0
            // >1.2 => >=1.3.0
            // >1.2.3 => >= 1.2.4
            gtlt = '>=';

            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === '<=') {
            // <=0.7.x is actually <0.8.0, since any 0.7.x should
            // pass.  Similarly, <=7.x is actually <8.0.0, etc.
            gtlt = '<';

            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }

          ret = gtlt + M + '.' + m + '.' + p;
        } else if (xm) {
          ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
        } else if (xp) {
          ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
        }

        debug('xRange return', ret);
        return ret;
      });
    } // Because * is AND-ed with everything else in the comparator,
    // and '' means "any version", just remove the *s entirely.


    function replaceStars(comp, options) {
      debug('replaceStars', comp, options); // Looseness is ignored here.  star is always as loose as it gets!

      return comp.trim().replace(re[STAR], '');
    } // This function is passed to string.replace(re[HYPHENRANGE])
    // M, m, patch, prerelease, build
    // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
    // 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
    // 1.2 - 3.4 => >=1.2.0 <3.5.0


    function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = '';
      } else if (isX(fm)) {
        from = '>=' + fM + '.0.0';
      } else if (isX(fp)) {
        from = '>=' + fM + '.' + fm + '.0';
      } else {
        from = '>=' + from;
      }

      if (isX(tM)) {
        to = '';
      } else if (isX(tm)) {
        to = '<' + (+tM + 1) + '.0.0';
      } else if (isX(tp)) {
        to = '<' + tM + '.' + (+tm + 1) + '.0';
      } else if (tpr) {
        to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
      } else {
        to = '<=' + to;
      }

      return (from + ' ' + to).trim();
    } // if ANY of the sets match ALL of its comparators, then pass


    Range.prototype.test = function (version) {
      if (!version) {
        return false;
      }

      if (typeof version === 'string') {
        version = new SemVer(version, this.options);
      }

      for (var i = 0; i < this.set.length; i++) {
        if (testSet(this.set[i], version, this.options)) {
          return true;
        }
      }

      return false;
    };

    function testSet(set, version, options) {
      for (var i = 0; i < set.length; i++) {
        if (!set[i].test(version)) {
          return false;
        }
      }

      if (version.prerelease.length && !options.includePrerelease) {
        // Find the set of versions that are allowed to have prereleases
        // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
        // That should allow `1.2.3-pr.2` to pass.
        // However, `1.2.4-alpha.notready` should NOT be allowed,
        // even though it's within the range set by the comparators.
        for (i = 0; i < set.length; i++) {
          debug(set[i].semver);

          if (set[i].semver === ANY) {
            continue;
          }

          if (set[i].semver.prerelease.length > 0) {
            var allowed = set[i].semver;

            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
              return true;
            }
          }
        } // Version has a -pre, but it's not one of the ones we like.


        return false;
      }

      return true;
    }

    exports.satisfies = satisfies;

    function satisfies(version, range, options) {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }

      return range.test(version);
    }

    exports.maxSatisfying = maxSatisfying;

    function maxSatisfying(versions, range, options) {
      var max = null;
      var maxSV = null;

      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }

      versions.forEach(function (v) {
        if (rangeObj.test(v)) {
          // satisfies(v, range, options)
          if (!max || maxSV.compare(v) === -1) {
            // compare(max, v, true)
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    }

    exports.minSatisfying = minSatisfying;

    function minSatisfying(versions, range, options) {
      var min = null;
      var minSV = null;

      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }

      versions.forEach(function (v) {
        if (rangeObj.test(v)) {
          // satisfies(v, range, options)
          if (!min || minSV.compare(v) === 1) {
            // compare(min, v, true)
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    }

    exports.minVersion = minVersion;

    function minVersion(range, loose) {
      range = new Range(range, loose);
      var minver = new SemVer('0.0.0');

      if (range.test(minver)) {
        return minver;
      }

      minver = new SemVer('0.0.0-0');

      if (range.test(minver)) {
        return minver;
      }

      minver = null;

      for (var i = 0; i < range.set.length; ++i) {
        var comparators = range.set[i];
        comparators.forEach(function (comparator) {
          // Clone to avoid manipulating the comparator's semver object.
          var compver = new SemVer(comparator.semver.version);

          switch (comparator.operator) {
            case '>':
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }

              compver.raw = compver.format();

            /* fallthrough */

            case '':
            case '>=':
              if (!minver || gt(minver, compver)) {
                minver = compver;
              }

              break;

            case '<':
            case '<=':
              /* Ignore maximum versions */
              break;

            /* istanbul ignore next */

            default:
              throw new Error('Unexpected operation: ' + comparator.operator);
          }
        });
      }

      if (minver && range.test(minver)) {
        return minver;
      }

      return null;
    }

    exports.validRange = validRange;

    function validRange(range, options) {
      try {
        // Return '*' instead of '' so that truthiness works.
        // This will throw if it's invalid anyway
        return new Range(range, options).range || '*';
      } catch (er) {
        return null;
      }
    } // Determine if version is less than all the versions possible in the range


    exports.ltr = ltr;

    function ltr(version, range, options) {
      return outside(version, range, '<', options);
    } // Determine if version is greater than all the versions possible in the range.


    exports.gtr = gtr;

    function gtr(version, range, options) {
      return outside(version, range, '>', options);
    }

    exports.outside = outside;

    function outside(version, range, hilo, options) {
      version = new SemVer(version, options);
      range = new Range(range, options);
      var gtfn, ltefn, ltfn, comp, ecomp;

      switch (hilo) {
        case '>':
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = '>';
          ecomp = '>=';
          break;

        case '<':
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = '<';
          ecomp = '<=';
          break;

        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      } // If it satisifes the range it is not outside


      if (satisfies(version, range, options)) {
        return false;
      } // From now on, variable terms are as if we're in "gtr" mode.
      // but note that everything is flipped for the "ltr" function.


      for (var i = 0; i < range.set.length; ++i) {
        var comparators = range.set[i];
        var high = null;
        var low = null;
        comparators.forEach(function (comparator) {
          if (comparator.semver === ANY) {
            comparator = new Comparator('>=0.0.0');
          }

          high = high || comparator;
          low = low || comparator;

          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        }); // If the edge version comparator has a operator then our version
        // isn't outside it

        if (high.operator === comp || high.operator === ecomp) {
          return false;
        } // If the lowest version comparator has an operator and our version
        // is less than it then it isn't higher than the range


        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }

      return true;
    }

    exports.prerelease = prerelease;

    function prerelease(version, options) {
      var parsed = parse(version, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    }

    exports.intersects = intersects;

    function intersects(r1, r2, options) {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2);
    }

    exports.coerce = coerce;

    function coerce(version) {
      if (version instanceof SemVer) {
        return version;
      }

      if (typeof version !== 'string') {
        return null;
      }

      var match = version.match(re[COERCE]);

      if (match == null) {
        return null;
      }

      return parse(match[1] + '.' + (match[2] || '0') + '.' + (match[3] || '0'));
    }
  });
  var semver_1 = semver.SEMVER_SPEC_VERSION;
  var semver_2 = semver.re;
  var semver_3 = semver.src;
  var semver_4 = semver.parse;
  var semver_5 = semver.valid;
  var semver_6 = semver.clean;
  var semver_7 = semver.SemVer;
  var semver_8 = semver.inc;
  var semver_9 = semver.diff;
  var semver_10 = semver.compareIdentifiers;
  var semver_11 = semver.rcompareIdentifiers;
  var semver_12 = semver.major;
  var semver_13 = semver.minor;
  var semver_14 = semver.patch;
  var semver_15 = semver.compare;
  var semver_16 = semver.compareLoose;
  var semver_17 = semver.rcompare;
  var semver_18 = semver.sort;
  var semver_19 = semver.rsort;
  var semver_20 = semver.gt;
  var semver_21 = semver.lt;
  var semver_22 = semver.eq;
  var semver_23 = semver.neq;
  var semver_24 = semver.gte;
  var semver_25 = semver.lte;
  var semver_26 = semver.cmp;
  var semver_27 = semver.Comparator;
  var semver_28 = semver.Range;
  var semver_29 = semver.toComparators;
  var semver_30 = semver.satisfies;
  var semver_31 = semver.maxSatisfying;
  var semver_32 = semver.minSatisfying;
  var semver_33 = semver.minVersion;
  var semver_34 = semver.validRange;
  var semver_35 = semver.ltr;
  var semver_36 = semver.gtr;
  var semver_37 = semver.outside;
  var semver_38 = semver.prerelease;
  var semver_39 = semver.intersects;
  var semver_40 = semver.coerce;
  var MODULE_NAME = 'Ad Utilities';
  var MODULE_VERSION = 'v4.0.6';
  var objectProto = Object.prototype;
  var toString$2 = objectProto.toString;

  var noop = function noop() {};

  var cdnRoot = function cdnRoot() {
    return typeof document !== 'undefined' && document.location !== 'undefined' && document.location.hostname !== 'undefined' && document.location.hostname !== '' ? document.location.hostname.indexOf('cnn.com') >= 0 ? 'cdn.cnn.com' : 'i.cdn.turner.com' : 'i.cdn.turner.com';
  };

  var isFunction = function isFunction(object) {
    return toString$2.call(object) === '[object Function]';
  };

  var IsMobile = isMobile;

  var getUMTOCookies = function getUMTOCookies() {
    var FreewheelNetwork = document.location.pathname.indexOf('/dev/') > 0 || document.location.pathname.indexOf('/qa/') > 0 ? '42448' : '48804';
    logger.log('getting UMTO cookies');
    return (readCookie('bea4') ? '_fw_vcid2=' + FreewheelNetwork + ':' + readCookie('bea4') : readCookie('bea4r') ? '_fw_vcid2=' + FreewheelNetwork + ':' + readCookie('bea4r') : '') + (readCookie('kxuser') ? '&krux_user=' + readCookie('kxuser') : '') + (readCookie('zwmc') ? '&zwmc=' + readCookie('zwmc') : '') + (readCookie('ifyr') ? '&ifyr=' + readCookie('ifyr') : '') + (readCookie('hkgc') ? '&hkgc=' + readCookie('hkgc') : '') + (readCookie('goiz') ? '&goiz=' + readCookie('goiz') : '');
  };

  var isObject = function isObject(object) {
    var type = _typeof_1(object);

    return (type === 'function' || type === 'object') && !!object;
  };

  var getURLParam = function getURLParam(name) {
    if (typeof document === 'undefined') {
      return '';
    }

    var nameParam = name.replace(/[[]/, '\\[').replace(/[\]]/, '\\]');
    var regexS = '[\\?&]' + nameParam + '=([^&#]*)';
    var regex = new RegExp(regexS);

    if (document && document.location && document.location.search) {
      var results = regex.exec(document.location.search);

      if (results) {
        return results[1];
      }

      return '';
    }

    return '';
  };

  var hasCookie = function hasCookie(name) {
    if (typeof window === 'undefined') return false;

    if (document && document.cookie) {
      logger.log('found?', document.cookie.indexOf('; ' + name + '=') >= 0 || document.cookie.indexOf(name + '=') === 0);
      return document.cookie.indexOf('; ' + name + '=') >= 0 || document.cookie.indexOf(name + '=') === 0;
    }

    return false;
  };

  var getViewport = function getViewport() {
    var viewportWidth;
    var viewportHeight;

    if (typeof window !== 'undefined' && window && typeof window.innerWidth !== 'undefined') {
      viewportWidth = window.innerWidth;
      viewportHeight = window.innerHeight;
    } else if (typeof document !== 'undefined' && document && typeof document.documentElement !== 'undefined' && typeof document.documentElement.clientWidth !== 'undefined' && document.documentElement.clientWidth !== 0) {
      viewportWidth = document.documentElement.clientWidth;
      viewportHeight = document.documentElement.clientHeight;
    } else {
      viewportWidth = document.getElementsByTagName('body')[0].clientWidth;
      viewportHeight = document.getElementsByTagName('body')[0].clientHeight;
    }

    return [viewportWidth, viewportHeight];
  };

  var getBrowser = function getBrowser() {
    logger.time('Getting Browser Information');
    var ua = navigator.userAgent;
    var tem;
    var M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];

    if (/trident/i.test(M[1])) {
      tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
      return 'IE ' + (tem[1] || '');
    }

    if (M[1] === 'Chrome') {
      tem = ua.match(/\b(OPR|Edge)\/(\d+)/);

      if (tem !== null) {
        return tem.slice(1).join(' ').replace('OPR', 'Opera');
      }
    }

    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?']; // eslint-disable-next-line

    if ((tem = ua.match(/version\/(\d+)/i)) !== null) M.splice(1, 1, tem[1]);
    logger.timeEnd('Getting Browser Information');
    return M.join(' ');
  };

  var readCookie = function readCookie(name) {
    var readTheCookie = function readTheCookie(key) {
      if (typeof document === 'undefined' || !document.cookie) {
        // there is no cookie, so go no further
        return null;
      } // there is a cookie


      return document.cookie.match(RegExp(key + '=.*?;')) ? document.cookie.match(RegExp(key + '=.*?;'))[0].replace(RegExp(key + '=|;', 'g'), '') : null;
    };

    var lsSupport = false;
    var data = null; // Check for native support

    if (typeof localStorage !== 'undefined') {
      lsSupport = true;
    } // No value supplied, return value


    if (typeof value === 'undefined') {
      // Get value
      if (lsSupport) {
        // Native support
        data = localStorage.getItem(name);
      }

      if (!lsSupport || data === null) {
        // Use cookie
        data = readTheCookie(name);
      }
    }

    return data;
  };

  var emptyTarget = function emptyTarget(value) {
    return isArray$1(value) ? [] : {};
  };

  var deepmerge = function deepmerge(target, source, optionsArgument) {
    var array = isArray$1(source);
    var options = optionsArgument || {
      arrayMerge: combineMerge
    };
    var arrayMerge = options.arrayMerge || combineMerge;

    if (array) {
      return isArray$1(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument);
    } else {
      return mergeObject(target, source, optionsArgument);
    }
  };

  var combineMerge = function combineMerge(target, source, options) {
    var destination = target.slice();
    source.forEach(function (e, i) {
      if (typeof destination[i] === 'undefined') {
        var cloneRequested = clone !== false;
        var shouldClone = cloneRequested && isMergeableObject(e);
        destination[i] = shouldClone ? deepmerge(emptyTarget(e), e, options) : e;
      } else if (isMergeableObject(e)) {
        destination[i] = merge(target[i], e);
      } else if (target.indexOf(e) === -1) {
        destination.push(e);
      }
    });
    return destination;
  };

  var isMergeableObject = function isMergeableObject(val) {
    var nonNullObject = val && _typeof_1(val) === 'object';
    return nonNullObject && Object.prototype.toString.call(val) !== '[object RegExp]' && Object.prototype.toString.call(val) !== '[object Date]';
  };

  var cloneIfNecessary = function cloneIfNecessary(value, optionsArgument) {
    var clone = optionsArgument && optionsArgument.clone === true;
    return clone && isMergeableObject(value) ? deepmerge(emptyTarget(value), value, optionsArgument) : value;
  };

  var mergeObject = function mergeObject(target, source, optionsArgument) {
    var destination = {};

    if (isMergeableObject(target)) {
      keys$1(target).forEach(function (key) {
        destination[key] = cloneIfNecessary(target[key], optionsArgument);
      });
    }

    keys$1(source).forEach(function (key) {
      if (!isMergeableObject(source[key]) || !target[key]) {
        destination[key] = cloneIfNecessary(source[key], optionsArgument);
      } else {
        destination[key] = deepmerge(target[key], source[key], optionsArgument);
      }
    });
    return destination;
  };

  deepmerge.all = function (array, optionsArgument) {
    if (!isArray$1(array) || array.length < 2) {
      throw new Error('first argument should be an array with at least two elements');
    } // we are sure there are at least 2 values, so it is safe to have no initial value


    return array.reduce(function (prev, next) {
      return deepmerge(prev, next, optionsArgument);
    });
  };

  var mergeDeep = function mergeDeep(target, source) {
    return deepmerge(target, source);
  };

  exports.countryCode = readCookie('countryCode') || (readCookie('CG') ? readCookie('CG').substr(0, 2) : '');
  var appId = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwbGF0Zm9ybSI6IndlYiIsInByb2R1Y3QiOiJhZGZ1ZWwiLCJuZXR3b3JrIjoiY25uIiwiYXBwSWQiOiJjbm4tYWRmdWVsLXdlYi14bWQ2dTkifQ.N-lYZh_mvCV2gChDusNhd85B2BD7AiCIcNY2Gr5Rc6c';
  var locationServiceURL = 'https://geo.ngtv.io/locate?appId=' + appId;

  var getLocation = function getLocation() {
    return new promise$1(function (resolve, reject) {
      fetch(locationServiceURL).then(function (resp) {
        resolve(resp.json());
      })["catch"](function (err) {
        reject(new Error("Could not get user location: ".concat(err)));
      });
    });
  };

  var selectedEdition = readCookie('SelectedEdition') ? readCookie('SelectedEdition') : 'www';
  var monetizedSizes = ['160x600', '300x250', '300x600', '320x50', '728x90', '970x90', '970x250'];
  var invalidMappings = ['_ns_', '_nfs_'];
  var invalidAdUnitSegments = [];
  var invalidAdUnits = ['CNN/health', 'CNN/health/healthgrades', 'CNN/health/leaf', 'CNN/health/list', 'CNN/health/photos', 'CNN/health/specials', 'CNN/health/video', 'CNN/student-news'];

  var getLogger = function getLogger(moduleName, moduleVersion, logKey, style, override) {
    var log = noop;
    var info = noop;
    var warn = noop;
    var time = noop;
    var timeEnd = noop;
    var group = noop;
    var groupEnd = noop;
    var error = noop;
    var inGroup = false;
    var tag;
    var styleFinal = style || '';
    var logKeyFinal = logKey || moduleName.toLowerCase();
    var debug = getURLParam('debug').split(',');
    var debugTest = isObject(console) && isFunction(console.log) && (debug[0] === 'true' || debug.indexOf(logKeyFinal.toLowerCase()) >= 0);
    if (override) debugTest = true;

    if (debugTest) {
      log = function log() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (!inGroup) {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.log.apply(console, tag);
        } else {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.log.apply(console, tag);
        }
      };

      info = function info() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        if (!inGroup) {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.info.apply(console, tag);
        } else {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.info.apply(console, tag);
        }
      };

      warn = function warn() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        if (!inGroup) {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.warn.apply(console, tag);
        } else {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.warn.apply(console, tag);
        }
      };

      error = function error() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        if (!inGroup) {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.error.apply(console, tag);
        } else {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.error.apply(console, tag);
        }
      };

      group = function group(groupName) {
        if (!inGroup) {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] - START', styleFinal, groupName];
          inGroup = true;
          console.log.apply(console, tag);
        }
      };

      groupEnd = function groupEnd(groupName) {
        tag = ['%c[' + moduleName + ' ' + moduleVersion + '] - END', styleFinal, groupName];
        inGroup = false;

        try {
          console.log.apply(console, tag);
        } catch (err) {// Do Nothing
        }
      };

      time = function time(timeTag) {
        var timeKey = '[' + moduleName + ' ' + moduleVersion + '] - ' + timeTag;
        group(timeTag);
        addMark(timeKey + '-Start');
        console.time(timeKey);
      };

      timeEnd = function timeEnd(timeTag) {
        var timeKey = '[' + moduleName + ' ' + moduleVersion + '] - ' + timeTag;
        addMark(timeKey + '-End');
        addMeasure(timeKey, timeKey + '-Start', timeKey + '-End');
        groupEnd(timeTag);
        console.timeEnd(timeKey);
      };
    }

    var logger = {
      log: log,
      info: info,
      warn: warn,
      error: error,
      time: time,
      timeEnd: timeEnd,
      group: group,
      groupEnd: groupEnd
    };
    return logger;
  };

  var hostname = '';

  var setHostAndPathNames = function setHostAndPathNames() {
    var parser = typeof document !== 'undefined' ? document.createElement('a') : {
      href: '',
      hostname: '',
      pathname: ''
    };
    parser.href = typeof document !== 'undefined' ? document.location.href : '';
    hostname = parser.hostname;
  };

  var logger = getLogger(MODULE_NAME, MODULE_VERSION, 'utils', 'color: coral; padding: 2px');

  var addEvent = function addEvent(element, event, fn) {
    if (element.addEventListener) {
      element.addEventListener(event, fn, true);
    } else if (element.attachEvent) {
      element.attachEvent('on' + event, fn);
    }
  };

  var bind = function bind(fn, context) {
    for (var _len5 = arguments.length, args = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {
      args[_key5 - 2] = arguments[_key5];
    }

    if (!isFunction(fn)) {
      throw new TypeError('Bind must be called on a function');
    }

    return function bound() {
      return fn.apply(context, args.concat(Array.prototype.slice.call(arguments)));
    };
  };
  /* eslint-disable-next-line */


  var re = /(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()\[\]\.,;:\s@\"]+\.)+[^<>()\[\]\.,;:\s@\"]{2,})/i;

  var piiIsPresentInQueryString = function piiIsPresentInQueryString() {
    if (document.location.search) {
      var dirtyResults = document.location.search.search(re) + 1;
      var cleanResults;

      try {
        cleanResults = decodeURIComponent(document.location.search).search(re) + 1;
      } catch (err) {
        cleanResults = dirtyResults;
      }

      return dirtyResults === 1 || cleanResults === 1;
    }

    return false;
  };

  var piiIsPresentInHash = function piiIsPresentInHash() {
    if (document.location.hash) {
      var dirtyResults = document.location.hash.search(re) + 1;
      var cleanResults;

      try {
        cleanResults = decodeURIComponent(document.location.hash).search(re) + 1;
      } catch (err) {
        cleanResults = dirtyResults;
      }

      return dirtyResults || cleanResults;
    }

    return false;
  };

  var piiIsPresentInReferrer = function piiIsPresentInReferrer() {
    if (document.referrer) {
      var dirtyResults = document.referrer.search(re) + 1;
      var cleanResults;

      try {
        cleanResults = decodeURIComponent(document.location.referrer).search(re) + 1;
      } catch (err) {
        cleanResults = dirtyResults;
      }

      return dirtyResults || cleanResults;
    }

    return false;
  };

  var piiIsPresent = function piiIsPresent() {
    return piiIsPresentInQueryString() || piiIsPresentInHash() || piiIsPresentInReferrer();
  };

  var filterDFPRequest = function filterDFPRequest() {
    if (piiIsPresentInQueryString() || piiIsPresentInHash() || piiIsPresentInReferrer()) {
      if (typeof window !== 'undefined' && window.AdFuel) {
        logger.log('Filtering DFP Request due to PII in query string.');
        var AdFuelMethods = getOwnPropertyNames$1(window.AdFuel);

        for (var x = 0; x < AdFuelMethods.length; x++) {
          window.AdFuel[AdFuelMethods[x]] = function filteredAdFuelMethod() {};
        }

        window.googletag = null;
      }

      return true;
    }

    return false;
  };

  var piiFilter = {
    qs: piiIsPresentInQueryString,
    hash: piiIsPresentInHash,
    ref: piiIsPresentInReferrer,
    isPIIPresent: piiIsPresent,
    filter: filterDFPRequest
  };
  var consentStatus = false;
  var consentChecked = false;
  var gdprApplies = false;

  var getFullConsentState = function getFullConsentState() {
    return window.WM.UserConsent.getConsentState();
  };

  var getConsentVersion = function getConsentVersion() {
    return window.WM.UserConsent.getConsentVersion();
  };

  var getConsentString = function getConsentString() {
    var consentString = '';

    if (hasCookie('eupubconsent')) {
      logger.log('Getting Consent Object from cookie...');
      consentString = readCookie('eupubconsent');
    } else {
      if (typeof window !== 'undefined' && window.__tcfapi && typeof window.__tcfapi === 'function') {
        logger.log('Getting Consent Object from __tcfapi...');

        window.__tcfapi('getTCData', 2, function (tcData, success) {
          if (success) {
            consentString = tcData.tcString;
            return tcData.tcString;
          } else {
            consentString = '';
            return '';
          }
        });
      } else if (typeof window !== 'undefined' && window.__cmp && typeof window.__cmp === 'function') {
        logger.log('Getting Consent Object from __cmp...');

        window.__cmp('getVendorConsents', null, function (result) {
          consentString = result.metadata;
        });
      }
    }

    logger.log('Returning consent string...', consentString);
    return consentString;
  };

  var getConsent = function getConsent() {
    var consentStates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['data-store', 'ads-contextual', 'ads-person-prof', 'ads-person', 'vendor'];
    if (consentChecked) return consentStatus;
    var consentVersion = '1.3.6';

    try {
      consentVersion = window.WM.UserConsent.getVersion();
    } catch (err) {
      logger.warn('Running Older UserConsent - Please Update!');
    }

    logger.log('UserConsent Version: ', consentVersion);
    consentStatus = window.WM ? window.WM.UserConsent.isReady() ? semver.satisfies(consentVersion, '>=2.0.0') ? window.WM.UserConsent.inUserConsentState(consentStates) : window.WM.UserConsent.inUserConsentState(['ads-general', 'ads-vendor']) : true : true;
    logger.log('Consent Granted: ', consentStatus);
    var region = getUserConsentRegion();

    if (region === 'ccpa' && getURLParam('renderStatic') !== '') {
      logger.log('Render Static: ', getURLParam('renderStatic'));
      logger.log('Using override for Static Ad Rendering...');
      consentStatus = false;
    } else {
      logger.log('Not overriding for static rendering...');
    }

    consentChecked = true;
    return consentStatus;
  };

  var getGDPRApplies = function getGDPRApplies() {
    return window.WM.UserConsent.isInGdprRegion();
  };

  var getCCPAApplies = function getCCPAApplies() {
    return window.WM.UserConsent.isInCcpaRegion();
  };

  var getUserConsentRegion = function getUserConsentRegion() {
    return window.WM ? window.WM.UserConsent.getRegion() : '';
  };

  var monetizedSlots = {};

  var isMonetized = function isMonetized(slot) {
    var rktrSlotId = slot.rktr_slot_id;
    logger.group('Checking Monetization for: ' + rktrSlotId);
    var rktrAdId = slot.rktr_ad_id;
    var responsive = slot.responsive;
    var sizes = slot.sizes;

    if (typeof monetizedSlots[rktrSlotId] !== 'undefined') {
      logger.log('Slot already monetized.', monetizedSlots[rktrSlotId]);
      logger.groupEnd('Checking Monetization for: ' + rktrSlotId);
      return monetizedSlots[rktrSlotId];
    }

    var slotId = rktrSlotId;

    if (slotId === 'page') {
      logger.log('Skipping Page-Level Object.');
      logger.groupEnd('Checking Monetization for: ' + rktrSlotId);
      monetizedSlots[slotId] = {
        isMonetized: false,
        filteredSizes: []
      };
      return {
        isMonetized: false,
        filteredSizes: []
      };
    }

    var monetized = true;
    var viewportChecked = false;
    var browser = getViewport();
    var responsiveSizes = [];
    var filteredSizes = [];
    invalidMappings.forEach(function forEachMap(invalidMapping) {
      if (slotId.indexOf(invalidMapping) > 0) {
        logger.log('Slot includes invalid mapping: ', invalidMapping);
        monetizedSlots[slotId] = false;
        monetized = false;
      }
    });
    invalidAdUnitSegments.forEach(function forEachSegment(invalidAdUnitSegment) {
      if (rktrAdId && rktrAdId.indexOf(invalidAdUnitSegment) >= 0) {
        logger.log('Slot contains an invalid Ad Unit segment: ', invalidAdUnitSegment);
        monetized = false;
      }
    });
    invalidAdUnits.forEach(function forEachAdUnit(invalidAdUnit) {
      if (rktrAdId === invalidAdUnit) {
        logger.log('Slot uses an invalid Ad Unit: ', invalidAdUnit);
        monetized = false;
      }
    });

    if (responsive && responsive.length > 0) {
      responsive.map(function (viewport) {
        if (!viewportChecked && _parseInt$2(viewport[0][0], 10) < browser[0] && _parseInt$2(viewport[0][1], 10) < browser[1]) {
          viewportChecked = true;
          logger.log('Checking Responsive Sizes: ', viewport, browser);
          responsiveSizes = viewport[1];

          if (viewport[1][0] === 'suppress' || responsiveSizes === 'suppress') {
            logger.log('Slot is suppressed: ', viewport[1][0], responsiveSizes);
            monetized = false;
          }
        }

        return viewport;
      });
    }

    filteredSizes = monetized && responsiveSizes.length > 0 ? responsiveSizes : sizes;

    if (monetized) {
      filteredSizes = filteredSizes.filter(function sizeFilter(size) {
        var retSize = size;

        if (retSize !== 'suppress') {
          retSize = retSize.join('x');
        }

        return monetizedSizes.indexOf(retSize) !== -1;
      });
    }

    if (filteredSizes.length === 0) {
      logger.log('Slot contains no monetized sizes.', filteredSizes);
      monetizedSlots[slotId] = false;
      monetized = false;
    }

    logger.log('Slot is Monetized: ', monetized);
    logger.groupEnd('Checking Monetization for: ' + rktrSlotId);
    monetizedSlots[slotId] = {
      isMonetized: monetized,
      filteredSizes: filteredSizes
    };
    return {
      isMonetized: monetized,
      filteredSizes: filteredSizes
    };
  };

  var hasOwn = function hasOwn(object, key) {
    return object !== null && Object.prototype.hasOwnProperty.call(object, key);
  };

  var once = function once(fn) {
    return function () {
      if (fn) {
        fn.apply(this, arguments); // eslint-disable-next-line

        fn = null;
      }
    };
  };

  var keyMap = function () {
    var map = {};

    var has = function has(id) {
      return id in map;
    };

    var addKey = function addKey(id, key) {
      if (!has(id)) {
        map[id] = [];
      }

      map[id].push(key);
    };

    var getKeys = function getKeys(id) {
      return has(id) ? Array.prototype.slice.call(map[id]) : [];
    };

    var clearKeys = function clearKeys(id) {
      if (has(id)) {
        map[id].length = 0;
        return true;
      }

      return false;
    };

    return {
      has: has,
      clearKeys: clearKeys,
      getKeys: getKeys,
      addKey: addKey
    };
  }();

  var roundFloat = function roundFloat(value, toNearest, fixed) {
    return (Math.ceil(value / toNearest) * toNearest).toFixed(fixed);
  };

  var generateCacheBuster = function generateCacheBuster() {
    // return_<9-digit-random-hex>
    var cb = '';

    for (var i = 0; i < 10; i++) {
      cb += Math.floor(Math.random() * 9).toString();
    }

    return cb;
  };

  var debounce = function debounce(func, wait, immediate) {
    var timeout;
    return function () {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }

      var context = this;

      var later = function later() {
        timeout = null;
        if (!immediate) func.apply(context, args);
      };

      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) func.apply(context, args);
    };
  };

  var clone = function clone(obj) {
    // Handle the 3 simple types, and null or undefined
    if (obj === null || _typeof_1(obj) !== 'object') return obj; // Handle Date

    if (obj instanceof Date) {
      var copyDate = new Date();
      copyDate.setTime(obj.getTime());
      return copyDate;
    } // Handle Array


    if (obj instanceof Array) {
      var copyArray = [];

      for (var i = 0, len = obj.length; i < len; i++) {
        copyArray[i] = clone(obj[i]);
      }

      return copyArray;
    } // Handle Object


    if (obj instanceof Object) {
      var copyObject = {};
      keys$1(obj).forEach(function (attr) {
        copyObject[attr] = clone(obj[attr]);
      });
      return copyObject;
    }

    throw new Error("Unable to copy obj! Its type isn't supported.");
  };

  var logsSent = false;
  var onCNNE = false;

  var isIntl = function isIntl() {
    var isIntl = false;
    setHostAndPathNames();

    if (getURLParam('isIntl') === 'true') {
      if (!logsSent) {
        logsSent = true;
        logger.log('Faking international site. Using International PubIds.');
      }

      isIntl = true;
    } else if (hostname.search(/^.*(edition|edition-m|arabic)\./) >= 0) {
      if (!logsSent) {
        logsSent = true;
        logger.log('Full international site. Using International PubIds.');
      }

      isIntl = true;
    } else if (exports.countryCode === '' || exports.countryCode === null) {
      if (hostname.search(/^.*(cnnespanol|cnne-test)\./) >= 0) {
        logger.log('Setting isCNNE to `true`');
        onCNNE = true;
        var locationMeta = document && document.querySelectorAll('meta#geo-location-data');

        if (locationMeta && locationMeta.length > 0) {
          if (['US', 'CA'].indexOf(locationMeta[0].dataset.geoCountryCode) >= 0) {
            isIntl = false;
          } else {
            isIntl = true;
          }
        } else {
          if (!logsSent) {
            logsSent = true;
            logger.log('No country code.');
          }
        }
      } else {
        if (!logsSent) {
          logsSent = true;
          logger.log('No country code.');
        }

        isIntl = false;
      }
    } else if (exports.countryCode !== 'US' && exports.countryCode !== 'CA') {
      if (hostname.search(/^.*(money|cnnespanol|cnne-test|\.cnn)\./) >= 0) {
        if (hostname.search(/^.*(money\.cnn)\./) < 0) {
          logger.log('Setting isCNNE to `true`');
          onCNNE = true;
        }

        if (!logsSent) {
          logsSent = true;
          logger.log('International country code. Using International PubIds.');
        }

        isIntl = true;
      } else {
        if (!logsSent) {
          logsSent = true;
          logger.log('International country code but domestic site.');
        }

        isIntl = true;
      }
    } else {
      if (hostname.search(/^.*(cnnespanol|cnne-test)\./) >= 0) {
        if (!logsSent) {
          logger.log('On CNN Espanol... looking for geo-location-data meta tag...');
          logger.log('Setting isCNNE to `true`');
          onCNNE = true;
        }

        locationMeta = document && document.querySelectorAll('meta#geo-location-data');

        if (locationMeta && locationMeta.length > 0) {
          exports.countryCode = locationMeta[0].dataset.geoCountryCode.toUpperCase();

          if (!logsSent) {
            logger.log('Found geo-location-data meta tag with countryCode: ', exports.countryCode);
          }

          if (['US', 'CA'].indexOf(exports.countryCode) >= 0) {
            if (!logsSent) {
              logger.log('Domestic country code. Using Domestic PubIds.');
              logsSent = true;
            }

            isIntl = false;
          } else {
            if (!logsSent) {
              logger.log('International country code. Using International PubIds.');
              logsSent = true;
            }

            isIntl = true;
          }
        } else {
          if (!logsSent) {
            logsSent = true;
            logger.log('No country code. Domestic Site.');
            isIntl = false;
          }
        }
      } else {
        if (!logsSent) {
          logsSent = true;
          logger.log('Domestic site or country code.');
          isIntl = false;
        }
      }
    }

    return isIntl;
  };

  var isCNNE = function isCNNE() {
    isIntl();
    logger.log('Is User on CNN Español? ', onCNNE);
    return onCNNE;
  };

  var setIsCNNE = isCNNE;
  var setIsIntl = isIntl;

  var merge = function merge(source, mods) {
    var dest = {};
    keys$1(source).forEach(function (attrname) {
      dest[attrname] = source[attrname];
    });
    keys$1(mods).forEach(function (attrname) {
      dest[attrname] = mods[attrname];
    });
    return dest;
  };

  var getTrackPerformance = function getTrackPerformance() {
    return new promise$1(function (resolve, reject) {
      if (typeof window !== 'undefined' && !window.CNN || !window.jQuery) {
        reject(new Error('trackPerformance not needed'));
      } else if (typeof window !== 'undefined' && window.CNN.Analytics && window.CNN.Analytics.segment && typeof window.CNN.Analytics.segment.trackPerformance === 'function') {
        resolve();
      } else if (typeof window !== 'undefined' && typeof window.jQuery.fn.onSegmentReady === 'function') {
        window.jQuery(document).onSegmentReady(function _handleSegmentReady() {
          resolve();
        });
      } else {
        reject(new Error('trackPerformance not available'));
      }
    });
  };

  var adfuelEntries = [];

  var queueEntry = function queueEntry(eventName) {
    var entries = typeof window !== 'undefined' ? window.performance.getEntriesByName('[ADFUEL] ' + eventName) : [];

    for (var i = 0; i < entries.length; i++) {
      adfuelEntries.push(entries[i]);
    }
  };

  var addMark = function addMark(name) {
    typeof window !== 'undefined' && window.performance.mark('[ADFUEL] ' + name);
  };

  var addMeasure = function addMeasure(name, start, end) {
    typeof window !== 'undefined' && window.performance.measure('[ADFUEL] ' + name, '[ADFUEL] ' + start, '[ADFUEL] ' + end);
  };

  var getMarks = function getMarks() {
    return typeof window !== 'undefined' ? window.performance.getEntriesByType('mark').filter(function (mark) {
      return mark.name.indexOf('[ADFUEL]');
    }) : [];
  };

  var getMeasures = function getMeasures() {
    return typeof window !== 'undefined' ? window.performance.getEntriesByType('measure').filter(function (mark) {
      return mark.name.indexOf('[ADFUEL]');
    }) : [];
  };

  if (typeof document !== 'undefined') {
    addEvent(document, 'AdFuelCreated', filterDFPRequest);
  }

  var hasUserConsent = typeof window !== 'undefined' && window.WM && window.WM.UserConsent || false;
  var performance = {
    adfuelEntries: adfuelEntries,
    getTrackPerformance: getTrackPerformance,
    mark: addMark,
    measure: addMeasure,
    marks: getMarks,
    measures: getMeasures,
    queueEntry: queueEntry,
    slotDetails: {}
  };

  var loadError = function loadError(oError) {
    throw new URIError("The script ".concat(oError.target.src, " didn't load correctly."));
  };

  var affixScriptToHead = function affixScriptToHead(url) {
    var async = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var onloadFunction = arguments.length > 2 ? arguments[2] : undefined;
    var onerrorFunction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : loadError;
    var newScript = document.createElement('script');
    newScript.async = async;
    newScript.onerror = onerrorFunction;

    if (onloadFunction) {
      newScript.onload = onloadFunction;
    }

    var targetNode = document.getElementsByTagName('head')[0];
    targetNode.insertBefore(newScript, targetNode.firstChild);
    newScript.src = url;
  };

  var hasVideo = function hasVideo() {
    var videoElement = document.getElementsByTagName('video');

    if (videoElement.length) {
      return true;
    } else {
      return false;
    }
  };

  var AdFuelUtils = {
    addEvent: addEvent,
    affixScriptToHead: affixScriptToHead,
    bind: bind,
    cdnRoot: cdnRoot,
    clone: clone,
    countryCode: exports.countryCode,
    debounce: debounce,
    gdprApplies: gdprApplies,
    getFullConsentState: getFullConsentState,
    getConsentVersion: getConsentVersion,
    getConsentString: getConsentString,
    getConsent: getConsent,
    getGDPRApplies: getGDPRApplies,
    getCCPAApplies: getCCPAApplies,
    getUserConsentRegion: getUserConsentRegion,
    getLocation: getLocation,
    generateCacheBuster: generateCacheBuster,
    getBrowser: getBrowser,
    getLogger: getLogger,
    getUMTOCookies: getUMTOCookies,
    getURLParam: getURLParam,
    getViewport: getViewport,
    hasCookie: hasCookie,
    hasOwn: hasOwn,
    hasUserConsent: hasUserConsent,
    hasVideo: hasVideo,
    isCNNE: isCNNE,
    isFunction: isFunction,
    isIntl: isIntl,
    isMobile: isMobile,
    isMonetized: isMonetized,
    isObject: isObject,
    keyMap: keyMap,
    merge: merge,
    mergeDeep: mergeDeep,
    noop: noop,
    once: once,
    performance: performance,
    piiFilter: piiFilter,
    readCookie: readCookie,
    roundFloat: roundFloat,
    selectedEdition: selectedEdition,
    setHostAndPathNames: setHostAndPathNames,
    setIsIntl: isIntl,
    __VERSION__: MODULE_VERSION
  };
  window.AdFuelUtils = AdFuelUtils;
  exports.AdFuelUtils = AdFuelUtils;
  exports.IsMobile = IsMobile;
  exports.addEvent = addEvent;
  exports.affixScriptToHead = affixScriptToHead;
  exports.cdnRoot = cdnRoot;
  exports.generateCacheBuster = generateCacheBuster;
  exports.getBrowser = getBrowser;
  exports.getConsent = getConsent;
  exports.getConsentString = getConsentString;
  exports.getLogger = getLogger;
  exports.getURLParam = getURLParam;
  exports.getUserConsentRegion = getUserConsentRegion;
  exports.getViewport = getViewport;
  exports.hasCookie = hasCookie;
  exports.hasVideo = hasVideo;
  exports.isCNNE = isCNNE;
  exports.isIntl = isIntl;
  exports.isMonetized = isMonetized;
  exports.mergeDeep = mergeDeep;
  exports.performance = performance;
  exports.piiFilter = piiFilter;
  exports.readCookie = readCookie;
  exports.setHostAndPathNames = setHostAndPathNames;
  exports.setIsCNNE = setIsCNNE;
  exports.setIsIntl = setIsIntl;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
}); ////////////////////////////////////////////
// SITE OPTIONS
////////////////////////////////////////////


(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof3(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.AdFuelOptions = factory());
})(void 0, function () {
  'use strict';

  return {
    "ADFUEL": {
      "AUTO_DISPATCH": true,
      "DEFAULT_TIMEOUT": 800,
      "DEFAULT_DESKTOP_TIMEOUT": 800,
      "DEFAULT_MOBILE_TIMEOUT": 800,
      "IFRAME_TITLE": "advertisement",
      "NETWORK_ID": "8663477",
      "REFRESH_ON_FOCUS_ONLY": false,
      "LAZY_LOAD_FETCH_PERCENT": 500,
      "LAZY_LOAD_RENDER_PERCENT": 200,
      "LAZY_LOAD_MOBILE_SCALING": 2,
      "COLLAPSE_EMPTY_DIVS": true,
      "DEBUG": false,
      "SITE_OBJECT": "NBA"
    },
    "A9": {
      "ACCOUNT_IDS": {
        "DOM": "3159",
        "INTL": "3288"
      },
      "DEBUG": false,
      "TIMEOUTS": {
        "DESKTOP": {
          "DISPLAY": {
            "INITIAL": 1150,
            "REFRESH": 1150
          },
          "VIDEO": {
            "INITIAL": 500,
            "REFRESH": 750,
            "MIDROLL": 750
          }
        },
        "MOBILE": {
          "DISPLAY": {
            "INITIAL": 750,
            "REFRESH": 750
          },
          "VIDEO": {
            "INITIAL": 500,
            "REFRESH": 750,
            "MIDROLL": 750
          }
        }
      },
      "SLOTNAMES": {
        "PREROLL": "aps-preroll",
        "MIDROLL": "aps-midroll",
        "PREPEND_ADUNIT": false
      }
    },
    "BEEMRAY": {
      "API_KEY": "",
      "CUSTOMER_ID": "",
      "DEBUG": false
    },
    "BLOCKTHROUGH": {
      "DEBUG": false
    },
    "CEP": {
      "DEBUG": false
    },
    "CONSOLE_TOOL": {
      "DEBUG": false,
      "HOTKEY": ["Control", "Shift", "Z"]
    },
    "CREATIVE_REVIEW": {
      "DEBUG": false,
      "HOTKEY": "^ d o h $"
    },
    "CRITEO": {
      "DEBUG": false,
      "DESKTOP_TIMEOUT": 750,
      "DESKTOP_ZONES": {
        "320x50": 1083217,
        "728x90": 1083216,
        "970x90": 1083218,
        "300x250": 1083215
      },
      "MOBILE_TIMEOUT": 750,
      "MOBILE_ZONES": {
        "300x250": 1090830,
        "320x50": 1090884
      },
      "MULTISIZE_FIRST": "F",
      "MULTISIZE_LARGEST": "L",
      "MULTISIZE_ALL": "A",
      "MULTISIZE_METHOD": "L",
      "TIMEOUT": 750
    },
    "FASTLANE": {
      "DEBUG": false,
      "DESKTOP_TIMEOUT": 750,
      "DOM_ACCOUNT_ID": 11078,
      "INTL_ACCOUNT_ID": 11016,
      "MOBILE_TIMEOUT": 750,
      "TIMEOUT": 750
    },
    "GUID": {
      "DEBUG": false
    },
    "IAS": {
      "ACCOUNT_IDS": {
        "DOM": 925660,
        "INTL": 925660
      },
      "DEBUG": false
    },
    "IX": {
      "DEBUG": false,
      "SCRIPT_KEY": {
        "DOM": "186948-120271757110262",
        "INTL": "186948-120271757110262"
      },
      "IDENTITY": "186948-78534564703284"
    },
    "IVR": {
      "DEBUG": false,
      "DEFAULT_DISPLAY_MILLISECONDS": 35000,
      "DEFAULT_DISPLAY_PERCENT": 50
    },
    "KRUX": {
      "DEBUG": false,
      "DOM_CONTROLTAG": "ITcATbN4",
      "INTL_CONTROLTAG": "ITcATbN4",
      "SEND_VALUES_TO_ZION": false
    },
    "MALVERTISING": {
      "DEBUG": false,
      "SITE_VENDOR": "CleanIO",
      "SCRIPT_SRC": "//d2wt7w75gg2vz.cloudfront.net/script.js"
    },
    "PREBID": {
      "BIDDERS": {
        "CLIENT": {
          "DOM": ["appnexus", "rubicon", "criteo", "ix", "trustx"],
          "INTL": []
        },
        "NATIVE": {
          "DOM": [],
          "INTL": []
        },
        "S2S": {
          "DOM": [],
          "INTL": []
        }
      },
      "APPROVED_BIDDERS": {
        "CLIENT": {
          "DOM": ["appnexus", "rubicon", "criteo", "ix", "trustx"],
          "INTL": ["appnexus", "pangaea", "ix", "rubicon", "sharethrough", "criteo"]
        },
        "NATIVE": {
          "DOM": ["appnexus"],
          "INTL": ["appnexus", "pangaea"]
        },
        "S2S": {
          "DOM": ["ix"],
          "INTL": ["pangaea", "sharethrough", "ix"]
        }
      },
      "DEBUG": false,
      "TIMEOUTS": {
        "DISPLAY": {
          "DESKTOP": 1150,
          "MOBILE": 750
        },
        "VIDEO": {
          "DEFAULT": 500,
          "MIDROLL": 750,
          "REFRESH": 1000
        }
      },
      "VENDOR": {
        "APPNEXUS": {
          "ACCOUNT_ID": {
            "DOM": "7745",
            "INTL": "8353"
          }
        },
        "CRITEO": {
          "ACCOUNT_ID": {
            "DOM": 4157,
            "INTL": 9264
          }
        },
        "PANGAEA": {
          "ACCOUNT_ID": {
            "DOM": 0,
            "INTL": "8613"
          }
        },
        "RUBICON": {
          "ACCOUNT_ID": {
            "DOM": "11078",
            "INTL": "11016"
          },
          "SITE_ID": {
            "DOM": {
              "DESKTOP": 27048,
              "MOBILE": 67294
            },
            "INTL": {
              "DESKTOP": 27048,
              "MOBILE": 67294
            }
          },
          "ZONE_MAPPING": {
            "DOM": {
              "DESKTOP": {
                "HP": {
                  "atf": 107850,
                  "btf": 189024
                },
                "ROS": {
                  "atf": 107852,
                  "btf": 107854
                }
              },
              "MOBILE": {
                "HP": {
                  "atf": 317488,
                  "btf": 317488
                },
                "ROS": {
                  "atf": 317488,
                  "btf": 317488
                }
              }
            },
            "INTL": {
              "DESKTOP": {
                "HP": {
                  "atf": 107850,
                  "btf": 189024
                },
                "ROS": {
                  "atf": 107852,
                  "btf": 107854
                }
              },
              "MOBILE": {
                "HP": {
                  "atf": 317488,
                  "btf": 317488
                },
                "ROS": {
                  "atf": 317488,
                  "btf": 317488
                }
              }
            }
          }
        },
        "IX": {
          "IDENTITY": "",
          "SITE_ID": {
            "DOM": {
              "DESKTOP": {
                "atf": {
                  "728x90": "346983",
                  "320x50": "346983",
                  "970x90": "346983",
                  "300x250": "346987"
                },
                "btf": {
                  "300x250": "346988",
                  "728x90": "346983",
                  "320x50": "346983",
                  "970x90": "346983"
                }
              },
              "MOBILE": {
                "atf": {
                  "320x50": "346989",
                  "300x250": "346991"
                },
                "btf": {
                  "300x250": "346992",
                  "320x50": "346990"
                }
              }
            },
            "INTL": {
              "DESKTOP": {
                "atf": {},
                "btf": {}
              },
              "MOBILE": {
                "atf": {},
                "btf": {}
              }
            }
          }
        },
        "OPENX": {
          "UNIT_MAPPING": {
            "DOM": {
              "DESKTOP": {
                "300x250": "540601560",
                "300x600": "540601644",
                "728x90": "540601583",
                "970x90": "540601583"
              },
              "MOBILE": {
                "320x50": "540601588",
                "300x250": "540601590"
              }
            },
            "INTL": {
              "DESKTOP": {},
              "MOBILE": {}
            }
          }
        },
        "SHARETHROUGH": {
          "UNIT_MAPPING": {
            "DOM": {
              "DESKTOP": {},
              "MOBILE": {}
            },
            "INTL": {
              "DESKTOP": {},
              "MOBILE": {}
            }
          }
        },
        "TRUSTX": {
          "UID": {
            "DOM": {
              "DESKTOP": {
                "atf": {
                  "300x250": 14829,
                  "970x250": 14832,
                  "970x90": 14833,
                  "728x90": 14834,
                  "320x50": 14835
                },
                "btf": {
                  "300x250": 14829,
                  "970x250": 14832,
                  "970x90": 14833,
                  "728x90": 14834,
                  "320x50": 14835
                }
              },
              "MOBILE": {
                "atf": {
                  "320x50": 14830,
                  "300x250": 14831
                },
                "btf": {
                  "320x50": 14830,
                  "300x250": 14831
                }
              }
            },
            "INTL": {
              "DESKTOP": {
                "atf": {},
                "btf": {}
              },
              "MOBILE": {
                "atf": {},
                "btf": {}
              }
            }
          }
        }
      },
      "SEND_ALL_BIDS": {
        "DOM": true,
        "INTL": true
      }
    },
    "PROXIMIC": {
      "DEBUG": false
    },
    "SOURCEPOINT": {
      "DEBUG": false
    },
    "SSAI": {
      "DEBUG": false,
      "SITE_VENDORS": [],
      "VENDORS": {
        "AppNexus": {
          "URL": "https://ib.adnxs.com/getuid?https://umto.{{domain}}/user-sync?zwmc=$UID&domain={{domain}}",
          "COOKIE_NAME": "zwmc"
        },
        "Freewheel": {
          "URL": "https://bea4.v.fwmrm.net/ad/u?mode=echo&cr=https://umto.{{domain}}/user-sync?bea4=#{user.id}&domain={{domain}}",
          "COOKIE_NAME": "bea4"
        },
        "Rubicon": {
          "URL": "https://pixel-us-east.rubiconproject.com/exchange/sync.php?p={{brand}}",
          "COOKIE_NAME": "ifyr"
        },
        "SpotX": {
          "URL": "https://sync.search.spotxchange.com/audience_id",
          "COOKIE_NAME": "hkgc"
        },
        "Telaria": {
          "URL": "https://eq97f.publishers.tremorhub.com/pubsync?redir=https://umto.{{domain}}/user-sync?goiz=%5Btvid%5D&domain={{domain}}",
          "COOKIE_NAME": "goiz"
        }
      }
    },
    "TRANSACTION_ID": {
      "DEBUG": false
    },
    "USER_CONSENT": {
      "ENABLED": true,
      "DEBUG": false,
      "COOKIE_DOMAIN": ".nba.com",
      "ONETRUST_GUID": "7992f959-c30b-4bc2-a2b7-50dbd02eb075-test",
      "ONETRUST_SRC": "//otcc-demo.otprivacy.com/scripttemplates/otSDKStub.js"
    },
    "VERSION": 1.2,
    "NAME": "nba"
  };
}); ////////////////////////////////////////////
// AB IndexExchange Identity for 2.0
////////////////////////////////////////////


(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof4(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.IndexExchangeIdentity = factory());
})(void 0, function () {
  'use strict';

  var MODULE_NAME = 'Index Exchange Identity';
  var MODULE_VERSION = '1.1.1';
  var getConsent = window.AdFuelUtils.getConsent;
  var getUserConsentRegion = window.AdFuelUtils.getUserConsentRegion;
  var logger;
  var initEventSet;
  var scriptAdded = false;

  var includeIndexIdentityWrapper = function includeIndexIdentityWrapper(key) {
    var consentRegion = getUserConsentRegion();

    if (consentRegion === 'ccpa') {
      logger.log('Checking User Consent...');
      var consentStatus = getConsent();
      logger.log('User Consent Granted: ', consentStatus);

      if (consentStatus && !scriptAdded) {
        /* eslint-disable */
        !function () {
          function e(t, r, n) {
            function i(s, a) {
              if (!r[s]) {
                if (!t[s]) {
                  var u = "function" == typeof require && require;
                  if (!a && u) return u(s, !0);
                  if (o) return o(s, !0);
                  var c = new Error("Cannot find module '" + s + "'");
                  throw c.code = "MODULE_NOT_FOUND", c;
                }

                var f = r[s] = {
                  exports: {}
                };
                t[s][0].call(f.exports, function (e) {
                  return i(t[s][1][e] || e);
                }, f, f.exports, e, t, r, n);
              }

              return r[s].exports;
            }

            for (var o = "function" == typeof require && require, s = 0; s < n.length; s++) {
              i(n[s]);
            }

            return i;
          }

          return e;
        }()({
          1: [function (e, t, r) {
            function n(e) {
              function t(e, t) {
                return m[e] = E.IN_PROGRESS, new u(function (r) {
                  t.instance.retrieve().then(function () {
                    m[e] = E.COMPLETE, r();
                  })["catch"](function (t) {
                    m[e] = E.COMPLETE, r();
                  });
                });
              }

              function r() {
                for (var e = [], r = u.defer(), n = Object.keys(g); n.length;) {
                  var o = f.randomSplice(n),
                      s = g[o];
                  if (s.enabled) try {
                    e.push(t(o, s));
                  } catch (e) {}
                }

                return u.all(e).then(function () {
                  i.emit("rti_partner_request_complete", {
                    requestsCompleted: e.length
                  }), r.resolve();
                }), r;
              }

              function n() {
                for (var e in m) {
                  m.hasOwnProperty(e) && m[e] !== E.COMPLETE && i.emit("hs_identity_timeout", {
                    statsId: g[e].instance.getStatsId()
                  });
                }
              }

              function p() {
                var e = {};
                b || (b = !0, n());

                for (var t in g) {
                  if (g.hasOwnProperty(t)) {
                    var r = g[t];

                    if (r.enabled) {
                      var i = r.instance.getResults();
                      m[t] === E.COMPLETE ? (e[t] = i ? {
                        data: i
                      } : {
                        data: {}
                      }, e[t].responsePending = !1) : e[t] = {
                        data: {},
                        responsePending: !0
                      };
                    }
                  }
                }

                return e;
              }

              function v() {
                y === E.NOT_STARTED && (_ = r(), y = E.IN_PROGRESS);
              }

              var h,
                  g,
                  y,
                  m,
                  _,
                  E = {
                NOT_STARTED: 0,
                IN_PROGRESS: 1,
                COMPLETE: 2
              },
                  b = !1;

              return function () {
                i = c.services.EventsService, o = c.services.TimerService, h = a(), y = E.NOT_STARTED, m = {}, g = e.partners;

                for (var t = Object.keys(g), n = t.length - 1; n >= 0; n--) {
                  var s = f.randomSplice(t),
                      u = g[s];
                  if (u.enabled) try {
                    var _ = d[s];

                    if (f.isObject(_) ? u.instance = l(_, u.configs) : u.instance = _(u.configs), !u.instance) {
                      u.enabled = !1;
                      continue;
                    }

                    m[s] = E.NOT_STARTED;
                  } catch (e) {
                    u.enabled = !1;
                  }
                }

                h._setDirectInterface("IdentityLayer", {
                  retrieve: v,
                  getAllPartnerResults: p,
                  invokeAllPartners: r
                });
              }(), s.derive(h, {
                retrieve: v
              });
            }

            var i,
                o,
                s = e(5),
                a = e(2),
                u = e(10),
                c = e(29),
                f = e(14),
                l = e(19),
                d = {
              AdserverOrgIp: e(18),
              LiveRampIp: e(20),
              MerkleIp: e(21)
            };
            t.exports = n;
          }, {}],
          2: [function (e, t, r) {
            function n() {
              function e(e, t) {
                return i.resolve(t);
              }

              function t(e, t) {
                u = {}, u[e] = t;
              }

              function r(e) {
                c = e;
              }

              function n() {
                return u;
              }

              function o(e) {
                f = e;
              }

              function s(e, t) {
                return f(e, t);
              }

              function a(e, t) {
                return i.resolve().then(function () {
                  return c(e, t);
                });
              }

              var u, c, f;
              return function () {
                u = null, c = e, f = e;
              }(), {
                _setDirectInterface: t,
                _setExecutor: r,
                _executeNext: s,
                setNext: o,
                getDirectInterface: n,
                execute: a
              };
            }

            var i = e(10);
            e(15);
            t.exports = n;
          }, {}],
          3: [function (e, t, r) {
            e(15);

            t.exports = function () {
              function e(e, t) {
                return e = e || "http:", t = t || "https:", "https:" === document.location.protocol ? t : e;
              }

              function t() {
                return ("CSS1Compat" === m.document.compatMode ? m.document.documentElement : m.document.body).clientWidth;
              }

              function r() {
                return ("CSS1Compat" === m.document.compatMode ? m.document.documentElement : m.document.body).clientHeight;
              }

              function n() {
                return m.screen.width;
              }

              function i() {
                return m.screen.height;
              }

              function o() {
                return document.referrer;
              }

              function s() {
                return m.location.hostname;
              }

              function a() {
                return navigator.userAgent;
              }

              function u() {
                return navigator.language || navigator.browserLanguage || navigator.userLanguage || navigator.systemLanguage;
              }

              function c() {
                return m.location.pathname;
              }

              function f() {
                try {
                  return window.top === window.self;
                } catch (e) {
                  return !1;
                }
              }

              function l() {
                return f() ? location.href : document.referrer || location.href;
              }

              function d() {
                try {
                  return localStorage.setItem("test", "test"), localStorage.removeItem("test"), !0;
                } catch (e) {
                  return !1;
                }
              }

              function p(e, t, r, n) {
                try {
                  for (var i, o = window, s = 0;;) {
                    if (!(r && s < r)) {
                      if (n && s > n) break;
                      if (e && (i = e(o))) return i;
                      var a;

                      try {
                        a = o.frameElement;
                      } catch (e) {
                        a = null;
                      }

                      if (null === a) {
                        if (t && (i = t(o))) return i;
                        break;
                      }

                      o = o.parent, s++;
                    }
                  }
                } catch (e) {}

                return null;
              }

              function v(e) {
                return p(function (t) {
                  return t.hasOwnProperty(e) ? t[e] : null;
                });
              }

              function h(e, t) {
                var r = t || m,
                    n = r.document.createElement("iframe");
                return e && (n.src = e), n.width = 0, n.height = 0, n.scrolling = "no", n.marginWidth = 0, n.marginHeight = 0, n.frameBorder = 0, n.setAttribute("style", "border: 0px; vertical-align: bottom; visibility: hidden; display: none;"), r.document.body.appendChild(n), n;
              }

              function g(e) {
                var t = e + "=",
                    r = m.document.cookie.split(";");

                for (var n in r) {
                  if (r.hasOwnProperty(n)) {
                    for (var i = r[n]; " " === i.charAt(0);) {
                      i = i.substring(1, i.length);
                    }

                    if (0 === i.indexOf(t)) return i.substring(t.length, i.length);
                  }
                }

                return null;
              }

              function y() {
                var e = !1;

                try {
                  new window.ActiveXObject("ShockwaveFlash.ShockwaveFlash") && (e = !0);
                } catch (t) {
                  navigator.mimeTypes && void 0 !== navigator.mimeTypes["application/x-shockwave-flash"] && navigator.mimeTypes["application/x-shockwave-flash"].enabledPlugin && (e = !0);
                }

                return e;
              }

              var m;
              return function () {
                m = p(null, function (e) {
                  return e;
                });
              }(), {
                topWindow: m,
                getProtocol: e,
                isLocalStorageSupported: d,
                getViewportWidth: t,
                getViewportHeight: r,
                isTopFrame: f,
                getScreenWidth: n,
                getScreenHeight: i,
                getReferrer: o,
                getPageUrl: l,
                getHostname: s,
                getUserAgent: a,
                getLanguage: u,
                getPathname: c,
                getNearestEntity: v,
                traverseContextTree: p,
                createHiddenIFrame: h,
                readCookie: g,
                isFlashSupported: y
              };
            }();
          }, {}],
          4: [function (e, t, r) {
            var n = e(3),
                i = e(14),
                o = e(13);

            t.exports = function () {
              function e(e) {
                if (!a) return !1;

                try {
                  localStorage.removeItem(u + e);
                } catch (e) {
                  return !1;
                }

                return !0;
              }

              function t(t) {
                if (!a) return null;
                var r;

                try {
                  r = JSON.parse(localStorage.getItem(u + t));
                } catch (e) {
                  return null;
                }

                return null === r ? null : !r.e || r.e < o.now() ? (e(t), null) : i.isObject(r.d) ? {
                  data: r.d,
                  created: r.t,
                  expires: r.e
                } : null;
              }

              function r(e) {
                var r = t(e);
                return r && r.data;
              }

              function s(e, t, r) {
                if (!a) return !1;
                r > c && (r = c);
                var n = o.now(),
                    i = {
                  t: n,
                  d: t,
                  e: n + r
                };

                try {
                  localStorage.setItem(u + e, JSON.stringify(i));
                } catch (e) {
                  return !1;
                }

                return !0;
              }

              var a,
                  u = "IXWRAPPER",
                  c = 6048e5;
              return function () {
                a = n.isLocalStorageSupported();
              }(), {
                deleteData: e,
                getEntry: t,
                getData: r,
                setData: s
              };
            }();
          }, {}],
          5: [function (e, t, r) {
            e(15);

            t.exports = function () {
              function e(e) {
                for (var t in e) {
                  e.hasOwnProperty(t) && "_" === t[0] && "__" !== t.slice(0, 2) && delete e[t];
                }

                return e;
              }

              function t(t, r) {
                var n,
                    i = {};

                for (n in t) {
                  t.hasOwnProperty(n) && (i[n] = t[n]);
                }

                for (n in r) {
                  r.hasOwnProperty(n) && (i[n] = r[n]);
                }

                return e(i);
              }

              return {
                derive: t
              };
            }();
          }, {}],
          6: [function (e, t, r) {
            function n(e) {
              function t(e) {
                if (i.isFunction(e)) try {
                  e();
                } catch (e) {}
              }

              return function () {
                if (i.isArray(e)) for (var t = 0; t < e.length; t++) {
                  try {
                    e[t]();
                  } catch (e) {}
                }
              }(), {
                push: t
              };
            }

            var i = e(14);
            t.exports = n;
          }, {}],
          7: [function (e, t, r) {
            var n = {
              DEFAULT_UID_LENGTH: 8,
              MIN_BANNER_DIMENSION: 1,
              MIN_BID_FLOOR: 0,
              MIN_SITE_ID: 0,
              DEFAULT_UID_CHARSET: "ALPHANUM",
              SESSION_ID_LENGTH: 8,
              PUBKIT_AD_ID_LENGTH: 16,
              RENDER_SERVICE_EXPIRY_SWEEP_TIMER: 3e4,
              DEFAULT_PARTNER_PRIORITY: 1,
              LineItemTypes: {
                ID_AND_SIZE: 1,
                ID_AND_PRICE: 2,
                CUSTOM: 3
              },
              DeviceTypeMethods: {
                USER_AGENT: 1,
                REFERENCE: 2,
                SIZE_MAPPING: 3
              },
              RequestArchitectures: {
                MRA: 1,
                SRA: 2
              },
              InitialLoadStates: {
                DISABLED: 1,
                ENABLED: 2
              },
              MediationLevels: {
                NONE: 1,
                HT_SLOT: 2,
                PARTNER: 3
              }
            };
            t.exports = n;
          }, {}],
          8: [function (e, t, r) {
            function n(e) {
              function t() {
                return a.mobile() ? n.DeviceTypes.MOBILE : (a.tablet(), n.DeviceTypes.DESKTOP);
              }

              function r() {
                var t;

                try {
                  t = eval(e.configs.reference);
                } catch (e) {
                  throw s("INTERNAL_ERROR", "DeviceTypeChecker: could not eval() `reference`.");
                }

                if (!o.isFunction(t)) {
                  if (o.isString(t)) return t;
                  throw s("INVALID_TYPE", "DeviceTypeChecker: `reference` must refer to a function or a string");
                }

                try {
                  return t();
                } catch (e) {
                  throw s("INTERNAL_ERROR", "DeviceTypeChecker: could not execute `reference` function.");
                }
              }

              function u() {
                switch (c) {
                  case i.DeviceTypeMethods.USER_AGENT:
                    return t();

                  case i.DeviceTypeMethods.REFERENCE:
                    return r();

                  default:
                    return t();
                }
              }

              var c;
              return function () {
                c = i.DeviceTypeMethods[e.method] || i.DeviceTypeMethods.USER_AGENT;
              }(), {
                getDeviceType: u
              };
            }

            var i = e(7),
                o = e(14),
                s = e(15),
                a = e(9);
            n.isValidDeviceType = function (e) {
              for (var t in n.DeviceTypes) {
                if (n.DeviceTypes.hasOwnProperty(t) && "TABLET" !== t && e === n.DeviceTypes[t]) return !0;
              }

              return !1;
            }, n.DeviceTypes = {
              DESKTOP: "desktop",
              MOBILE: "mobile",
              TABLET: "tablet"
            }, t.exports = n;
          }, {}],
          9: [function (e, t, r) {
            var n, i, o;
            n = {}, o = window.navigator.userAgent.toLowerCase(), n.ios = function () {
              return n.iphone() || n.ipod() || n.ipad();
            }, n.iphone = function () {
              return !n.windows() && i("iphone");
            }, n.ipod = function () {
              return i("ipod");
            }, n.ipad = function () {
              return i("ipad");
            }, n.android = function () {
              return !n.windows() && i("android");
            }, n.androidPhone = function () {
              return n.android() && i("mobile");
            }, n.androidTablet = function () {
              return n.android() && !i("mobile");
            }, n.blackberry = function () {
              return i("blackberry") || i("bb10") || i("rim");
            }, n.blackberryPhone = function () {
              return n.blackberry() && !i("tablet");
            }, n.blackberryTablet = function () {
              return n.blackberry() && i("tablet");
            }, n.windows = function () {
              return i("windows");
            }, n.windowsPhone = function () {
              return n.windows() && i("phone");
            }, n.windowsTablet = function () {
              return n.windows() && i("touch") && !n.windowsPhone();
            }, n.fxos = function () {
              return (i("(mobile;") || i("(tablet;")) && i("; rv:");
            }, n.fxosPhone = function () {
              return n.fxos() && i("mobile");
            }, n.fxosTablet = function () {
              return n.fxos() && i("tablet");
            }, n.meego = function () {
              return i("meego");
            }, n.mobile = function () {
              return n.androidPhone() || n.iphone() || n.ipod() || n.windowsPhone() || n.blackberryPhone() || n.fxosPhone() || n.meego();
            }, n.tablet = function () {
              return n.ipad() || n.androidTablet() || n.blackberryTablet() || n.windowsTablet() || n.fxosTablet();
            }, n.desktop = function () {
              return !n.tablet() && !n.mobile();
            }, i = function i(e) {
              return -1 !== o.indexOf(e);
            }, t.exports = n;
          }, {}],
          10: [function (e, t, r) {
            function n() {}

            function i(e) {
              if ("object" != _typeof4(this)) throw new TypeError("Promises must be constructed via new");
              if ("function" != typeof e) throw new TypeError("not a function");
              this._state = 0, this._handled = !1, this._value = void 0, this._deferreds = [], f(e, this);
            }

            function o(e, t) {
              for (; 3 === e._state;) {
                e = e._value;
              }

              if (0 === e._state) return void e._deferreds.push(t);
              e._handled = !0;
              var r = 1 === e._state ? t.onFulfilled : t.onRejected;
              if (null === r) return void (1 === e._state ? s : a)(t.promise, e._value);
              var n;

              try {
                n = r(e._value);
              } catch (e) {
                return void a(t.promise, e);
              }

              s(t.promise, n);
            }

            function s(e, t) {
              try {
                if (t === e) throw new TypeError("A promise cannot be resolved with itself.");

                if (t && ("object" == _typeof4(t) || "function" == typeof t)) {
                  var r = t.then;
                  if (t instanceof i) return e._state = 3, e._value = t, void u(e);
                  if ("function" == typeof r) return void f(bind(r, t), e);
                }

                e._state = 1, e._value = t, u(e);
              } catch (t) {
                a(e, t);
              }
            }

            function a(e, t) {
              e._state = 2, e._value = t, u(e);
            }

            function u(e) {
              for (var t = 0, r = e._deferreds.length; t < r; t++) {
                o(e, e._deferreds[t]);
              }

              e._deferreds = null;
            }

            function c(e, t, r) {
              this.onFulfilled = "function" == typeof e ? e : null, this.onRejected = "function" == typeof t ? t : null, this.promise = r;
            }

            function f(e, t) {
              var r = !1;

              try {
                e(function (e) {
                  r || (r = !0, s(t, e));
                }, function (e) {
                  r || (r = !0, a(t, e));
                });
              } catch (e) {
                if (r) return;
                r = !0, a(t, e);
              }
            }

            i.prototype["catch"] = function (e) {
              return this.then(null, e);
            }, i.prototype.then = function (e, t) {
              var r = new this.constructor(n);
              return o(this, new c(e, t, r)), r;
            }, i.all = function (e) {
              var t = Array.prototype.slice.call(e);
              return new i(function (e, r) {
                function n(o, s) {
                  try {
                    if (s && ("object" == _typeof4(s) || "function" == typeof s)) {
                      var a = s.then;
                      if ("function" == typeof a) return void a.call(s, function (e) {
                        n(o, e);
                      }, r);
                    }

                    t[o] = s, 0 == --i && e(t);
                  } catch (e) {
                    r(e);
                  }
                }

                if (0 === t.length) return e([]);

                for (var i = t.length, o = 0; o < t.length; o++) {
                  n(o, t[o]);
                }
              });
            }, i.resolve = function (e) {
              return e && "object" == _typeof4(e) && e.constructor === i ? e : new i(function (t) {
                t(e);
              });
            }, i.reject = function (e) {
              return new i(function (t, r) {
                r(e);
              });
            }, i.defer = function () {
              var e = {};
              return e.promise = new i(function (t, r) {
                e.resolve = t, e.reject = r;
              }), e;
            }, t.exports = i;
          }, {}],
          11: [function (e, t, r) {
            t.exports = function (e) {
              e = e.toLowerCase();
              var t = /(edge)\/([\w.]+)/.exec(e) || /(opr)[\/]([\w.]+)/.exec(e) || /(chrome)[ \/]([\w.]+)/.exec(e) || /(iemobile)[\/]([\w.]+)/.exec(e) || /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e) || /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e) || /(webkit)[ \/]([\w.]+)/.exec(e) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e) || /(msie) ([\w.]+)/.exec(e) || e.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec(e) || e.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e) || [],
                  r = {},
                  n = {
                browser: t[5] || t[3] || t[1] || "",
                version: t[2] || t[4] || "0",
                versionNumber: t[4] || t[2] || "0"
              };

              if (n.browser && (r[n.browser] = !0, r.version = n.version, r.versionNumber = parseInt(n.versionNumber, 10)), r.rv || r.iemobile) {
                n.browser = "msie", r.msie = !0;
              }

              if (r.edge) {
                delete r.edge;
                n.browser = "msedge", r.msedge = !0;
              }

              if (r.opr) {
                n.browser = "opera", r.opera = !0;
              }

              if (r.safari && r.android) {
                n.browser = "android", r.android = !0;
              }

              if (r.safari && r.kindle) {
                n.browser = "kindle", r.kindle = !0;
              }

              if (r.safari && r.silk) {
                n.browser = "silk", r.silk = !0;
              }

              return r.name = n.browser, r;
            }(window.navigator.userAgent);
          }, {}],
          12: [function (e, t, r) {
            var n = e(29),
                i = e(13),
                o = e(14),
                s = e(15),
                a = e(11);

            t.exports = function () {
              function e() {
                return l;
              }

              function t(e) {
                var t = "";

                for (var r in e) {
                  if (e.hasOwnProperty(r)) if (o.isObject(e[r])) for (var n in e[r]) {
                    e[r].hasOwnProperty(n) && (t += r + "%5B" + n + "%5D=" + encodeURIComponent(e[r][n]) + "&");
                  } else if (o.isArray(e[r])) for (var i = 0; i < e[r].length; i++) {
                    t += r + "%5B%5D=" + encodeURIComponent(e[r][i]) + "&";
                  } else t += r + "=" + encodeURIComponent(e[r]) + "&";
                }

                return t.slice(0, -1);
              }

              function r(e, r, n) {
                return "/" !== e[e.length - 1] && r && (e += "/"), r = r || [], o.isObject(n) && (n = t(n)), n = n ? "?" + n : "", e + r.join("/") + n;
              }

              function u(e) {
                var s,
                    u = null,
                    c = e.scope || window;
                if (e.useImgTag) s = c.document.createElement("img");else {
                  s = c.document.createElement("script"), s.type = "text/javascript";
                  var f = !0;
                  e.hasOwnProperty("async") && (f = e.async), s.async = f;
                }
                var l = e.url;

                if (e.data) {
                  var d;
                  d = o.isString(e.data) ? e.data : t(e.data), l = r(e.url, null, d);
                }

                var p,
                    v = !1,
                    h = function h() {
                  try {
                    if (v) return;
                    v = !0, e.onTimeout && e.onTimeout(), e.useImgTag || e.continueAfterTimeout || s.parentNode.removeChild(s);
                  } catch (e) {}
                };

                e.globalTimeout && n.services.TimerService.addTimerCallback(e.sessionId, h), e.timeout && (p = setTimeout(h, e.timeout));

                var g = function g() {
                  try {
                    if (v) {
                      if (!e.continueAfterTimeout) return;
                    } else clearTimeout(p);

                    e.onSuccess && e.onSuccess(null, i.now(), v), v = !0, e.useImgTag || s.parentNode.removeChild(s);
                  } catch (e) {}
                };

                null === s.onload ? s.onload = g : s.onreadystatechange = function () {
                  "loaded" !== s.readyState && "complete" !== s.readyState || (s.onreadystatechange = null, g());
                };

                var y = function y() {
                  try {
                    if (v) {
                      if (!e.continueAfterTimeout) return;
                    } else clearTimeout(p), v = !0;

                    e.onFailure && e.onFailure(), e.useImgTag || s.parentNode.removeChild(s);
                  } catch (e) {}
                };

                if (s.onerror = y, u = i.now(), s.src = l, !e.useImgTag) {
                  var m = c.document.getElementsByTagName("script")[0];
                  m ? m.parentNode.insertBefore(s, m) : a.msie || a.msedge || a.mozilla ? c.onload = function () {
                    c.document.body.appendChild(s);
                  } : c.document.body.appendChild(s);
                }

                return u;
              }

              function c(a) {
                if (!e()) {
                  if (a.jsonp && "GET" === a.method) return u(a);
                  throw s("INTERNAL_ERROR", "XHR is not supported in this browser.");
                }

                var c = null,
                    f = a.scope || window,
                    l = new f.XMLHttpRequest(),
                    d = a.url,
                    p = null;
                if (a.data) if ("GET" === a.method) {
                  var v;
                  v = o.isString(a.data) ? a.data : t(a.data), d = r(a.url, null, v);
                } else "POST" === a.method && (p = o.isString(a.data) ? a.data : JSON.stringify(a.data));
                var h = !0;
                a.hasOwnProperty("async") && (h = a.async), l.open(a.method, d, h);
                var g = "application/x-www-form-urlencoded; charset=UTF-8";

                if (void 0 !== a.contentType && (g = a.contentType), g && l.setRequestHeader("Content-Type", g), a.headers) {
                  a.headers.hasOwnProperty("X-Request-With") || l.setRequestHeader("X-Request-With", "XMLHttpRequest");

                  for (var y in a.headers) {
                    a.headers.hasOwnProperty(y) && l.setRequestHeader(y, a.headers[y]);
                  }
                }

                a.withCredentials && (l.withCredentials = !0);

                var m,
                    _ = !1,
                    E = function E() {
                  try {
                    if (_) return;
                    _ = !0, a.onTimeout && a.onTimeout();
                  } catch (e) {}
                };

                return a.globalTimeout && n.services.TimerService.addTimerCallback(a.sessionId, E), a.timeout && (a.continueAfterTimeout ? m = setTimeout(E, a.timeout) : (l.timeout = a.timeout, l.ontimeout = E)), (a.onSuccess || a.onFailure) && (l.onreadystatechange = function () {
                  if (4 === l.readyState) {
                    if (_) {
                      if (!a.continueAfterTimeout) return;
                    } else clearTimeout(m), l.ontimeout = null;

                    if (200 === l.status) {
                      if (a.onSuccess) try {
                        a.onSuccess(l.responseText, i.now(), _);
                      } catch (e) {}
                    } else if (a.onFailure) try {
                      a.onFailure(l.status);
                    } catch (e) {}

                    _ = !0;
                  }
                }), c = i.now(), l.send(p), c;
              }

              function f(e) {
                return e.useImgTag = !0, u(e);
              }

              var l;
              return function () {
                l = window.XMLHttpRequest && "string" == typeof new XMLHttpRequest().responseType;
              }(), {
                ajax: c,
                jsonp: u,
                img: f,
                buildUrl: r,
                objToQueryString: t,
                isXhrSupported: e
              };
            }();
          }, {}],
          13: [function (e, t, r) {
            var n = e(7);
            e(15);

            t.exports = function () {
              function e(e, t) {
                e.open("text/html", "replace"), e.write(t), e.close();
              }

              function t(e, t) {
                e = e || n.DEFAULT_UID_LENGTH, t = t || n.DEFAULT_UID_CHARSET;

                for (var r = "", i = 0; i < e; i++) {
                  r += u[t].charAt(Math.floor(Math.random() * u[t].length));
                }

                return r;
              }

              function r() {
                return t(8, "HEX") + "-" + t(4, "HEX") + "-4" + t(3, "HEX") + "-" + "89ab".charAt(Math.floor(4 * Math.random())) + t(3, "HEX") + "-" + t(8, "HEX");
              }

              function i() {
                return new Date().getTime();
              }

              function o() {
                return a.getTimezoneOffset();
              }

              function s() {}

              var a,
                  u = {
                ALPHANUM: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
                ALPHA: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
                ALPHA_UPPER: "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                ALPHA_LOWER: "abcdefghijklmnopqrstuvwxyz",
                HEX: "0123456789abcdef",
                NUM: "0123456789"
              };
              return function () {
                a = new Date();
              }(), {
                UidCharacterSets: u,
                generateUniqueId: t,
                generateUuid: r,
                now: i,
                getTimezoneOffset: o,
                documentWrite: e,
                noOp: s
              };
            }();
          }, {}],
          14: [function (e, t, r) {
            var n = e(15);

            t.exports = function () {
              function e(e) {
                return void 0 === e ? "undefined" : {}.toString.call(e).match(A)[1].toLowerCase();
              }

              function t(t) {
                return "string" === e(t);
              }

              function r(t) {
                return "number" === e(t) && !isNaN(t);
              }

              function i(t) {
                return "number" === e(t) || "string" === e(t) && !isNaN(Number(t));
              }

              function o(e) {
                return r(e) && e % 1 == 0;
              }

              function s(t) {
                return "function" === e(t);
              }

              function a(t) {
                return "boolean" === e(t);
              }

              function u(t) {
                return "object" === e(t);
              }

              function c(t) {
                return "regexp" === e(t);
              }

              function f(e, t) {
                var r = e.indexOf(t);
                r > -1 && e.splice(r, 1);
              }

              function l(r, i, o) {
                if ("array" !== e(r)) return !1;

                if (void 0 !== i) {
                  if (!t(i)) throw n("INVALID_TYPE", "`type` must be a string");

                  if ("class" === i) {
                    if (!t(o)) throw n("INVALID_TYPE", "`className` must be a string");

                    for (var s = 0; s < r.length; s++) {
                      if ("object" != _typeof4(r[s]) || r[s].__type__ !== o) return !1;
                    }
                  } else for (var a = 0; a < r.length; a++) {
                    if (e(r[a]) !== i) return !1;
                  }
                }

                return !0;
              }

              function d(e) {
                return e.length ? e.splice(Math.floor(Math.random() * e.length), 1)[0] : null;
              }

              function p(e) {
                var t, r, n;

                for (n = e.length - 1; n > 0; n--) {
                  t = Math.floor(Math.random() * (n + 1)), r = e[n], e[n] = e[t], e[t] = r;
                }

                return e;
              }

              function v(e) {
                return JSON.parse(JSON.stringify(e));
              }

              function h() {
                for (var e = Array.prototype.slice.call(arguments), t = {}, r = 0; r < e.length; r++) {
                  for (var n in e[r]) {
                    e[r].hasOwnProperty(n) && (t[n] = e[r][n]);
                  }
                }

                return t;
              }

              function g() {
                for (var e = Array.prototype.slice.call(arguments), t = [], r = 0; r < e.length; r++) {
                  for (var n = 0; n < e[r].length; n++) {
                    t.push(e[r][n]);
                  }
                }

                return t;
              }

              function y(e) {
                if (t(e)) {
                  if ("" !== e) return !1;
                } else if (u(e)) {
                  for (var r in e) {
                    if (e.hasOwnProperty(r)) return !1;
                  }
                } else {
                  if (!l(e)) throw n("INVALID_TYPE", "`entity` must be either a string, object, or an array");
                  if (e.length) return !1;
                }

                return !0;
              }

              function m(e, t, r) {
                void 0 === r && (r = O);

                for (var n = 0; n < e.length; n++) {
                  for (var i = !1, o = 0; o < t.length && !(i = r(e[n], t[o])); o++) {
                    ;
                  }

                  if (!i) return !1;
                }

                return !0;
              }

              function _(e, t, r, n) {
                return t = t || [], n = n || null, function () {
                  try {
                    e.apply(n, t);
                  } catch (e) {}
                };
              }

              function E(e, t) {
                var r = "" + e;
                if (t = +t, t != t && (t = 0), t < 0) throw new RangeError("repeat count must be non-negative");
                if (t == 1 / 0) throw new RangeError("repeat count must be less than infinity");
                if (t = Math.floor(t), 0 == r.length || 0 == t) return "";
                if (r.length * t >= 1 << 28) throw new RangeError("repeat count must not overflow maximum string size");

                for (var n = "", i = 0; i < t; i++) {
                  n += r;
                }

                return n;
              }

              function b(e, t, r) {
                return t >>= 0, r = String(r || " "), e.length > t ? String(e) : (t -= e.length, t > r.length && (r += E(r, t / r.length)), r.slice(0, t) + String(e));
              }

              function w(e, t, r) {
                return t >>= 0, r = String(r || " "), e.length > t ? String(e) : (t -= e.length, t > r.length && (r += E(r, t / r.length)), String(e) + r.slice(0, t));
              }

              function T(e, t) {
                t = t || null;

                try {
                  return eval.call(t, e);
                } catch (e) {}

                return null;
              }

              function S(e, t, r) {
                r = r || null;

                try {
                  return eval.call(r, e + "(" + t.join() + ")");
                } catch (e) {}

                return null;
              }

              function I() {
                for (var e = Array.prototype.slice.call(arguments), t = e[0], r = 1; r < e.length; r++) {
                  Array.prototype.push.apply(t, e[r]);
                }

                return t;
              }

              function P() {
                for (var e = Array.prototype.slice.call(arguments), t = e[0], r = 1; r < e.length; r++) {
                  var n = e[r];

                  for (var i in n) {
                    n.hasOwnProperty(i) && (t[i] = n[i]);
                  }
                }

                return t;
              }

              var A = /\s([a-zA-Z]+)/,
                  O = function O(e, t) {
                return e === t;
              };

              return {
                randomSplice: d,
                shuffle: p,
                deepCopy: v,
                mergeObjects: h,
                mergeArrays: g,
                isArray: l,
                isEmpty: y,
                isInteger: o,
                isString: t,
                isNumeric: i,
                isRegex: c,
                isNumber: r,
                isBoolean: a,
                isFunction: s,
                isObject: u,
                isArraySubset: m,
                getType: e,
                tryCatchWrapper: _,
                arrayDelete: f,
                repeatString: E,
                padStart: b,
                padEnd: w,
                evalVariable: T,
                evalFunction: S,
                appendToArray: I,
                appendToObject: P
              };
            }();
          }, {}],
          15: [function (e, t, r) {
            function n(e, t) {
              return new Error(e + ": " + t);
            }

            n.ErrorTokens = {
              MISSING_ARGUMENT: 1,
              INVALID_TYPE: 2,
              INVALID_VALUE: 3,
              MISSING_PROPERTY: 4,
              NUMBER_OUT_OF_RANGE: 5,
              EMPTY_ENTITY: 6,
              INTERNAL_ERROR: 7,
              DUPLICATE_ENTITY: 8,
              INVALID_ARGUMENT: 9,
              INVALID_CONFIG: 10
            }, t.exports = n;
          }, {}],
          16: [function (e, t, r) {
            function n(e) {
              function t() {
                return r;
              }

              var r;
              return function () {
                o.DeviceTypeChecker = i(e.DeviceTypeChecker), r = {
                  Services: {},
                  Layers: {}
                };

                for (var t = 0; t < a.length; t++) {
                  var n = a[t].name,
                      c = a[t].constructor(e.Services[n]);
                  c && (o.services[n] = c, c.getDirectInterface && c.getDirectInterface() && (r.Services = s.mergeObjects(r.Services, c.getDirectInterface())));
                }

                for (var f, l = e.Layers.length - 1; l >= 0; l--) {
                  var d = e.Layers[l].layerId,
                      p = u[d](e.Layers[l].configs);
                  p.getDirectInterface() && (r.Layers = s.mergeObjects(r.Layers, p.getDirectInterface())), f && p.setNext(f.execute), f = p;
                }
              }(), {
                getDirectInterface: t
              };
            }

            var i = e(8),
                o = e(29),
                s = e(14),
                a = (e(15), [{
              name: "EventsService",
              constructor: e(22)
            }, {
              name: "GptService",
              constructor: e(25)
            }, {
              name: "PublisherSonarService",
              constructor: e(26)
            }, {
              name: "HeaderStatsService",
              constructor: e(23)
            }, {
              name: "TimerService",
              constructor: e(27)
            }, {
              name: "ComplianceService",
              constructor: e(24)
            }]),
                u = {
              IdentityLayer: e(1)
            };
            t.exports = n;
          }, {}],
          17: [function (e, t, r) {
            function n() {
              function e(e) {
                for (var t = "", r = 0; r < e.length - 3; r++) {
                  t += String.fromCharCode(e.charCodeAt(r) - 4);
                }

                return t;
              }

              function t(t, r) {
                var o = e(r.partner),
                    u = r.sessionId,
                    p = r.status;

                if (u && "success" === p) {
                  var v = s.now();

                  if (l[u] === g.DONE) {
                    var h = i.getData(n.STORAGE_KEY_NAME);
                    if (null === h || !h.hasOwnProperty("prt") || !a.isArray(h.prt)) return;
                    h = h.prt;

                    for (var y = 0; y < h.length; y++) {
                      if (h[y].sId === u && h[y].sst) {
                        h[y].rt.hasOwnProperty(o) || (h[y].rt[o] = []), h[y].rt[o].unshift(v - h[y].sst), i.setData(n.STORAGE_KEY_NAME, {
                          prt: h
                        }, d);
                        break;
                      }
                    }
                  } else {
                    if (!c[u]) return;
                    f.hasOwnProperty(u) || (f[u] = {}), f[u].hasOwnProperty(o) || (f[u][o] = []), f[u][o].push(v - c[u]);
                  }
                }
              }

              function r(e) {
                var t = e.length;
                if (0 === t) return 0;

                for (var r = 0, n = 0; n < t; n++) {
                  r += e[n];
                }

                return r / t;
              }

              function u(e) {
                var t = i.getData(n.STORAGE_KEY_NAME);
                if (null === t || !t.hasOwnProperty("prt") || !a.isArray(t.prt) || 0 === t.prt.length) return e;
                t = t.prt;

                for (var o = [], s = 0; s < t.length; s++) {
                  if (t[s].hasOwnProperty("rt")) for (var u in t[s].rt) {
                    if (t[s].rt.hasOwnProperty(u)) {
                      var c = r(t[s].rt[u]);
                      0 !== c && o.push(c);
                    }
                  }
                }

                var f = r(o);
                if (0 === f) return e;

                for (var l = o.length, d = 0, g = 0; g < l; g++) {
                  d += Math.pow(o[g] - f, 2);
                }

                d = Math.sqrt(d / l);

                var y = Math.floor(f + 2 * d + p),
                    m = Math.floor(e * v),
                    _ = Math.floor(e * h);

                return y < m ? y = m : y > _ && (y = _), y;
              }

              var c,
                  f,
                  l,
                  d = 6048e5,
                  p = 100,
                  v = .8,
                  h = 3,
                  g = {
                IPR: 0,
                DONE: 1
              },
                  y = {
                hs_session_start: function hs_session_start(e) {
                  var t = e.sessionId;
                  c.hasOwnProperty(t) && l[t] === g.IPR || (c[t] = s.now(), l[t] = g.IPR);
                },
                hs_session_end: function hs_session_end(e) {
                  var t = e.sessionId;

                  if (c[t] && l[t] === g.IPR) {
                    l[t] = g.DONE;
                    var r = i.getData(n.STORAGE_KEY_NAME);
                    null !== r && r.hasOwnProperty("prt") && a.isArray(r.prt) ? (r = r.prt, r.length >= 5 && r.pop()) : r = [], r.unshift({
                      sId: t,
                      sst: c[t],
                      rt: f[t] || {}
                    }), i.setData(n.STORAGE_KEY_NAME, {
                      prt: r
                    }, d), delete f[t], delete c[t];
                  }
                },
                partner_request_complete: function partner_request_complete(e) {
                  t("partner_request_complete", e);
                }
              };
              return function () {
                for (var e in y) {
                  y.hasOwnProperty(e) && o.services.EventsService.on(e, y[e]);
                }

                l = {}, f = {}, c = {};
              }(), {
                getTimeout: u
              };
            }

            var i = e(4),
                o = e(29),
                s = e(13),
                a = e(14);
            n.STORAGE_KEY_NAME = "lib_mem", t.exports = n;
          }, {}],
          18: [function (e, t, r) {
            function n() {
              var e = {
                ttd_pid: a,
                fmt: u,
                p: o.configs.publisherId
              };
              o.Utilities.ajax({
                url: o.Utilities.getProtocol() + s,
                method: "GET",
                data: e,
                onSuccess: function onSuccess(e) {
                  try {
                    var t = JSON.parse(e);
                    if (!t.TDID) return void o.registerError("response does not contain TDID");
                    var r = [];

                    for (var n in t) {
                      t.hasOwnProperty(n) && r.push({
                        id: t[n],
                        ext: {
                          rtiPartner: n
                        }
                      });
                    }

                    o.registerMatch({
                      source: c.source,
                      uids: r
                    });
                  } catch (e) {
                    o.registerError("response is not valid JSON");
                  }
                },
                onFailure: function onFailure(e) {
                  o.registerError("API returned error response " + e);
                }
              });
            }

            function i(e) {
              o = e, o.onRetrieve(n);
            }

            var o,
                s = "//match.adsrvr.org/track/rid",
                a = "casale",
                u = "json",
                c = {
              partnerId: "AdserverOrgIp",
              statsId: "ADSORG",
              version: "1.3.0",
              source: "adserver.org",
              cacheExpiry: {
                match: 6048e5,
                pass: 864e5,
                error: 864e5
              },
              targetingKeys: {
                exchangeBidding: "ixpid_1"
              }
            };
            t.exports = {
              type: "identity",
              api: "1",
              main: i,
              profile: c
            };
          }, {}],
          19: [function (e, t, r) {
            function n(e, t) {
              function r(e) {
                return !!(e && e.uids && p.isString(e.source) && p.isArray(e.uids)) && e.uids.every(function (e) {
                  return Boolean(!p.isEmpty(e) && e.id);
                });
              }

              function n(e, t) {
                var r = {
                  match: "hs_identity_response",
                  pass: "hs_identity_pass",
                  error: "hs_identity_error"
                }[e];
                o.emit(r, {
                  statsId: L
                }), o.emit("ip_module_result_" + x, e, t), "match" === e && (C = t);
              }

              function v(e, t) {
                if (!q) {
                  q = !0;
                  var r = {
                    response: e,
                    version: D.version
                  };
                  "pass" !== e && (r.data = t), Object.keys(U).length && (r.consent = U);
                  var i = D.cacheExpiry[e];
                  u.setData(F, r, i), n(e, t), j && j();
                }
              }

              function h(e) {
                if (!i.isPrivacyEnabled()) return null;

                if ("gdpr" === e) {
                  var t = i.gdpr.getConsent();
                  return t && t.consentString && (U.gdpr = !0), t;
                }

                return null;
              }

              function g(e) {
                var t = u.getData(e);
                return t && "match" === t.response && t.data ? t.data : null;
              }

              function y(e) {
                var t = {
                  url: e.url,
                  method: e.method,
                  async: !0,
                  withCredentials: !0,
                  jsonp: !1,
                  continueAfterTimeout: !1,
                  timeout: e.timeout || 0
                };
                return e.onSuccess && (t.onSuccess = e.onSuccess), e.onTimeout && (t.onTimeout = e.onTimeout), e.onFailure && (t.onFailure = e.onFailure), void 0 !== e.data && (t.data = e.data), void 0 !== e.contentType && (t.contentType = e.contentType), c.ajax(t);
              }

              function m() {
                return D.sonar && D.sonar.enabled ? s.getSonarPayload(D.sonar.entrypoints) : {};
              }

              function _(e) {
                k = e;
              }

              function E(e) {
                return Boolean(D.sonar && D.sonar.enabled && s.getLastUpdated(m()) > e.created);
              }

              function b(e) {
                return !(!D.consent || !i.isPrivacyEnabled()) && (!e.data.consent || !p.isArraySubset(Object.keys(D.consent), Object.keys(e.data.consent))) && i.wait().then(function () {
                  return Object.keys(D.consent).some(function (t) {
                    if (e.data.consent && e.data.consent[t]) return !1;
                    var r = i[t].getConsent();
                    return r && r.consentString;
                  });
                });
              }

              function w(e) {
                return e.data.version !== D.version;
              }

              function T(e) {
                return !r(e.data.data);
              }

              function S() {
                return D.consent && i.isPrivacyEnabled() ? i.wait() : null;
              }

              function I() {
                var e = u.getEntry(F);
                return f.resolve().then(function () {
                  if (!e) return null;
                  var t = H[e.data.response];
                  return t ? f.all(t.map(function (t) {
                    return t.call(null, e);
                  })) : null;
                }).then(function (t) {
                  return !t || t.indexOf(!0) > -1 ? null : (o.emit("hs_identity_cached", {
                    statsId: L
                  }), n(e.data.response, e.data.data), e.data);
                });
              }

              function P() {
                return f.resolve().then(function () {
                  return f.all(G.map(function (e) {
                    return e.call();
                  }));
                }).then(function () {
                  return new f(function (e) {
                    o.emit("hs_identity_request", {
                      statsId: L
                    }), q = !1, j = e, o.emit("ip_module_retrieve_" + x);
                  });
                });
              }

              function A() {
                return L;
              }

              function O() {
                return C;
              }

              function N() {
                if (k) return k;

                if (C && p.isArray(C.uids) && C.uids.length && C.uids[0].id) {
                  var e = {};
                  return e[D.targetingKeys.exchangeBidding] = C.uids[0].id, e;
                }

                return null;
              }

              function R() {
                return I().then(function (e) {
                  return e ? null : P();
                });
              }

              var D,
                  x,
                  L,
                  M,
                  C,
                  k,
                  U,
                  j,
                  F,
                  q,
                  H = {
                match: [E, T],
                pass: [E, b, w],
                error: [w]
              },
                  G = [S];
              return function () {
                i = l.services.ComplianceService, o = l.services.EventsService, s = l.services.PublisherSonarService, D = e.profile, x = D.partnerId, L = D.statsId, C = null, k = null, j = null, F = x, U = {}, M = {
                  Utilities: {
                    buildUrl: c.buildUrl,
                    getPageUrl: a.getPageUrl,
                    getProtocol: a.getProtocol,
                    getReferrer: a.getReferrer,
                    getTime: d.now,
                    getType: p.getType,
                    isArray: p.isArray,
                    isEmpty: p.isEmpty,
                    isFunction: p.isFunction,
                    isInteger: p.isInteger,
                    isNumeric: p.isNumeric,
                    isString: p.isString,
                    isObject: p.isObject,
                    isTopFrame: a.isTopFrame,
                    isXhrSupported: c.isXhrSupported,
                    ajax: y,
                    getConsent: h,
                    getIdentityResultFrom: g,
                    getPublisherSonarData: m
                  },
                  onRetrieve: o.on.bind(null, "ip_module_retrieve_" + x),
                  onResult: o.on.bind(null, "ip_module_result_" + x),
                  registerMatch: v.bind(null, "match"),
                  registerPass: v.bind(null, "pass"),
                  registerError: v.bind(null, "error"),
                  registerEbTargeting: _,
                  configs: t
                }, e.main(M);
              }(), {
                getStatsId: A,
                getResults: O,
                getTargets: N,
                retrieve: R
              };
            }

            var i,
                o,
                s,
                a = e(3),
                u = e(4),
                c = e(12),
                f = e(10),
                l = e(29),
                d = e(13),
                p = e(14);
            t.exports = n;
          }, {}],
          20: [function (e, t, r) {
            function n() {
              var e = {
                pid: a,
                rt: "envelope"
              },
                  t = o.Utilities.getConsent("gdpr");
              t && t.consentString && (e[d.consent.gdpr] = t.consentString, e[f] = l);
              var r = [],
                  n = d.sonar.entrypoints[0].key,
                  i = o.Utilities.getPublisherSonarData();
              i && i.hasOwnProperty(n) && (e[n] = i[n].data, e[u] = c, r.push(i[n].meta)), o.Utilities.ajax({
                url: o.Utilities.getProtocol() + s,
                method: "GET",
                data: e,
                onSuccess: function onSuccess(e) {
                  try {
                    var t,
                        n = JSON.parse(e);
                    if (!o.Utilities.isObject(n)) return void o.registerError("invalid response");
                    if (o.Utilities.isEmpty(n)) return void o.registerPass();
                    if (!n.hasOwnProperty("envelope")) return void o.registerError("invalid envelope object");
                    if (o.Utilities.isEmpty(n.envelope)) return void o.registerPass();
                    t = {
                      source: d.source,
                      uids: [{
                        id: n.envelope,
                        ext: {
                          rtiPartner: "idl"
                        }
                      }]
                    }, r.length && (t.ext = {
                      sonar: r
                    }), o.registerMatch(t);
                  } catch (e) {
                    o.registerError("response is not valid JSON");
                  }
                },
                onFailure: function onFailure(e) {
                  204 === e ? o.registerPass() : o.registerError("API returned error response " + e);
                }
              });
            }

            function i(e) {
              o = e, o.onRetrieve(n);
            }

            var o,
                s = "//api.rlcdn.com/api/identity",
                a = 2,
                u = "it",
                c = 4,
                f = "ct",
                l = 1,
                d = {
              partnerId: "LiveRampIp",
              statsId: "LVRAMP",
              version: "1.3.0",
              source: "liveramp.com",
              cacheExpiry: {
                match: 864e5,
                pass: 864e5,
                error: 864e5
              },
              consent: {
                gdpr: "cv"
              },
              targetingKeys: {
                exchangeBidding: "ixpid_3"
              },
              sonar: {
                enabled: !0,
                entrypoints: [{
                  key: "iv",
                  filter: {
                    attr: 1,
                    algo: 1
                  }
                }]
              }
            };
            t.exports = {
              type: "identity",
              api: "1",
              main: i,
              profile: d
            };
          }, {}],
          21: [function (e, t, r) {
            function n() {
              var e = {},
                  t = [],
                  r = o.Utilities.getPublisherSonarData();

              for (var n in r) {
                r.hasOwnProperty(n) && (e[n] = r[n].data, t.push(r[n].meta));
              }

              e.ptk = u, e.pubid = o.configs.pubid, o.Utilities.ajax({
                url: o.Utilities.getProtocol() + a,
                method: "GET",
                data: e,
                onSuccess: function onSuccess(e) {
                  try {
                    var r,
                        n = JSON.parse(e);
                    if (!o.Utilities.isObject(n)) return void o.registerError("invalid response");
                    var i = [];

                    if (n.ppid) {
                      if (!n.ppid.id) return void o.registerError("invalid ppid object");
                      i.push({
                        id: n.ppid.id,
                        ext: {
                          enc: 0
                        }
                      });
                    }

                    if (n.pam_id && !s.msie) {
                      if (!n.pam_id.id || !n.pam_id.keyID) return void o.registerError("invalid pam_id object");
                      i.push({
                        id: n.pam_id.id,
                        ext: {
                          keyID: n.pam_id.keyID,
                          enc: 1
                        }
                      });
                    }

                    i.length ? (r = {
                      source: c.source,
                      uids: i
                    }, t.length > 0 && (r.ext = {
                      sonar: t
                    }), o.registerMatch(r)) : o.registerPass();
                  } catch (e) {
                    o.registerError("response is not valid JSON");
                  }
                },
                onFailure: function onFailure(e) {
                  o.registerError("API returned error response " + e);
                }
              });
            }

            function i(e) {
              o = e, o.onRetrieve(n);
            }

            var o,
                s = e(11),
                a = "//mid.rkdms.com/idsv2",
                u = "17c1789b-e660-493b-aa74-3c8fb990dc5f",
                c = {
              partnerId: "MerkleIp",
              statsId: "MRKL",
              version: "1.4.2",
              source: "merkleinc.com",
              cacheExpiry: {
                match: 6048e5,
                pass: 864e5,
                error: 864e5
              },
              targetingKeys: {
                exchangeBidding: "ixpid_4"
              },
              sonar: {
                enabled: !0,
                entrypoints: [{
                  key: "qs1",
                  filter: {
                    attr: 1,
                    algo: 2
                  }
                }]
              }
            };
            t.exports = {
              type: "identity",
              api: "1",
              main: i,
              profile: c
            };
          }, {}],
          22: [function (e, t, r) {
            function n() {
              function e(e, t, r) {
                s.hasOwnProperty(e) || (s[e] = []);
                var n = i.generateUniqueId();
                return s[e].push({
                  id: n,
                  fn: r,
                  once: t
                }), n;
              }

              function t(t, r) {
                return e(t, !1, r);
              }

              function r(t, r) {
                return e(t, !0, r);
              }

              function n(e) {
                for (var t in s) {
                  if (s.hasOwnProperty(t)) for (var r = s[t].length - 1; r >= 0; r--) {
                    if (s[t][r].id === e) return void s[t].splice(r, 1);
                  }
                }
              }

              function o() {
                var e = Array.prototype.slice.call(arguments),
                    t = e.shift();
                if (t && s.hasOwnProperty(t)) for (var r = s[t].length - 1; r >= 0; r--) {
                  try {
                    s[t][r].fn.apply(null, e);
                  } catch (e) {}

                  s[t][r].once && s[t].splice(r, 1);
                }
              }

              var s;
              return function () {
                s = {};
              }(), {
                on: t,
                once: r,
                off: n,
                emit: o
              };
            }

            var i = e(13);
            e(15);
            t.exports = n;
          }, {}],
          23: [function (e, t, r) {
            function n(e) {
              function t(e) {
                var t = {
                  auction_cycle: "ac",
                  global_timeout: "gt",
                  bid_requests: "brq",
                  bid_responses: "brs",
                  bid_errors: "be",
                  bid_passes: "bp",
                  bid_timeouts: "bt",
                  dfp_kv_pushed: "kv",
                  top_bid: "tb",
                  prefetch: "p",
                  res_latency: "rl",
                  partner_timeout: "pt"
                };
                return t.hasOwnProperty(e) ? t[e] : e;
              }

              function r() {
                if (c.isEmpty(P)) return [];
                var e = {
                  s: "identity",
                  t: O,
                  xslots: {}
                };

                for (var r in P) {
                  if (P.hasOwnProperty(r)) {
                    e.xslots.hasOwnProperty(r) || (e.xslots[r] = {});

                    for (var n = 0; n < P[r].length; n++) {
                      var i = P[r][n];
                      "bid_requests" !== i.n && "res_latency" !== i.n || (i.v = String(i.v)), e.xslots[r].hasOwnProperty(i.x) || (e.xslots[r][i.x] = {});
                      var o = t(i.n);
                      e.xslots[r][i.x][o] = i.v;
                    }
                  }
                }

                return P = {}, [e];
              }

              function f(e, t) {
                c.isEmpty(P) && (O = u.now());
                var r = t.statsId;
                P[r] = P[r] || [];
                var n = {
                  b: r,
                  x: N ? "after" : "before"
                };
                "hs_identity_request" === e ? (n.n = "bid_requests", n.v = 1, A[r] = u.now()) : "hs_identity_cached" === e ? (n.n = "bid_requests", n.v = 0) : "hs_identity_response" === e ? (n.n = "bid_responses", n.v = 1) : "hs_identity_error" === e ? (n.n = "bid_errors", n.v = 1) : "hs_identity_pass" === e ? (n.n = "bid_passes", n.v = 1) : "hs_identity_timeout" === e ? (n.n = "bid_timeouts", n.v = 1) : "hs_identity_bid_latency" === e && (n.n = "res_latency", n.v = u.now() - A[r]), P[r].push(n);
              }

              function l(e) {
                if (S.hasOwnProperty(e) && S[e] !== R.IPR && S[e] !== R.SENT) {
                  var t = {
                    p: I[e],
                    d: a.DeviceTypeChecker.getDeviceType(),
                    c: v,
                    s: e,
                    w: g,
                    t: u.now(),
                    pg: {
                      t: y,
                      e: b[e]
                    }
                  };
                  h.auctionCycle && (t.ac = E[e]), t.sl = r(), t.akamaiDebugInfo = T[e], delete T[e], delete b[e], delete w[e];
                  var n = s.buildUrl(d, null, {
                    s: p,
                    u: o.getPageUrl(),
                    v: 3
                  });
                  s.ajax({
                    method: "POST",
                    url: n,
                    data: t
                  }), S[e] = R.SENT;
                }
              }

              if (!s.isXhrSupported()) return null;

              var d,
                  p,
                  v,
                  h,
                  g,
                  y,
                  _,
                  E,
                  b,
                  w,
                  T,
                  S,
                  I,
                  P,
                  A,
                  O,
                  N,
                  R = {
                IPR: 0,
                DONE: 1,
                SENT: 2
              },
                  D = {
                hs_session_start: function hs_session_start(e) {
                  var t = e.sessionId;
                  S.hasOwnProperty(t) || (S[t] = R.IPR, _[t] = u.now(), b[t] = [], w[t] = {}, I[t] = n.SessionTypes.DISPLAY);
                },
                hs_session_end: function hs_session_end(e) {
                  var t = e.sessionId;
                  S.hasOwnProperty(t) && S[t] !== R.DONE && (E[t] = String(u.now() - _[t]), delete _[t], setTimeout(function () {
                    S[t] = R.DONE, l(t);
                  }, 0));
                },
                hs_akamai_debug: function hs_akamai_debug(e) {
                  var t = e.sessionId;
                  T[t] = {}, T[t].hostname = e.hostname, e.hasOwnProperty("requestHost") && (T[t].requestHost = e.requestHost), e.hasOwnProperty("akamaiPresent") && (T[t].akamaiPresent = e.akamaiPresent);
                },
                hs_identity_request: function hs_identity_request(e) {
                  f("hs_identity_request", e);
                },
                hs_identity_cached: function hs_identity_cached(e) {
                  f("hs_identity_cached", e);
                },
                hs_identity_response: function hs_identity_response(e) {
                  f("hs_identity_response", e), i.emit("hs_identity_bid_latency", e);
                },
                hs_identity_error: function hs_identity_error(e) {
                  f("hs_identity_error", e), i.emit("hs_identity_bid_latency", e);
                },
                hs_identity_pass: function hs_identity_pass(e) {
                  f("hs_identity_pass", e), i.emit("hs_identity_bid_latency", e);
                },
                hs_identity_bid_latency: function hs_identity_bid_latency(e) {
                  c.isNumber(A[e.statsId]) && f("hs_identity_bid_latency", e);
                },
                hs_identity_timeout: function hs_identity_timeout(e) {
                  f("hs_identity_timeout", e), N = !0;
                },
                hs_define_identity_timeout: function hs_define_identity_timeout(e) {}
              };

              return function () {
                i = a.services.EventsService, y = u.now(), d = "https://as-sec.casalemedia.com/headerstats", p = e.siteId, v = e.configId, h = e.options, g = p + u.now(), g += u.generateUniqueId(32 - g.length), a.instanceId = g, S = {}, b = {}, w = {}, T = {}, _ = {}, E = {}, I = {}, P = {}, A = {}, N = !1;

                for (var t in D) {
                  D.hasOwnProperty(t) && a.services.EventsService.on(t, D[t]);
                }
              }(), {};
            }

            var i,
                o = e(3),
                s = (e(4), e(17), e(12)),
                a = e(29),
                u = e(13),
                c = e(14);
            e(15);
            n.SessionTypes = {
              DISPLAY: "display",
              VIDEO: "video"
            }, t.exports = n;
          }, {}],
          24: [function (e, t, r) {
            function n() {
              function e() {
                return {
                  applies: !0,
                  consentString: ""
                };
              }

              function t() {
                return {
                  version: 1,
                  uspString: ""
                };
              }

              function r() {
                return !1;
              }

              function n(e) {
                return e;
              }

              function o() {
                return i.resolve();
              }

              return {
                gdpr: {
                  getConsent: e,
                  setApplies: function setApplies() {}
                },
                usp: {
                  getConsent: t
                },
                isPrivacyEnabled: r,
                delay: n,
                wait: o
              };
            }

            var i = e(10);
            t.exports = n;
          }, {}],
          25: [function (e, t, r) {
            e(13);

            t.exports = function () {
              return {};
            };
          }, {}],
          26: [function (e, t, r) {
            t.exports = function () {
              return {
                getSonarPayload: function getSonarPayload() {
                  return {};
                },
                getLastUpdated: function getLastUpdated() {
                  return 0;
                },
                setSonarEmail: function setSonarEmail() {
                  return {};
                }
              };
            };
          }, {}],
          27: [function (e, t, r) {
            function n() {
              function e(e) {
                return function () {
                  u[e].state = c.TERMINATED;

                  for (var t = 0; t < u[e].cbs.length; t++) {
                    try {
                      u[e].cbs[t]();
                    } catch (e) {}
                  }

                  delete u[e].cbs, delete u[e].timer;
                };
              }

              function t(t, r, n) {
                var s = o.generateUniqueId(i.SESSION_ID_LENGTH);
                return r = !!r, n = n ? [n] : [], u[s] = {
                  state: c.NEW,
                  cbs: n,
                  timeout: t
                }, r && (u[s].state = c.RUNNABLE, u[s].timer = setTimeout(e(s), t)), s;
              }

              function r(t) {
                u.hasOwnProperty(t) && u[t].state === c.NEW && (u[t].state = c.RUNNABLE, u[t].timer = setTimeout(e(t), u[t].timeout));
              }

              function n(e, t) {
                u.hasOwnProperty(e) && u[e].state !== c.TERMINATED && u[e].cbs.unshift(t);
              }

              function s(e) {
                return u.hasOwnProperty(e) ? u[e].state : null;
              }

              function a(e) {
                u.hasOwnProperty(e) && u[e].state !== c.TERMINATED && (u[e].state = c.TERMINATED, clearTimeout(u[e].timer), delete u[e].cbs, delete u[e].timer);
              }

              var u,
                  c = {
                NEW: 0,
                RUNNABLE: 1,
                TERMINATED: 2
              };
              return function () {
                u = {};
              }(), {
                TimerStates: c,
                createTimer: t,
                startTimer: r,
                addTimerCallback: n,
                getTimerState: s,
                clearTimer: a
              };
            }

            var i = e(7),
                o = e(13);
            e(15);
            t.exports = n;
          }, {}],
          28: [function (e, t, r) {
            var n,
                i,
                o = (e(3), e(6)),
                s = e(16),
                a = e(29),
                u = e(14);
            window[a.NAMESPACE] = window[a.NAMESPACE] || {}, window[a.NAMESPACE].cmd = window[a.NAMESPACE].cmd || [];
            var c = window[a.NAMESPACE].cmd;
            window[a.NAMESPACE] = function () {
              function e(e, t, r) {
                var n = "";

                try {
                  if (!u.isBoolean(t)) return i.emit("error", "`once` must be a boolean"), n;
                  if (!u.isFunction(r)) return i.emit("error", "`callback` must be a function"), n;
                  if (!u.isString(e)) return i.emit("error", "`eventName` must be a string"), n;
                  if (!p.hasOwnProperty(e)) return i.emit("error", "Unrecognized event " + e), n;
                  if ("rti_partner_request_complete" === e && !0 === d.emitted) return r(e, d.args), n;

                  var o = function o() {
                    var t = Array.prototype.slice.call(arguments);
                    r(e, JSON.stringify(t));
                  };

                  n = t ? i.once(e, o) : i.on(e, o);
                } catch (e) {
                  i.emit("error", e);
                }

                return n;
              }

              function t(e) {
                try {
                  if (!u.isString(e)) return void i.emit("error", "`subscriptionId` must be a string");
                  i.off(e);
                } catch (e) {
                  i.emit("error", e);
                }
              }

              function r() {
                return f.Layers.IdentityLayer.getAllPartnerResults();
              }

              function o(e) {
                var t = {
                  status: !1,
                  message: "Identity feature not enabled"
                };
                return t = a.services.PublisherSonarService.setSonarEmail(e), t.status && f.Layers.IdentityLayer.invokeAllPartners(), t;
              }

              var c,
                  f,
                  l,
                  d = {
                emitted: !1,
                args: {}
              },
                  p = {
                error: 1,
                warning: 2,
                rti_partner_request_complete: 3
              };
              if (function () {
                try {
                  c = {
                    DeviceTypeChecker: {
                      method: "USER_AGENT",
                      configs: {}
                    },
                    Services: {
                      EventsService: {},
                      TimerService: {},
                      HeaderStatsService: {
                        siteId: "263047",
                        configId: "78534564703284",
                        options: {
                          auctionCycle: !1
                        }
                      }
                    },
                    Layers: [{
                      layerId: "IdentityLayer",
                      configs: {
                        partners: {
                          AdserverOrgIp: {
                            enabled: !0,
                            configs: {
                              publisherId: 186948
                            }
                          },
                          LiveRampIp: {
                            enabled: !0,
                            configs: {}
                          },
                          MerkleIp: {
                            enabled: !0,
                            configs: {
                              pubid: "TURNER"
                            }
                          }
                        }
                      }
                    }]
                  }, f = s(c).getDirectInterface(), n = a.services.ComplianceService, i = a.services.EventsService;
                  var t = Math.random().toString(36).slice(-5);
                  i.emit("hs_session_start", {
                    sessionId: t
                  }), e("rti_partner_request_complete", !0, function (e, r) {
                    d = {
                      emitted: !0,
                      args: r
                    }, i.emit("hs_session_end", {
                      sessionId: t
                    });
                  }), n.wait().then(function () {
                    f.Layers.IdentityLayer.retrieve();
                  })["catch"](function (e) {});
                } catch (e) {
                  l = {
                    subscribeEvent: function subscribeEvent() {
                      return "";
                    },
                    unsubscribeEvent: function unsubscribeEvent() {}
                  };
                }
              }(), l) return l;
              var v = {};
              if (window[a.NAMESPACE]) for (var h in window[a.NAMESPACE]) {
                window[a.NAMESPACE].hasOwnProperty(h) && (v[h] = window[a.NAMESPACE][h]);
              }
              return v.subscribeEvent = e, v.unsubscribeEvent = t, v.getIdentityInfo = r, v.setSonarEmail = o, v;
            }(), window[a.NAMESPACE].cmd = o(c);
          }, {}],
          29: [function (e, t, r) {
            var n = {
              NAMESPACE: "headertag",
              PRODUCT: "IdentityLibrary",
              services: {},
              DeviceTypeChecker: {},
              initQueue: [],
              globalTimeout: null,
              instanceId: null,
              version: "2.33.0"
            };
            t.exports = n;
          }, {}]
        }, {}, [28]);
        /* eslint-enable */

        scriptAdded = true;
      }
    }
  };

  var registerModuleWithAdFuel = function registerModuleWithAdFuel(config) {
    if (!window.AdFuelUtils.isIntl()) {
      logger.log('Registering module with AdFuel');
      window.AdFuel.registerModule(MODULE_NAME, {}, MODULE_VERSION, config);
      includeIndexIdentityWrapper(config.IDENTITY || '');
    }
  };

  var init = function init(opts) {
    var initPromise = new Promise(function (resolve) {
      // Get the config values for the module
      // NOTE: Replace MODULE_KEY with a value for the module.  ex: IAS or PREBID
      var moduleConfig = opts.IX; // Define the logger and set the debug key used for the module.
      // NOTE: Replace 'MODULE-KEY' with a value for the module.  ex: 'ias' or 'prebid'

      logger = window.AdFuelUtils.getLogger(MODULE_NAME, MODULE_VERSION, 'ix', 'color: #d2b000; padding: 2px', moduleConfig.DEBUG);
      logger.log('Initializing Module...'); // Do any initialization logic here

      if (window.AdFuel) {
        // AdFuel is already loaded... register module
        registerModuleWithAdFuel(moduleConfig);
      } else {
        // Wait for AdFuel then register module
        window.AdFuelUtils.addEvent(document, 'AdFuelCreated', function () {
          registerModuleWithAdFuel(moduleConfig);
        });
      }

      resolve();
    });
    initPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    return initPromise;
  }; // STANDARD INITIALIZATION WRAPPER...
  // DO NOT MODIFY UNLESS YOU ARE ABSOLUTELY SURE YOU KNOW WHAT YOU ARE DOING


  if (window.AdFuelOptions) {
    if (window.AdFuelOptions.USER_CONSENT.ENABLED) {
      var callInit = function callInit() {
        setTimeout(function () {
          if (window.WM.UserConsent && window.WM.UserConsent.isReady()) {
            if (window.WM.UserConsent.getRegion() === 'ccpa') {
              init(window.AdFuelOptions);
            } else {
              if (initEventSet || window.WM.UserConsent.isOptanonLoaded()) {
                init(window.AdFuelOptions);
              } else {
                window.AdFuelUtils.addEvent(window, 'optanonLoaded', callInit);
                initEventSet = true;
              }
            }
          }
        }, 100);
      };

      if (window.WM && window.WM.UserConsent && window.WM.UserConsent.isReady()) {
        callInit();
      } else {
        window.AdFuelUtils.addEvent(window, 'userConsentReady', callInit);
      }
    } else {
      init(window.AdFuelOptions);
    }
  }

  var index = {
    // You only need to include the callbacks you use here.
    registerModuleWithAdFuel: registerModuleWithAdFuel,
    init: init,
    __NAME__: MODULE_NAME,
    __VERSION__: MODULE_VERSION
  };
  return index;
}); ////////////////////////////////////////////
// AC Prebid for 2.0 (Unminified)
////////////////////////////////////////////


(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof4(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.Prebid = factory());
})(void 0, function () {
  'use strict';
  /* eslint-disable */

  /******/

  (function (modules) {
    // webpackBootstrap

    /******/
    // install a JSONP callback for chunk loading

    /******/
    var parentJsonpFunction = window["pbjsChunk"];
    /******/

    window["pbjsChunk"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {
      /******/
      // add "moreModules" to the modules object,

      /******/
      // then flag all "chunkIds" as loaded and fire callback

      /******/
      var moduleId,
          chunkId,
          i = 0,
          resolves = [],
          result;
      /******/

      for (; i < chunkIds.length; i++) {
        /******/
        chunkId = chunkIds[i];
        /******/

        if (installedChunks[chunkId]) {
          /******/
          resolves.push(installedChunks[chunkId][0]);
          /******/
        }
        /******/


        installedChunks[chunkId] = 0;
        /******/
      }
      /******/


      for (moduleId in moreModules) {
        /******/
        if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
          /******/
          modules[moduleId] = moreModules[moduleId];
          /******/
        }
        /******/

      }
      /******/


      if (parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);
      /******/

      while (resolves.length) {
        /******/
        resolves.shift()();
        /******/
      }
      /******/


      if (executeModules) {
        /******/
        for (i = 0; i < executeModules.length; i++) {
          /******/
          result = __webpack_require__(__webpack_require__.s = executeModules[i]);
          /******/
        }
        /******/

      }
      /******/


      return result;
      /******/
    };
    /******/

    /******/
    // The module cache

    /******/


    var installedModules = {};
    /******/

    /******/
    // objects to store loaded and loading chunks

    /******/

    var installedChunks = {
      /******/
      272: 0
      /******/

    };
    /******/

    /******/
    // The require function

    /******/

    function __webpack_require__(moduleId) {
      /******/

      /******/
      // Check if module is in cache

      /******/
      if (installedModules[moduleId]) {
        /******/
        return installedModules[moduleId].exports;
        /******/
      }
      /******/
      // Create a new module (and put it into the cache)

      /******/


      var module = installedModules[moduleId] = {
        /******/
        i: moduleId,

        /******/
        l: false,

        /******/
        exports: {}
        /******/

      };
      /******/

      /******/
      // Execute the module function

      /******/

      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
      /******/

      /******/
      // Flag the module as loaded

      /******/

      module.l = true;
      /******/

      /******/
      // Return the exports of the module

      /******/

      return module.exports;
      /******/
    }
    /******/

    /******/

    /******/
    // expose the modules object (__webpack_modules__)

    /******/


    __webpack_require__.m = modules;
    /******/

    /******/
    // expose the module cache

    /******/

    __webpack_require__.c = installedModules;
    /******/

    /******/
    // define getter function for harmony exports

    /******/

    __webpack_require__.d = function (exports, name, getter) {
      /******/
      if (!__webpack_require__.o(exports, name)) {
        /******/
        Object.defineProperty(exports, name, {
          /******/
          configurable: false,

          /******/
          enumerable: true,

          /******/
          get: getter
          /******/

        });
        /******/
      }
      /******/

    };
    /******/

    /******/
    // getDefaultExport function for compatibility with non-harmony modules

    /******/


    __webpack_require__.n = function (module) {
      /******/
      var getter = module && module.__esModule ?
      /******/
      function getDefault() {
        return module['default'];
      } :
      /******/
      function getModuleExports() {
        return module;
      };
      /******/

      __webpack_require__.d(getter, 'a', getter);
      /******/


      return getter;
      /******/
    };
    /******/

    /******/
    // Object.prototype.hasOwnProperty.call

    /******/


    __webpack_require__.o = function (object, property) {
      return Object.prototype.hasOwnProperty.call(object, property);
    };
    /******/

    /******/
    // __webpack_public_path__

    /******/


    __webpack_require__.p = "";
    /******/

    /******/
    // on error function for async loading

    /******/

    __webpack_require__.oe = function (err) {
      console.error(err);
      throw err;
    };
    /******/

    /******/
    // Load entry module and return exports

    /******/


    return __webpack_require__(__webpack_require__.s = 681);
    /******/
  })(
  /************************************************************************/

  /******/
  {
    /***/
    0:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "internal", function () {
        return internal;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "bind", function () {
        return bind;
      });
      /* harmony export (immutable) */


      __webpack_exports__["replaceTokenInString"] = replaceTokenInString;
      /* harmony export (immutable) */

      __webpack_exports__["getUniqueIdentifierStr"] = getUniqueIdentifierStr;
      /* harmony export (immutable) */

      __webpack_exports__["generateUUID"] = generateUUID;
      /* harmony export (immutable) */

      __webpack_exports__["getBidIdParameter"] = getBidIdParameter;
      /* harmony export (immutable) */

      __webpack_exports__["tryAppendQueryString"] = tryAppendQueryString;
      /* harmony export (immutable) */

      __webpack_exports__["parseQueryStringParameters"] = parseQueryStringParameters;
      /* harmony export (immutable) */

      __webpack_exports__["transformAdServerTargetingObj"] = transformAdServerTargetingObj;
      /* harmony export (immutable) */

      __webpack_exports__["getAdUnitSizes"] = getAdUnitSizes;
      /* harmony export (immutable) */

      __webpack_exports__["parseSizesInput"] = parseSizesInput;
      /* harmony export (immutable) */

      __webpack_exports__["parseGPTSingleSizeArray"] = parseGPTSingleSizeArray;
      /* harmony export (immutable) */

      __webpack_exports__["parseGPTSingleSizeArrayToRtbSize"] = parseGPTSingleSizeArrayToRtbSize;
      /* harmony export (immutable) */

      __webpack_exports__["getWindowTop"] = getWindowTop;
      /* harmony export (immutable) */

      __webpack_exports__["getWindowSelf"] = getWindowSelf;
      /* harmony export (immutable) */

      __webpack_exports__["getWindowLocation"] = getWindowLocation;
      /* harmony export (immutable) */

      __webpack_exports__["logMessage"] = logMessage;
      /* harmony export (immutable) */

      __webpack_exports__["logInfo"] = logInfo;
      /* harmony export (immutable) */

      __webpack_exports__["logWarn"] = logWarn;
      /* harmony export (immutable) */

      __webpack_exports__["logError"] = logError;
      /* harmony export (immutable) */

      __webpack_exports__["hasConsoleLogger"] = hasConsoleLogger;
      /* harmony export (immutable) */

      __webpack_exports__["debugTurnedOn"] = debugTurnedOn;
      /* harmony export (immutable) */

      __webpack_exports__["createInvisibleIframe"] = createInvisibleIframe;
      /* harmony export (immutable) */

      __webpack_exports__["getParameterByName"] = getParameterByName;
      /* harmony export (immutable) */

      __webpack_exports__["hasValidBidRequest"] = hasValidBidRequest;
      /* harmony export (immutable) */

      __webpack_exports__["addEventHandler"] = addEventHandler;
      /* harmony export (immutable) */

      __webpack_exports__["isA"] = isA;
      /* harmony export (immutable) */

      __webpack_exports__["isFn"] = isFn;
      /* harmony export (immutable) */

      __webpack_exports__["isStr"] = isStr;
      /* harmony export (immutable) */

      __webpack_exports__["isArray"] = isArray;
      /* harmony export (immutable) */

      __webpack_exports__["isNumber"] = isNumber;
      /* harmony export (immutable) */

      __webpack_exports__["isPlainObject"] = isPlainObject;
      /* harmony export (immutable) */

      __webpack_exports__["isBoolean"] = isBoolean;
      /* harmony export (immutable) */

      __webpack_exports__["isEmpty"] = isEmpty;
      /* harmony export (immutable) */

      __webpack_exports__["isEmptyStr"] = isEmptyStr;
      /* harmony export (immutable) */

      __webpack_exports__["_each"] = _each;
      /* harmony export (immutable) */

      __webpack_exports__["contains"] = contains;
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "indexOf", function () {
        return indexOf;
      });
      /* harmony export (immutable) */


      __webpack_exports__["_map"] = _map;
      /* harmony export (immutable) */

      __webpack_exports__["hasOwn"] = hasOwn;
      /* harmony export (immutable) */

      __webpack_exports__["insertElement"] = insertElement;
      /* harmony export (immutable) */

      __webpack_exports__["triggerPixel"] = triggerPixel;
      /* harmony export (immutable) */

      __webpack_exports__["callBurl"] = callBurl;
      /* harmony export (immutable) */

      __webpack_exports__["insertHtmlIntoIframe"] = insertHtmlIntoIframe;
      /* harmony export (immutable) */

      __webpack_exports__["insertUserSyncIframe"] = insertUserSyncIframe;
      /* harmony export (immutable) */

      __webpack_exports__["createTrackPixelHtml"] = createTrackPixelHtml;
      /* harmony export (immutable) */

      __webpack_exports__["createTrackPixelIframeHtml"] = createTrackPixelIframeHtml;
      /* harmony export (immutable) */

      __webpack_exports__["getIframeDocument"] = getIframeDocument;
      /* harmony export (immutable) */

      __webpack_exports__["getValueString"] = getValueString;
      /* harmony export (immutable) */

      __webpack_exports__["uniques"] = uniques;
      /* harmony export (immutable) */

      __webpack_exports__["flatten"] = flatten;
      /* harmony export (immutable) */

      __webpack_exports__["getBidRequest"] = getBidRequest;
      /* harmony export (immutable) */

      __webpack_exports__["getKeys"] = getKeys;
      /* harmony export (immutable) */

      __webpack_exports__["getValue"] = getValue;
      /* harmony export (immutable) */

      __webpack_exports__["getKeyByValue"] = getKeyByValue;
      /* harmony export (immutable) */

      __webpack_exports__["getBidderCodes"] = getBidderCodes;
      /* harmony export (immutable) */

      __webpack_exports__["isGptPubadsDefined"] = isGptPubadsDefined;
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "getHighestCpm", function () {
        return getHighestCpm;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getOldestHighestCpmBid", function () {
        return getOldestHighestCpmBid;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "getLatestHighestCpmBid", function () {
        return getLatestHighestCpmBid;
      });
      /* harmony export (immutable) */


      __webpack_exports__["shuffle"] = shuffle;
      /* harmony export (immutable) */

      __webpack_exports__["adUnitsFilter"] = adUnitsFilter;
      /* harmony export (immutable) */

      __webpack_exports__["isSrcdocSupported"] = isSrcdocSupported;
      /* harmony export (immutable) */

      __webpack_exports__["deepClone"] = deepClone;
      /* harmony export (immutable) */

      __webpack_exports__["inIframe"] = inIframe;
      /* harmony export (immutable) */

      __webpack_exports__["isSafariBrowser"] = isSafariBrowser;
      /* harmony export (immutable) */

      __webpack_exports__["replaceAuctionPrice"] = replaceAuctionPrice;
      /* harmony export (immutable) */

      __webpack_exports__["timestamp"] = timestamp;
      /* harmony export (immutable) */

      __webpack_exports__["hasDeviceAccess"] = hasDeviceAccess;
      /* harmony export (immutable) */

      __webpack_exports__["checkCookieSupport"] = checkCookieSupport;
      /* harmony export (immutable) */

      __webpack_exports__["cookiesAreEnabled"] = cookiesAreEnabled;
      /* harmony export (immutable) */

      __webpack_exports__["getCookie"] = getCookie;
      /* harmony export (immutable) */

      __webpack_exports__["setCookie"] = setCookie;
      /* harmony export (immutable) */

      __webpack_exports__["findSimilarCookies"] = findSimilarCookies;
      /* harmony export (immutable) */

      __webpack_exports__["localStorageIsEnabled"] = localStorageIsEnabled;
      /* harmony export (immutable) */

      __webpack_exports__["delayExecution"] = delayExecution;
      /* harmony export (immutable) */

      __webpack_exports__["groupBy"] = groupBy;
      /* harmony export (immutable) */

      __webpack_exports__["createContentToExecuteExtScriptInFriendlyFrame"] = createContentToExecuteExtScriptInFriendlyFrame;
      /* harmony export (immutable) */

      __webpack_exports__["getDefinedParams"] = getDefinedParams;
      /* harmony export (immutable) */

      __webpack_exports__["isValidMediaTypes"] = isValidMediaTypes;
      /* harmony export (immutable) */

      __webpack_exports__["getBidderRequest"] = getBidderRequest;
      /* harmony export (immutable) */

      __webpack_exports__["getUserConfiguredParams"] = getUserConfiguredParams;
      /* harmony export (immutable) */

      __webpack_exports__["getOrigin"] = getOrigin;
      /* harmony export (immutable) */

      __webpack_exports__["getDNT"] = getDNT;
      /* harmony export (immutable) */

      __webpack_exports__["isAdUnitCodeMatchingSlot"] = isAdUnitCodeMatchingSlot;
      /* harmony export (immutable) */

      __webpack_exports__["isSlotMatchingAdUnitCode"] = isSlotMatchingAdUnitCode;
      /* harmony export (immutable) */

      __webpack_exports__["unsupportedBidderMessage"] = unsupportedBidderMessage;
      /* harmony export (immutable) */

      __webpack_exports__["deletePropertyFromObject"] = deletePropertyFromObject;
      /* harmony export (immutable) */

      __webpack_exports__["isInteger"] = isInteger;
      /* harmony export (immutable) */

      __webpack_exports__["convertCamelToUnderscore"] = convertCamelToUnderscore;
      /* harmony export (immutable) */

      __webpack_exports__["cleanObj"] = cleanObj;
      /* harmony export (immutable) */

      __webpack_exports__["pick"] = pick;
      /* harmony export (immutable) */

      __webpack_exports__["transformBidderParamKeywords"] = transformBidderParamKeywords;
      /* harmony export (immutable) */

      __webpack_exports__["convertTypes"] = convertTypes;
      /* harmony export (immutable) */

      __webpack_exports__["setDataInLocalStorage"] = setDataInLocalStorage;
      /* harmony export (immutable) */

      __webpack_exports__["getDataFromLocalStorage"] = getDataFromLocalStorage;
      /* harmony export (immutable) */

      __webpack_exports__["removeDataFromLocalStorage"] = removeDataFromLocalStorage;
      /* harmony export (immutable) */

      __webpack_exports__["hasLocalStorage"] = hasLocalStorage;
      /* harmony export (immutable) */

      __webpack_exports__["isArrayOfNums"] = isArrayOfNums;
      /* harmony export (immutable) */

      __webpack_exports__["fill"] = fill;
      /* harmony export (immutable) */

      __webpack_exports__["chunk"] = chunk;
      /* harmony export (immutable) */

      __webpack_exports__["getMinValueFromArray"] = getMinValueFromArray;
      /* harmony export (immutable) */

      __webpack_exports__["getMaxValueFromArray"] = getMaxValueFromArray;
      /* harmony export (immutable) */

      __webpack_exports__["compareOn"] = compareOn;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_just_clone__ = __webpack_require__(115);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_just_clone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_just_clone__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_find_js__ = __webpack_require__(12);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_find_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_find_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_includes_js__ = __webpack_require__(11);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_includes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_includes_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4_dlv_index_js__ = __webpack_require__(116);
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "deepAccess", function () {
        return __WEBPACK_IMPORTED_MODULE_4_dlv_index_js__["a"];
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5_dset__ = __webpack_require__(117);
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "deepSetValue", function () {
        return __WEBPACK_IMPORTED_MODULE_5_dset__["a"];
      });

      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance");
      }

      function _iterableToArray(iter) {
        if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        }
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }
      /* eslint-disable no-console */


      var CONSTANTS = __webpack_require__(5);

      var tArr = 'Array';
      var tStr = 'String';
      var tFn = 'Function';
      var tNumb = 'Number';
      var tObject = 'Object';
      var tBoolean = 'Boolean';
      var toString = Object.prototype.toString;
      var consoleExists = Boolean(window.console);
      var consoleLogExists = Boolean(consoleExists && window.console.log);
      var consoleInfoExists = Boolean(consoleExists && window.console.info);
      var consoleWarnExists = Boolean(consoleExists && window.console.warn);
      var consoleErrorExists = Boolean(consoleExists && window.console.error); // this allows stubbing of utility functions that are used internally by other utility functions

      var internal = {
        checkCookieSupport: checkCookieSupport,
        createTrackPixelIframeHtml: createTrackPixelIframeHtml,
        getWindowSelf: getWindowSelf,
        getWindowTop: getWindowTop,
        getWindowLocation: getWindowLocation,
        insertUserSyncIframe: insertUserSyncIframe,
        insertElement: insertElement,
        isFn: isFn,
        triggerPixel: triggerPixel,
        logError: logError,
        logWarn: logWarn,
        logMessage: logMessage,
        logInfo: logInfo
      };
      var uniqueRef = {};
      var bind = function (a, b) {
        return b;
      }.bind(null, 1, uniqueRef)() === uniqueRef ? Function.prototype.bind : function (bind) {
        var self = this;
        var args = Array.prototype.slice.call(arguments, 1);
        return function () {
          return self.apply(bind, args.concat(Array.prototype.slice.call(arguments)));
        };
      };
      /*
       *   Substitutes into a string from a given map using the token
       *   Usage
       *   var str = 'text %%REPLACE%% this text with %%SOMETHING%%';
       *   var map = {};
       *   map['replace'] = 'it was subbed';
       *   map['something'] = 'something else';
       *   console.log(replaceTokenInString(str, map, '%%')); => "text it was subbed this text with something else"
       */

      function replaceTokenInString(str, map, token) {
        _each(map, function (value, key) {
          value = value === undefined ? '' : value;
          var keyString = token + key.toUpperCase() + token;
          var re = new RegExp(keyString, 'g');
          str = str.replace(re, value);
        });

        return str;
      }
      /* utility method to get incremental integer starting from 1 */


      var getIncrementalInteger = function () {
        var count = 0;
        return function () {
          count++;
          return count;
        };
      }(); // generate a random string (to be used as a dynamic JSONP callback)


      function getUniqueIdentifierStr() {
        return getIncrementalInteger() + Math.random().toString(16).substr(2);
      }
      /**
       * Returns a random v4 UUID of the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx,
       * where each x is replaced with a random hexadecimal digit from 0 to f,
       * and y is replaced with a random hexadecimal digit from 8 to b.
       * https://gist.github.com/jed/982883 via node-uuid
       */


      function generateUUID(placeholder) {
        return placeholder ? (placeholder ^ _getRandomData() >> placeholder / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, generateUUID);
      }
      /**
       * Returns random data using the Crypto API if available and Math.random if not
       * Method is from https://gist.github.com/jed/982883 like generateUUID, direct link https://gist.github.com/jed/982883#gistcomment-45104
       */


      function _getRandomData() {
        if (window && window.crypto && window.crypto.getRandomValues) {
          return crypto.getRandomValues(new Uint8Array(1))[0] % 16;
        } else {
          return Math.random() * 16;
        }
      }

      function getBidIdParameter(key, paramsObj) {
        if (paramsObj && paramsObj[key]) {
          return paramsObj[key];
        }

        return '';
      }

      function tryAppendQueryString(existingUrl, key, value) {
        if (value) {
          return existingUrl += key + '=' + encodeURIComponent(value) + '&';
        }

        return existingUrl;
      } // parse a query string object passed in bid params
      // bid params should be an object such as {key: "value", key1 : "value1"}


      function parseQueryStringParameters(queryObj) {
        var result = '';

        for (var k in queryObj) {
          if (queryObj.hasOwnProperty(k)) {
            result += k + '=' + encodeURIComponent(queryObj[k]) + '&';
          }
        }

        return result;
      } // transform an AdServer targeting bids into a query string to send to the adserver


      function transformAdServerTargetingObj(targeting) {
        // we expect to receive targeting for a single slot at a time
        if (targeting && Object.getOwnPropertyNames(targeting).length > 0) {
          return getKeys(targeting).map(function (key) {
            return "".concat(key, "=").concat(encodeURIComponent(getValue(targeting, key)));
          }).join('&');
        } else {
          return '';
        }
      }
      /**
       * Read an adUnit object and return the sizes used in an [[728, 90]] format (even if they had [728, 90] defined)
       * Preference is given to the `adUnit.mediaTypes.banner.sizes` object over the `adUnit.sizes`
       * @param {object} adUnit one adUnit object from the normal list of adUnits
       * @returns {Array.<number[]>} array of arrays containing numeric sizes
       */


      function getAdUnitSizes(adUnit) {
        if (!adUnit) {
          return;
        }

        var sizes = [];

        if (adUnit.mediaTypes && adUnit.mediaTypes.banner && Array.isArray(adUnit.mediaTypes.banner.sizes)) {
          var bannerSizes = adUnit.mediaTypes.banner.sizes;

          if (Array.isArray(bannerSizes[0])) {
            sizes = bannerSizes;
          } else {
            sizes.push(bannerSizes);
          } // TODO - remove this else block when we're ready to deprecate adUnit.sizes for bidders

        } else if (Array.isArray(adUnit.sizes)) {
          if (Array.isArray(adUnit.sizes[0])) {
            sizes = adUnit.sizes;
          } else {
            sizes.push(adUnit.sizes);
          }
        }

        return sizes;
      }
      /**
       * Parse a GPT-Style general size Array like `[[300, 250]]` or `"300x250,970x90"` into an array of sizes `["300x250"]` or '['300x250', '970x90']'
       * @param  {(Array.<number[]>|Array.<number>)} sizeObj Input array or double array [300,250] or [[300,250], [728,90]]
       * @return {Array.<string>}  Array of strings like `["300x250"]` or `["300x250", "728x90"]`
       */


      function parseSizesInput(sizeObj) {
        var parsedSizes = []; // if a string for now we can assume it is a single size, like "300x250"

        if (typeof sizeObj === 'string') {
          // multiple sizes will be comma-separated
          var sizes = sizeObj.split(','); // regular expression to match strigns like 300x250
          // start of line, at least 1 number, an "x" , then at least 1 number, and the then end of the line

          var sizeRegex = /^(\d)+x(\d)+$/i;

          if (sizes) {
            for (var curSizePos in sizes) {
              if (hasOwn(sizes, curSizePos) && sizes[curSizePos].match(sizeRegex)) {
                parsedSizes.push(sizes[curSizePos]);
              }
            }
          }
        } else if (_typeof(sizeObj) === 'object') {
          var sizeArrayLength = sizeObj.length; // don't process empty array

          if (sizeArrayLength > 0) {
            // if we are a 2 item array of 2 numbers, we must be a SingleSize array
            if (sizeArrayLength === 2 && typeof sizeObj[0] === 'number' && typeof sizeObj[1] === 'number') {
              parsedSizes.push(parseGPTSingleSizeArray(sizeObj));
            } else {
              // otherwise, we must be a MultiSize array
              for (var i = 0; i < sizeArrayLength; i++) {
                parsedSizes.push(parseGPTSingleSizeArray(sizeObj[i]));
              }
            }
          }
        }

        return parsedSizes;
      } // Parse a GPT style single size array, (i.e [300, 250])
      // into an AppNexus style string, (i.e. 300x250)


      function parseGPTSingleSizeArray(singleSize) {
        if (isValidGPTSingleSize(singleSize)) {
          return singleSize[0] + 'x' + singleSize[1];
        }
      } // Parse a GPT style single size array, (i.e [300, 250])
      // into OpenRTB-compatible (imp.banner.w/h, imp.banner.format.w/h, imp.video.w/h) object(i.e. {w:300, h:250})


      function parseGPTSingleSizeArrayToRtbSize(singleSize) {
        if (isValidGPTSingleSize(singleSize)) {
          return {
            w: singleSize[0],
            h: singleSize[1]
          };
        }
      }

      function isValidGPTSingleSize(singleSize) {
        // if we aren't exactly 2 items in this array, it is invalid
        return isArray(singleSize) && singleSize.length === 2 && !isNaN(singleSize[0]) && !isNaN(singleSize[1]);
      }

      function getWindowTop() {
        return window.top;
      }

      function getWindowSelf() {
        return window.self;
      }

      function getWindowLocation() {
        return window.location;
      }
      /**
       * Wrappers to console.(log | info | warn | error). Takes N arguments, the same as the native methods
       */


      function logMessage() {
        if (debugTurnedOn() && consoleLogExists) {
          console.log.apply(console, decorateLog(arguments, 'MESSAGE:'));
        }
      }

      function logInfo() {
        if (debugTurnedOn() && consoleInfoExists) {
          console.info.apply(console, decorateLog(arguments, 'INFO:'));
        }
      }

      function logWarn() {
        if (debugTurnedOn() && consoleWarnExists) {
          console.warn.apply(console, decorateLog(arguments, 'WARNING:'));
        }
      }

      function logError() {
        if (debugTurnedOn() && consoleErrorExists) {
          console.error.apply(console, decorateLog(arguments, 'ERROR:'));
        }
      }

      function decorateLog(args, prefix) {
        args = [].slice.call(args);
        prefix && args.unshift(prefix);
        args.unshift('display: inline-block; color: #fff; background: #3b88c3; padding: 1px 4px; border-radius: 3px;');
        args.unshift('%cPrebid');
        return args;
      }

      function hasConsoleLogger() {
        return consoleLogExists;
      }

      function debugTurnedOn() {
        return !!__WEBPACK_IMPORTED_MODULE_0__config_js__["b"
        /* config */
        ].getConfig('debug');
      }

      function createInvisibleIframe() {
        var f = document.createElement('iframe');
        f.id = getUniqueIdentifierStr();
        f.height = 0;
        f.width = 0;
        f.border = '0px';
        f.hspace = '0';
        f.vspace = '0';
        f.marginWidth = '0';
        f.marginHeight = '0';
        f.style.border = '0';
        f.scrolling = 'no';
        f.frameBorder = '0';
        f.src = 'about:blank';
        f.style.display = 'none';
        return f;
      }
      /*
       *   Check if a given parameter name exists in query string
       *   and if it does return the value
       */


      function getParameterByName(name) {
        var regexS = '[\\?&]' + name + '=([^&#]*)';
        var regex = new RegExp(regexS);
        var results = regex.exec(window.location.search);

        if (results === null) {
          return '';
        }

        return decodeURIComponent(results[1].replace(/\+/g, ' '));
      }
      /**
       * This function validates paramaters.
       * @param  {Object} paramObj          [description]
       * @param  {string[]} requiredParamsArr [description]
       * @return {boolean}                   Bool if paramaters are valid
       */


      function hasValidBidRequest(paramObj, requiredParamsArr, adapter) {
        var found = false;

        function findParam(value, key) {
          if (key === requiredParamsArr[i]) {
            found = true;
          }
        }

        for (var i = 0; i < requiredParamsArr.length; i++) {
          found = false;

          _each(paramObj, findParam);

          if (!found) {
            logError('Params are missing for bid request. One of these required paramaters are missing: ' + requiredParamsArr, adapter);
            return false;
          }
        }

        return true;
      } // Handle addEventListener gracefully in older browsers


      function addEventHandler(element, event, func) {
        if (element.addEventListener) {
          element.addEventListener(event, func, true);
        } else if (element.attachEvent) {
          element.attachEvent('on' + event, func);
        }
      }
      /**
       * Return if the object is of the
       * given type.
       * @param {*} object to test
       * @param {String} _t type string (e.g., Array)
       * @return {Boolean} if object is of type _t
       */


      function isA(object, _t) {
        return toString.call(object) === '[object ' + _t + ']';
      }

      function isFn(object) {
        return isA(object, tFn);
      }

      function isStr(object) {
        return isA(object, tStr);
      }

      function isArray(object) {
        return isA(object, tArr);
      }

      function isNumber(object) {
        return isA(object, tNumb);
      }

      function isPlainObject(object) {
        return isA(object, tObject);
      }

      function isBoolean(object) {
        return isA(object, tBoolean);
      }
      /**
       * Return if the object is "empty";
       * this includes falsey, no keys, or no items at indices
       * @param {*} object object to test
       * @return {Boolean} if object is empty
       */


      function isEmpty(object) {
        if (!object) return true;

        if (isArray(object) || isStr(object)) {
          return !(object.length > 0);
        }

        for (var k in object) {
          if (hasOwnProperty.call(object, k)) return false;
        }

        return true;
      }
      /**
       * Return if string is empty, null, or undefined
       * @param str string to test
       * @returns {boolean} if string is empty
       */


      function isEmptyStr(str) {
        return isStr(str) && (!str || str.length === 0);
      }
      /**
       * Iterate object with the function
       * falls back to es5 `forEach`
       * @param {Array|Object} object
       * @param {Function(value, key, object)} fn
       */


      function _each(object, fn) {
        if (isEmpty(object)) return;
        if (isFn(object.forEach)) return object.forEach(fn, this);
        var k = 0;
        var l = object.length;

        if (l > 0) {
          for (; k < l; k++) {
            fn(object[k], k, object);
          }
        } else {
          for (k in object) {
            if (hasOwnProperty.call(object, k)) fn.call(this, object[k], k);
          }
        }
      }

      function contains(a, obj) {
        if (isEmpty(a)) {
          return false;
        }

        if (isFn(a.indexOf)) {
          return a.indexOf(obj) !== -1;
        }

        var i = a.length;

        while (i--) {
          if (a[i] === obj) {
            return true;
          }
        }

        return false;
      }

      var indexOf = function () {
        if (Array.prototype.indexOf) {
          return Array.prototype.indexOf;
        } // ie8 no longer supported
        // return polyfills.indexOf;

      }();
      /**
       * Map an array or object into another array
       * given a function
       * @param {Array|Object} object
       * @param {Function(value, key, object)} callback
       * @return {Array}
       */


      function _map(object, callback) {
        if (isEmpty(object)) return [];
        if (isFn(object.map)) return object.map(callback);
        var output = [];

        _each(object, function (value, key) {
          output.push(callback(value, key, object));
        });

        return output;
      }

      function hasOwn(objectToCheck, propertyToCheckFor) {
        if (objectToCheck.hasOwnProperty) {
          return objectToCheck.hasOwnProperty(propertyToCheckFor);
        } else {
          return typeof objectToCheck[propertyToCheckFor] !== 'undefined' && objectToCheck.constructor.prototype[propertyToCheckFor] !== objectToCheck[propertyToCheckFor];
        }
      }
      /*
      * Inserts an element(elm) as targets child, by default as first child
      * @param {HTMLElement} elm
      * @param {HTMLElement} [doc]
      * @param {HTMLElement} [target]
      * @param {Boolean} [asLastChildChild]
      * @return {HTMLElement}
      */


      function insertElement(elm, doc, target, asLastChildChild) {
        doc = doc || document;
        var parentEl;

        if (target) {
          parentEl = doc.getElementsByTagName(target);
        } else {
          parentEl = doc.getElementsByTagName('head');
        }

        try {
          parentEl = parentEl.length ? parentEl : doc.getElementsByTagName('body');

          if (parentEl.length) {
            parentEl = parentEl[0];
            var insertBeforeEl = asLastChildChild ? null : parentEl.firstChild;
            return parentEl.insertBefore(elm, insertBeforeEl);
          }
        } catch (e) {}
      }
      /**
       * Inserts an image pixel with the specified `url` for cookie sync
       * @param {string} url URL string of the image pixel to load
       * @param  {function} [done] an optional exit callback, used when this usersync pixel is added during an async process
       */


      function triggerPixel(url, done) {
        var img = new Image();

        if (done && internal.isFn(done)) {
          img.addEventListener('load', done);
          img.addEventListener('error', done);
        }

        img.src = url;
      }

      function callBurl(_ref) {
        var source = _ref.source,
            burl = _ref.burl;

        if (source === CONSTANTS.S2S.SRC && burl) {
          internal.triggerPixel(burl);
        }
      }
      /**
       * Inserts an empty iframe with the specified `html`, primarily used for tracking purposes
       * (though could be for other purposes)
       * @param {string} htmlCode snippet of HTML code used for tracking purposes
       */


      function insertHtmlIntoIframe(htmlCode) {
        if (!htmlCode) {
          return;
        }

        var iframe = document.createElement('iframe');
        iframe.id = getUniqueIdentifierStr();
        iframe.width = 0;
        iframe.height = 0;
        iframe.hspace = '0';
        iframe.vspace = '0';
        iframe.marginWidth = '0';
        iframe.marginHeight = '0';
        iframe.style.display = 'none';
        iframe.style.height = '0px';
        iframe.style.width = '0px';
        iframe.scrolling = 'no';
        iframe.frameBorder = '0';
        iframe.allowtransparency = 'true';
        internal.insertElement(iframe, document, 'body');
        iframe.contentWindow.document.open();
        iframe.contentWindow.document.write(htmlCode);
        iframe.contentWindow.document.close();
      }
      /**
       * Inserts empty iframe with the specified `url` for cookie sync
       * @param  {string} url URL to be requested
       * @param  {string} encodeUri boolean if URL should be encoded before inserted. Defaults to true
       * @param  {function} [done] an optional exit callback, used when this usersync pixel is added during an async process
       */


      function insertUserSyncIframe(url, done) {
        var iframeHtml = internal.createTrackPixelIframeHtml(url, false, 'allow-scripts allow-same-origin');
        var div = document.createElement('div');
        div.innerHTML = iframeHtml;
        var iframe = div.firstChild;

        if (done && internal.isFn(done)) {
          iframe.addEventListener('load', done);
          iframe.addEventListener('error', done);
        }

        internal.insertElement(iframe, document, 'html', true);
      }
      /**
       * Creates a snippet of HTML that retrieves the specified `url`
       * @param  {string} url URL to be requested
       * @return {string}     HTML snippet that contains the img src = set to `url`
       */


      function createTrackPixelHtml(url) {
        if (!url) {
          return '';
        }

        var escapedUrl = encodeURI(url);
        var img = '<div style="position:absolute;left:0px;top:0px;visibility:hidden;">';
        img += '<img src="' + escapedUrl + '"></div>';
        return img;
      }
      /**
       * Creates a snippet of Iframe HTML that retrieves the specified `url`
       * @param  {string} url plain URL to be requested
       * @param  {string} encodeUri boolean if URL should be encoded before inserted. Defaults to true
       * @param  {string} sandbox string if provided the sandbox attribute will be included with the given value
       * @return {string}     HTML snippet that contains the iframe src = set to `url`
       */


      function createTrackPixelIframeHtml(url) {
        var encodeUri = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var sandbox = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

        if (!url) {
          return '';
        }

        if (encodeUri) {
          url = encodeURI(url);
        }

        if (sandbox) {
          sandbox = "sandbox=\"".concat(sandbox, "\"");
        }

        return "<iframe ".concat(sandbox, " id=\"").concat(getUniqueIdentifierStr(), "\"\n      frameborder=\"0\"\n      allowtransparency=\"true\"\n      marginheight=\"0\" marginwidth=\"0\"\n      width=\"0\" hspace=\"0\" vspace=\"0\" height=\"0\"\n      style=\"height:0px;width:0px;display:none;\"\n      scrolling=\"no\"\n      src=\"").concat(url, "\">\n    </iframe>");
      }
      /**
       * Returns iframe document in a browser agnostic way
       * @param  {Object} iframe reference
       * @return {Object}        iframe `document` reference
       */


      function getIframeDocument(iframe) {
        if (!iframe) {
          return;
        }

        var doc;

        try {
          if (iframe.contentWindow) {
            doc = iframe.contentWindow.document;
          } else if (iframe.contentDocument.document) {
            doc = iframe.contentDocument.document;
          } else {
            doc = iframe.contentDocument;
          }
        } catch (e) {
          internal.logError('Cannot get iframe document', e);
        }

        return doc;
      }

      function getValueString(param, val, defaultValue) {
        if (val === undefined || val === null) {
          return defaultValue;
        }

        if (isStr(val)) {
          return val;
        }

        if (isNumber(val)) {
          return val.toString();
        }

        internal.logWarn('Unsuported type for param: ' + param + ' required type: String');
      }

      function uniques(value, index, arry) {
        return arry.indexOf(value) === index;
      }

      function flatten(a, b) {
        return a.concat(b);
      }

      function getBidRequest(id, bidderRequests) {
        if (!id) {
          return;
        }

        var bidRequest;
        bidderRequests.some(function (bidderRequest) {
          var result = __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_find_js___default()(bidderRequest.bids, function (bid) {
            return ['bidId', 'adId', 'bid_id'].some(function (type) {
              return bid[type] === id;
            });
          });

          if (result) {
            bidRequest = result;
          }

          return result;
        });
        return bidRequest;
      }

      function getKeys(obj) {
        return Object.keys(obj);
      }

      function getValue(obj, key) {
        return obj[key];
      }
      /**
       * Get the key of an object for a given value
       */


      function getKeyByValue(obj, value) {
        for (var prop in obj) {
          if (obj.hasOwnProperty(prop)) {
            if (obj[prop] === value) {
              return prop;
            }
          }
        }
      }

      function getBidderCodes() {
        var adUnits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : pbjs.adUnits; // this could memoize adUnits

        return adUnits.map(function (unit) {
          return unit.bids.map(function (bid) {
            return bid.bidder;
          }).reduce(flatten, []);
        }).reduce(flatten).filter(uniques);
      }

      function isGptPubadsDefined() {
        if (window.googletag && isFn(window.googletag.pubads) && isFn(window.googletag.pubads().getSlots)) {
          return true;
        }
      } // This function will get highest cpm value bid, in case of tie it will return the bid with lowest timeToRespond


      var getHighestCpm = getHighestCpmCallback('timeToRespond', function (previous, current) {
        return previous > current;
      }); // This function will get the oldest hightest cpm value bid, in case of tie it will return the bid which came in first
      // Use case for tie: https://github.com/prebid/Prebid.js/issues/2448

      var getOldestHighestCpmBid = getHighestCpmCallback('responseTimestamp', function (previous, current) {
        return previous > current;
      }); // This function will get the latest hightest cpm value bid, in case of tie it will return the bid which came in last
      // Use case for tie: https://github.com/prebid/Prebid.js/issues/2539

      var getLatestHighestCpmBid = getHighestCpmCallback('responseTimestamp', function (previous, current) {
        return previous < current;
      });

      function getHighestCpmCallback(useTieBreakerProperty, tieBreakerCallback) {
        return function (previous, current) {
          if (previous.cpm === current.cpm) {
            return tieBreakerCallback(previous[useTieBreakerProperty], current[useTieBreakerProperty]) ? current : previous;
          }

          return previous.cpm < current.cpm ? current : previous;
        };
      }
      /**
       * Fisher–Yates shuffle
       * http://stackoverflow.com/a/6274398
       * https://bost.ocks.org/mike/shuffle/
       * istanbul ignore next
       */


      function shuffle(array) {
        var counter = array.length; // while there are elements in the array

        while (counter > 0) {
          // pick a random index
          var index = Math.floor(Math.random() * counter); // decrease counter by 1

          counter--; // and swap the last element with it

          var temp = array[counter];
          array[counter] = array[index];
          array[index] = temp;
        }

        return array;
      }

      function adUnitsFilter(filter, bid) {
        return __WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_includes_js___default()(filter, bid && bid.adUnitCode);
      }
      /**
       * Check if parent iframe of passed document supports content rendering via 'srcdoc' property
       * @param {HTMLDocument} doc document to check support of 'srcdoc'
       */


      function isSrcdocSupported(doc) {
        // Firefox is excluded due to https://bugzilla.mozilla.org/show_bug.cgi?id=1265961
        return doc.defaultView && doc.defaultView.frameElement && 'srcdoc' in doc.defaultView.frameElement && !/firefox/i.test(navigator.userAgent);
      }

      function deepClone(obj) {
        return __WEBPACK_IMPORTED_MODULE_1_just_clone___default()(obj);
      }

      function inIframe() {
        try {
          return internal.getWindowSelf() !== internal.getWindowTop();
        } catch (e) {
          return true;
        }
      }

      function isSafariBrowser() {
        return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
      }

      function replaceAuctionPrice(str, cpm) {
        if (!str) return;
        return str.replace(/\$\{AUCTION_PRICE\}/g, cpm);
      }

      function timestamp() {
        return new Date().getTime();
      }
      /**
       * When the deviceAccess flag config option is false, no cookies should be read or set
       * @returns {boolean}
       */


      function hasDeviceAccess() {
        return __WEBPACK_IMPORTED_MODULE_0__config_js__["b"
        /* config */
        ].getConfig('deviceAccess') !== false;
      }
      /**
       * @returns {(boolean|undefined)}
       */


      function checkCookieSupport() {
        if (window.navigator.cookieEnabled || !!document.cookie.length) {
          return true;
        }
      }
      /**
       * @returns {boolean}
       */


      function cookiesAreEnabled() {
        if (hasDeviceAccess()) {
          if (internal.checkCookieSupport()) {
            return true;
          }

          window.document.cookie = 'prebid.cookieTest';
          return window.document.cookie.indexOf('prebid.cookieTest') !== -1;
        }

        return false;
      }
      /**
       * @param {string} name
       * @returns {(string|null)}
       */


      function getCookie(name) {
        if (hasDeviceAccess()) {
          var m = window.document.cookie.match('(^|;)\\s*' + name + '\\s*=\\s*([^;]*)\\s*(;|$)');
          return m ? decodeURIComponent(m[2]) : null;
        }

        return null;
      }
      /**
       * @param {string} key
       * @param {string} value
       * @param {string} [expires='']
       * @param {string} [sameSite='/']
       * @param {string} [domain] domain (e.g., 'example.com' or 'subdomain.example.com').
       * If not specified, defaults to the host portion of the current document location.
       * If a domain is specified, subdomains are always included.
       * Domain must match the domain of the JavaScript origin. Setting cookies to foreign domains will be silently ignored.
       */


      function setCookie(key, value, expires, sameSite, domain) {
        if (hasDeviceAccess()) {
          var domainPortion = domain && domain !== '' ? " ;domain=".concat(encodeURIComponent(domain)) : '';
          var expiresPortion = expires && expires !== '' ? " ;expires=".concat(expires) : '';
          document.cookie = "".concat(key, "=").concat(encodeURIComponent(value)).concat(expiresPortion, "; path=/").concat(domainPortion).concat(sameSite ? "; SameSite=".concat(sameSite) : '');
        }
      }
      /**
       * Returns all cookie values from the jar whose names contain the `keyLike`
       * Needs to exist in `utils.js` as it follows the StorageHandler interface defined in live-connect-js. If that module were to be removed, this function can go as well.
       * @param {string} keyLike
       * @return {[]}
       */


      function findSimilarCookies(keyLike) {
        var all = [];

        if (hasDeviceAccess()) {
          var cookies = document.cookie.split(';');

          while (cookies.length) {
            var cookie = cookies.pop();
            var separatorIndex = cookie.indexOf('=');
            separatorIndex = separatorIndex < 0 ? cookie.length : separatorIndex;
            var cookieName = decodeURIComponent(cookie.slice(0, separatorIndex).replace(/^\s+/, ''));

            if (cookieName.indexOf(keyLike) >= 0) {
              all.push(decodeURIComponent(cookie.slice(separatorIndex + 1)));
            }
          }
        }

        return all;
      }
      /**
       * @returns {boolean}
       */


      function localStorageIsEnabled() {
        if (hasDeviceAccess()) {
          try {
            localStorage.setItem('prebid.cookieTest', '1');
            return localStorage.getItem('prebid.cookieTest') === '1';
          } catch (error) {}
        }

        return false;
      }
      /**
       * Given a function, return a function which only executes the original after
       * it's been called numRequiredCalls times.
       *
       * Note that the arguments from the previous calls will *not* be forwarded to the original function.
       * Only the final call's arguments matter.
       *
       * @param {function} func The function which should be executed, once the returned function has been executed
       *   numRequiredCalls times.
       * @param {int} numRequiredCalls The number of times which the returned function needs to be called before
       *   func is.
       */


      function delayExecution(func, numRequiredCalls) {
        if (numRequiredCalls < 1) {
          throw new Error("numRequiredCalls must be a positive number. Got ".concat(numRequiredCalls));
        }

        var numCalls = 0;
        return function () {
          numCalls++;

          if (numCalls === numRequiredCalls) {
            func.apply(this, arguments);
          }
        };
      }
      /**
       * https://stackoverflow.com/a/34890276/428704
       * @export
       * @param {array} xs
       * @param {string} key
       * @returns {Object} {${key_value}: ${groupByArray}, key_value: {groupByArray}}
       */


      function groupBy(xs, key) {
        return xs.reduce(function (rv, x) {
          (rv[x[key]] = rv[x[key]] || []).push(x);
          return rv;
        }, {});
      }
      /**
       * Returns content for a friendly iframe to execute a URL in script tag
       * @param {string} url URL to be executed in a script tag in a friendly iframe
       * <!--PRE_SCRIPT_TAG_MACRO--> and <!--POST_SCRIPT_TAG_MACRO--> are macros left to be replaced if required
       */


      function createContentToExecuteExtScriptInFriendlyFrame(url) {
        if (!url) {
          return '';
        }

        return "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"><html><head><base target=\"_top\" /><script>inDapIF=true;</script></head><body><!--PRE_SCRIPT_TAG_MACRO--><script src=\"".concat(url, "\"></script><!--POST_SCRIPT_TAG_MACRO--></body></html>");
      }
      /**
       * Build an object consisting of only defined parameters to avoid creating an
       * object with defined keys and undefined values.
       * @param {Object} object The object to pick defined params out of
       * @param {string[]} params An array of strings representing properties to look for in the object
       * @returns {Object} An object containing all the specified values that are defined
       */


      function getDefinedParams(object, params) {
        return params.filter(function (param) {
          return object[param];
        }).reduce(function (bid, param) {
          return _extends(bid, _defineProperty({}, param, object[param]));
        }, {});
      }
      /**
       * @typedef {Object} MediaTypes
       * @property {Object} banner banner configuration
       * @property {Object} native native configuration
       * @property {Object} video video configuration
       */

      /**
       * Validates an adunit's `mediaTypes` parameter
       * @param {MediaTypes} mediaTypes mediaTypes parameter to validate
       * @return {boolean} If object is valid
       */


      function isValidMediaTypes(mediaTypes) {
        var SUPPORTED_MEDIA_TYPES = ['banner', 'native', 'video'];
        var SUPPORTED_STREAM_TYPES = ['instream', 'outstream', 'adpod'];
        var types = Object.keys(mediaTypes);

        if (!types.every(function (type) {
          return __WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_includes_js___default()(SUPPORTED_MEDIA_TYPES, type);
        })) {
          return false;
        }

        if (mediaTypes.video && mediaTypes.video.context) {
          return __WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_includes_js___default()(SUPPORTED_STREAM_TYPES, mediaTypes.video.context);
        }

        return true;
      }

      function getBidderRequest(bidRequests, bidder, adUnitCode) {
        return __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_find_js___default()(bidRequests, function (request) {
          return request.bids.filter(function (bid) {
            return bid.bidder === bidder && bid.adUnitCode === adUnitCode;
          }).length > 0;
        }) || {
          start: null,
          auctionId: null
        };
      }
      /**
       * Returns user configured bidder params from adunit
       * @param {Object} adUnits
       * @param {string} adUnitCode code
       * @param {string} bidder code
       * @return {Array} user configured param for the given bidder adunit configuration
       */


      function getUserConfiguredParams(adUnits, adUnitCode, bidder) {
        return adUnits.filter(function (adUnit) {
          return adUnit.code === adUnitCode;
        }).map(function (adUnit) {
          return adUnit.bids;
        }).reduce(flatten, []).filter(function (bidderData) {
          return bidderData.bidder === bidder;
        }).map(function (bidderData) {
          return bidderData.params || {};
        });
      }
      /**
       * Returns the origin
       */


      function getOrigin() {
        // IE10 does not have this property. https://gist.github.com/hbogs/7908703
        if (!window.location.origin) {
          return window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '');
        } else {
          return window.location.origin;
        }
      }
      /**
       * Returns Do Not Track state
       */


      function getDNT() {
        return navigator.doNotTrack === '1' || window.doNotTrack === '1' || navigator.msDoNotTrack === '1' || navigator.doNotTrack === 'yes';
      }

      var compareCodeAndSlot = function compareCodeAndSlot(slot, adUnitCode) {
        return slot.getAdUnitPath() === adUnitCode || slot.getSlotElementId() === adUnitCode;
      };
      /**
       * Returns filter function to match adUnitCode in slot
       * @param {Object} slot GoogleTag slot
       * @return {function} filter function
       */


      function isAdUnitCodeMatchingSlot(slot) {
        return function (adUnitCode) {
          return compareCodeAndSlot(slot, adUnitCode);
        };
      }
      /**
       * Returns filter function to match adUnitCode in slot
       * @param {string} adUnitCode AdUnit code
       * @return {function} filter function
       */


      function isSlotMatchingAdUnitCode(adUnitCode) {
        return function (slot) {
          return compareCodeAndSlot(slot, adUnitCode);
        };
      }
      /**
       * Constructs warning message for when unsupported bidders are dropped from an adunit
       * @param {Object} adUnit ad unit from which the bidder is being dropped
       * @param {string} bidder bidder code that is not compatible with the adUnit
       * @return {string} warning message to display when condition is met
       */


      function unsupportedBidderMessage(adUnit, bidder) {
        var mediaType = Object.keys(adUnit.mediaTypes || {
          'banner': 'banner'
        }).join(', ');
        return "\n    ".concat(adUnit.code, " is a ").concat(mediaType, " ad unit\n    containing bidders that don't support ").concat(mediaType, ": ").concat(bidder, ".\n    This bidder won't fetch demand.\n  ");
      }
      /**
       * Delete property from object
       * @param {Object} object
       * @param {string} prop
       * @return {Object} object
       */


      function deletePropertyFromObject(object, prop) {
        var result = _extends({}, object);

        delete result[prop];
        return result;
      }
      /**
       * Checks input is integer or not
       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
       * @param {*} value
       */


      function isInteger(value) {
        if (Number.isInteger) {
          return Number.isInteger(value);
        } else {
          return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
        }
      }
      /**
       * Converts a string value in camel-case to underscore eg 'placementId' becomes 'placement_id'
       * @param {string} value string value to convert
       */


      function convertCamelToUnderscore(value) {
        return value.replace(/(?:^|\.?)([A-Z])/g, function (x, y) {
          return '_' + y.toLowerCase();
        }).replace(/^_/, '');
      }
      /**
       * Returns a new object with undefined properties removed from given object
       * @param obj the object to clean
       */


      function cleanObj(obj) {
        return Object.keys(obj).reduce(function (newObj, key) {
          if (typeof obj[key] !== 'undefined') {
            newObj[key] = obj[key];
          }

          return newObj;
        }, {});
      }
      /**
       * Create a new object with selected properties.  Also allows property renaming and transform functions.
       * @param obj the original object
       * @param properties An array of desired properties
       */


      function pick(obj, properties) {
        if (_typeof(obj) !== 'object') {
          return {};
        }

        return properties.reduce(function (newObj, prop, i) {
          if (typeof prop === 'function') {
            return newObj;
          }

          var newProp = prop;
          var match = prop.match(/^(.+?)\sas\s(.+?)$/i);

          if (match) {
            prop = match[1];
            newProp = match[2];
          }

          var value = obj[prop];

          if (typeof properties[i + 1] === 'function') {
            value = properties[i + 1](value, newObj);
          }

          if (typeof value !== 'undefined') {
            newObj[newProp] = value;
          }

          return newObj;
        }, {});
      }
      /**
       * Converts an object of arrays (either strings or numbers) into an array of objects containing key and value properties
       * normally read from bidder params
       * eg { foo: ['bar', 'baz'], fizz: ['buzz'] }
       * becomes [{ key: 'foo', value: ['bar', 'baz']}, {key: 'fizz', value: ['buzz']}]
       * @param {Object} keywords object of arrays representing keyvalue pairs
       * @param {string} paramName name of parent object (eg 'keywords') containing keyword data, used in error handling
       */


      function transformBidderParamKeywords(keywords) {
        var paramName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'keywords';
        var arrs = [];

        _each(keywords, function (v, k) {
          if (isArray(v)) {
            var values = [];

            _each(v, function (val) {
              val = getValueString(paramName + '.' + k, val);

              if (val || val === '') {
                values.push(val);
              }
            });

            v = values;
          } else {
            v = getValueString(paramName + '.' + k, v);

            if (isStr(v)) {
              v = [v];
            } else {
              return;
            } // unsuported types - don't send a key

          }

          arrs.push({
            key: k,
            value: v
          });
        });

        return arrs;
      }
      /**
       * Try to convert a value to a type.
       * If it can't be done, the value will be returned.
       *
       * @param {string} typeToConvert The target type. e.g. "string", "number", etc.
       * @param {*} value The value to be converted into typeToConvert.
       */


      function tryConvertType(typeToConvert, value) {
        if (typeToConvert === 'string') {
          return value && value.toString();
        } else if (typeToConvert === 'number') {
          return Number(value);
        } else {
          return value;
        }
      }

      function convertTypes(types, params) {
        Object.keys(types).forEach(function (key) {
          if (params[key]) {
            if (isFn(types[key])) {
              params[key] = types[key](params[key]);
            } else {
              params[key] = tryConvertType(types[key], params[key]);
            } // don't send invalid values


            if (isNaN(params[key])) {
              delete params.key;
            }
          }
        });
        return params;
      }
      /**
       * @param {string} key
       * @param {string} value
       */


      function setDataInLocalStorage(key, value) {
        if (hasLocalStorage()) {
          window.localStorage.setItem(key, value);
        }
      }
      /**
       * @param {string} key
       * @returns {(string|null)}
       */


      function getDataFromLocalStorage(key) {
        if (hasLocalStorage()) {
          return window.localStorage.getItem(key);
        }

        return null;
      }
      /**
       * @param {string} key
       */


      function removeDataFromLocalStorage(key) {
        if (hasLocalStorage()) {
          window.localStorage.removeItem(key);
        }
      }
      /**
       * @returns {boolean}
       */


      function hasLocalStorage() {
        if (hasDeviceAccess()) {
          try {
            return !!window.localStorage;
          } catch (e) {
            logError('Local storage api disabled');
          }
        }

        return false;
      }

      function isArrayOfNums(val, size) {
        return isArray(val) && (size ? val.length === size : true) && val.every(function (v) {
          return isInteger(v);
        });
      }
      /**
       * Creates an array of n length and fills each item with the given value
       */


      function fill(value, length) {
        var newArray = [];

        for (var i = 0; i < length; i++) {
          var valueToPush = isPlainObject(value) ? deepClone(value) : value;
          newArray.push(valueToPush);
        }

        return newArray;
      }
      /**
       * http://npm.im/chunk
       * Returns an array with *size* chunks from given array
       *
       * Example:
       * ['a', 'b', 'c', 'd', 'e'] chunked by 2 =>
       * [['a', 'b'], ['c', 'd'], ['e']]
       */


      function chunk(array, size) {
        var newArray = [];

        for (var i = 0; i < Math.ceil(array.length / size); i++) {
          var start = i * size;
          var end = start + size;
          newArray.push(array.slice(start, end));
        }

        return newArray;
      }

      function getMinValueFromArray(array) {
        return Math.min.apply(Math, _toConsumableArray(array));
      }

      function getMaxValueFromArray(array) {
        return Math.max.apply(Math, _toConsumableArray(array));
      }
      /**
       * This function will create compare function to sort on object property
       * @param {string} property
       * @returns {function} compare function to be used in sorting
       */


      function compareOn(property) {
        return function compare(a, b) {
          if (a[property] < b[property]) {
            return 1;
          }

          if (a[property] > b[property]) {
            return -1;
          }

          return 0;
        };
      }
      /***/

    },

    /***/
    1:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (immutable) */

      __webpack_exports__["registerBidder"] = registerBidder;
      /* harmony export (immutable) */

      __webpack_exports__["newBidder"] = newBidder;
      /* harmony export (immutable) */

      __webpack_exports__["preloadBidderMappingFile"] = preloadBidderMappingFile;
      /* harmony export (immutable) */

      __webpack_exports__["getIabSubCategory"] = getIabSubCategory;
      /* harmony export (immutable) */

      __webpack_exports__["isValid"] = isValid;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__adapter_js__ = __webpack_require__(77);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__adapterManager_js__ = __webpack_require__(7);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__bidfactory_js__ = __webpack_require__(24);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__userSync_js__ = __webpack_require__(33);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__native_js__ = __webpack_require__(23);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6__video_js__ = __webpack_require__(34);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7__constants_json__ = __webpack_require__(5);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7__constants_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__constants_json__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_8__events_js__ = __webpack_require__(8);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_8__events_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8__events_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_includes_js__ = __webpack_require__(11);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_includes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_includes_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_10__ajax_js__ = __webpack_require__(4);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_11__utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_12__mediaTypes_js__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_13__hook_js__ = __webpack_require__(13);

      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
      }

      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }

      function _iterableToArrayLimit(arr, i) {
        if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
          return;
        }

        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
      }

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }
      /**
       * This file aims to support Adapters during the Prebid 0.x -> 1.x transition.
       *
       * Prebid 1.x and Prebid 0.x will be in separate branches--perhaps for a long time.
       * This function defines an API for adapter construction which is compatible with both versions.
       * Adapters which use it can maintain their code in master, and only this file will need to change
       * in the 1.x branch.
       *
       * Typical usage looks something like:
       *
       * const adapter = registerBidder({
       *   code: 'myBidderCode',
       *   aliases: ['alias1', 'alias2'],
       *   supportedMediaTypes: ['video', 'native'],
       *   isBidRequestValid: function(paramsObject) { return true/false },
       *   buildRequests: function(bidRequests, bidderRequest) { return some ServerRequest(s) },
       *   interpretResponse: function(oneServerResponse) { return some Bids, or throw an error. }
       * });
       *
       * @see BidderSpec for the full API and more thorough descriptions.
       */

      /**
       * @typedef {object} BidderSpec An object containing the adapter-specific functions needed to
       * make a Bidder.
       *
       * @property {string} code A code which will be used to uniquely identify this bidder. This should be the same
       *   one as is used in the call to registerBidAdapter
       * @property {string[]} [aliases] A list of aliases which should also resolve to this bidder.
       * @property {MediaType[]} [supportedMediaTypes]: A list of Media Types which the adapter supports.
       * @property {function(object): boolean} isBidRequestValid Determines whether or not the given bid has all the params
       *   needed to make a valid request.
       * @property {function(BidRequest[], bidderRequest): ServerRequest|ServerRequest[]} buildRequests Build the request to the Server
       *   which requests Bids for the given array of Requests. Each BidRequest in the argument array is guaranteed to have
       *   passed the isBidRequestValid() test.
       * @property {function(ServerResponse, BidRequest): Bid[]} interpretResponse Given a successful response from the Server,
       *   interpret it and return the Bid objects. This function will be run inside a try/catch.
       *   If it throws any errors, your bids will be discarded.
       * @property {function(SyncOptions, ServerResponse[]): UserSync[]} [getUserSyncs] Given an array of all the responses
       *   from the server, determine which user syncs should occur. The argument array will contain every element
       *   which has been sent through to interpretResponse. The order of syncs in this array matters. The most
       *   important ones should come first, since publishers may limit how many are dropped on their page.
       * @property {function(object): object} transformBidParams Updates bid params before creating bid request
       }}
       */

      /**
       * @typedef {object} BidRequest
       *
       * @property {string} bidId A string which uniquely identifies this BidRequest in the current Auction.
       * @property {object} params Any bidder-specific params which the publisher used in their bid request.
       */

      /**
       * @typedef {object} ServerRequest
       *
       * @property {('GET'|'POST')} method The type of request which this is.
       * @property {string} url The endpoint for the request. For example, "//bids.example.com".
       * @property {string|object} data Data to be sent in the request.
       * @property {object} options Content-Type set in the header of the bid request, overrides default 'text/plain'.
       *   If this is a GET request, they'll become query params. If it's a POST request, they'll be added to the body.
       *   Strings will be added as-is. Objects will be unpacked into query params based on key/value mappings, or
       *   JSON-serialized into the Request body.
       */

      /**
       * @typedef {object} ServerResponse
       *
       * @property {*} body The response body. If this is legal JSON, then it will be parsed. Otherwise it'll be a
       *   string with the body's content.
       * @property {{get: function(string): string} headers The response headers.
       *   Call this like `ServerResponse.headers.get("Content-Type")`
       */

      /**
       * @typedef {object} Bid
       *
       * @property {string} requestId The specific BidRequest which this bid is aimed at.
       *   This should match the BidRequest.bidId which this Bid targets.
       * @property {string} ad A URL which can be used to load this ad, if it's chosen by the publisher.
       * @property {string} currency The currency code for the cpm value
       * @property {number} cpm The bid price, in US cents per thousand impressions.
       * @property {number} ttl Time-to-live - how long (in seconds) Prebid can use this bid.
       * @property {boolean} netRevenue Boolean defining whether the bid is Net or Gross.  The default is true (Net).
       * @property {number} height The height of the ad, in pixels.
       * @property {number} width The width of the ad, in pixels.
       *
       * @property {object} [native] Object for storing native creative assets
       * @property {object} [video] Object for storing video response data
       * @property {object} [meta] Object for storing bid meta data
       * @property {string} [meta.iabSubCatId] The IAB subcategory ID
       * @property [Renderer] renderer A Renderer which can be used as a default for this bid,
       *   if the publisher doesn't override it. This is only relevant for Outstream Video bids.
       */

      /**
       * @typedef {Object} SyncOptions
       *
       * An object containing information about usersyncs which the adapter should obey.
       *
       * @property {boolean} iframeEnabled True if iframe usersyncs are allowed, and false otherwise
       * @property {boolean} pixelEnabled True if image usersyncs are allowed, and false otherwise
       */

      /**
       * TODO: Move this to the UserSync module after that PR is merged.
       *
       * @typedef {object} UserSync
       *
       * @property {('image'|'iframe')} type The type of user sync to be done.
       * @property {string} url The URL which makes the sync happen.
       */
      // common params for all mediaTypes


      var COMMON_BID_RESPONSE_KEYS = ['requestId', 'cpm', 'ttl', 'creativeId', 'netRevenue', 'currency'];
      var DEFAULT_REFRESHIN_DAYS = 1;
      /**
       * Register a bidder with prebid, using the given spec.
       *
       * If possible, Adapter modules should use this function instead of adapterManager.registerBidAdapter().
       *
       * @param {BidderSpec} spec An object containing the bare-bones functions we need to make a Bidder.
       */

      function registerBidder(spec) {
        var mediaTypes = Array.isArray(spec.supportedMediaTypes) ? {
          supportedMediaTypes: spec.supportedMediaTypes
        } : undefined;

        function putBidder(spec) {
          var bidder = newBidder(spec);

          __WEBPACK_IMPORTED_MODULE_1__adapterManager_js__["default"].registerBidAdapter(bidder, spec.code, mediaTypes);
        }

        putBidder(spec);

        if (Array.isArray(spec.aliases)) {
          spec.aliases.forEach(function (alias) {
            __WEBPACK_IMPORTED_MODULE_1__adapterManager_js__["default"].aliasRegistry[alias] = spec.code;
            putBidder(_extends({}, spec, {
              code: alias
            }));
          });
        }
      }
      /**
       * Make a new bidder from the given spec. This is exported mainly for testing.
       * Adapters will probably find it more convenient to use registerBidder instead.
       *
       * @param {BidderSpec} spec
       */


      function newBidder(spec) {
        return _extends(new __WEBPACK_IMPORTED_MODULE_0__adapter_js__["a"
        /* default */
        ](spec.code), {
          getSpec: function getSpec() {
            return Object.freeze(spec);
          },
          registerSyncs: registerSyncs,
          callBids: function callBids(bidderRequest, addBidResponse, done, ajax, onTimelyResponse, configEnabledCallback) {
            if (!Array.isArray(bidderRequest.bids)) {
              return;
            }

            function addBidWithCode(adUnitCode, bid) {
              if (isValid(adUnitCode, bid, [bidderRequest])) {
                addBidResponse(adUnitCode, bid);
              }
            } // After all the responses have come back, call done() and
            // register any required usersync pixels.


            var responses = [];

            function afterAllResponses() {
              done();

              __WEBPACK_IMPORTED_MODULE_8__events_js___default.a.emit(__WEBPACK_IMPORTED_MODULE_7__constants_json___default.a.EVENTS.BIDDER_DONE, bidderRequest);

              registerSyncs(responses, bidderRequest.gdprConsent, bidderRequest.uspConsent);
            }

            var validBidRequests = bidderRequest.bids.filter(filterAndWarn);

            if (validBidRequests.length === 0) {
              afterAllResponses();
              return;
            }

            var bidRequestMap = {};
            validBidRequests.forEach(function (bid) {
              bidRequestMap[bid.bidId] = bid; // Delete this once we are 1.0

              if (!bid.adUnitCode) {
                bid.adUnitCode = bid.placementCode;
              }
            });
            var requests = spec.buildRequests(validBidRequests, bidderRequest);

            if (!requests || requests.length === 0) {
              afterAllResponses();
              return;
            }

            if (!Array.isArray(requests)) {
              requests = [requests];
            } // Callbacks don't compose as nicely as Promises. We should call done() once _all_ the
            // Server requests have returned and been processed. Since `ajax` accepts a single callback,
            // we need to rig up a function which only executes after all the requests have been responded.


            var onResponse = Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["delayExecution"])(configEnabledCallback(afterAllResponses), requests.length);
            requests.forEach(processRequest);

            function formatGetParameters(data) {
              if (data) {
                return "?".concat(_typeof(data) === 'object' ? Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["parseQueryStringParameters"])(data) : data);
              }

              return '';
            }

            function processRequest(request) {
              switch (request.method) {
                case 'GET':
                  ajax("".concat(request.url).concat(formatGetParameters(request.data)), {
                    success: configEnabledCallback(onSuccess),
                    error: onFailure
                  }, undefined, _extends({
                    method: 'GET',
                    withCredentials: true
                  }, request.options));
                  break;

                case 'POST':
                  ajax(request.url, {
                    success: configEnabledCallback(onSuccess),
                    error: onFailure
                  }, typeof request.data === 'string' ? request.data : JSON.stringify(request.data), _extends({
                    method: 'POST',
                    contentType: 'text/plain',
                    withCredentials: true
                  }, request.options));
                  break;

                default:
                  Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["logWarn"])("Skipping invalid request from ".concat(spec.code, ". Request type ").concat(request.type, " must be GET or POST"));
                  onResponse();
              } // If the server responds successfully, use the adapter code to unpack the Bids from it.
              // If the adapter code fails, no bids should be added. After all the bids have been added, make
              // sure to call the `onResponse` function so that we're one step closer to calling done().


              function onSuccess(response, responseObj) {
                onTimelyResponse(spec.code);

                try {
                  response = JSON.parse(response);
                } catch (e) {}
                /* response might not be JSON... that's ok. */
                // Make response headers available for #1742. These are lazy-loaded because most adapters won't need them.


                response = {
                  body: response,
                  headers: headerParser()
                };
                responses.push(response);
                var bids;

                try {
                  bids = spec.interpretResponse(response, request);
                } catch (err) {
                  Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["logError"])("Bidder ".concat(spec.code, " failed to interpret the server's response. Continuing without bids"), null, err);
                  onResponse();
                  return;
                }

                if (bids) {
                  if (Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["isArray"])(bids)) {
                    bids.forEach(addBidUsingRequestMap);
                  } else {
                    addBidUsingRequestMap(bids);
                  }
                }

                onResponse(bids);

                function addBidUsingRequestMap(bid) {
                  var bidRequest = bidRequestMap[bid.requestId];

                  if (bidRequest) {
                    // creating a copy of original values as cpm and currency are modified later
                    bid.originalCpm = bid.cpm;
                    bid.originalCurrency = bid.currency;

                    var prebidBid = _extends(Object(__WEBPACK_IMPORTED_MODULE_3__bidfactory_js__["a"
                    /* createBid */
                    ])(__WEBPACK_IMPORTED_MODULE_7__constants_json___default.a.STATUS.GOOD, bidRequest), bid);

                    addBidWithCode(bidRequest.adUnitCode, prebidBid);
                  } else {
                    Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["logWarn"])("Bidder ".concat(spec.code, " made bid for unknown request ID: ").concat(bid.requestId, ". Ignoring."));
                  }
                }

                function headerParser(xmlHttpResponse) {
                  return {
                    get: responseObj.getResponseHeader.bind(responseObj)
                  };
                }
              } // If the server responds with an error, there's not much we can do. Log it, and make sure to
              // call onResponse() so that we're one step closer to calling done().


              function onFailure(err) {
                onTimelyResponse(spec.code);
                Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["logError"])("Server call for ".concat(spec.code, " failed: ").concat(err, ". Continuing without bids."));
                onResponse();
              }
            }
          }
        });

        function registerSyncs(responses, gdprConsent, uspConsent) {
          if (spec.getUserSyncs && !__WEBPACK_IMPORTED_MODULE_1__adapterManager_js__["default"].aliasRegistry[spec.code]) {
            var filterConfig = __WEBPACK_IMPORTED_MODULE_2__config_js__["b"
            /* config */
            ].getConfig('userSync.filterSettings');

            var syncs = spec.getUserSyncs({
              iframeEnabled: !!(filterConfig && (filterConfig.iframe || filterConfig.all)),
              pixelEnabled: !!(filterConfig && (filterConfig.image || filterConfig.all))
            }, responses, gdprConsent, uspConsent);

            if (syncs) {
              if (!Array.isArray(syncs)) {
                syncs = [syncs];
              }

              syncs.forEach(function (sync) {
                __WEBPACK_IMPORTED_MODULE_4__userSync_js__["a"
                /* userSync */
                ].registerSync(sync.type, spec.code, sync.url);
              });
            }
          }
        }

        function filterAndWarn(bid) {
          if (!spec.isBidRequestValid(bid)) {
            Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["logWarn"])("Invalid bid sent to bidder ".concat(spec.code, ": ").concat(JSON.stringify(bid)));
            return false;
          }

          return true;
        }
      }

      function preloadBidderMappingFile(fn, adUnits) {
        if (!__WEBPACK_IMPORTED_MODULE_2__config_js__["b"
        /* config */
        ].getConfig('adpod.brandCategoryExclusion')) {
          return fn.call(this, adUnits);
        }

        var adPodBidders = adUnits.filter(function (adUnit) {
          return Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["deepAccess"])(adUnit, 'mediaTypes.video.context') === __WEBPACK_IMPORTED_MODULE_12__mediaTypes_js__["a"
          /* ADPOD */
          ];
        }).map(function (adUnit) {
          return adUnit.bids.map(function (bid) {
            return bid.bidder;
          });
        }).reduce(__WEBPACK_IMPORTED_MODULE_11__utils_js__["flatten"], []).filter(__WEBPACK_IMPORTED_MODULE_11__utils_js__["uniques"]);
        adPodBidders.forEach(function (bidder) {
          var bidderSpec = __WEBPACK_IMPORTED_MODULE_1__adapterManager_js__["default"].getBidAdapter(bidder);

          if (bidderSpec.getSpec().getMappingFileInfo) {
            var info = bidderSpec.getSpec().getMappingFileInfo();
            var refreshInDays = info.refreshInDays ? info.refreshInDays : DEFAULT_REFRESHIN_DAYS;
            var key = info.localStorageKey ? info.localStorageKey : bidderSpec.getSpec().code;
            var mappingData = Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["getDataFromLocalStorage"])(key);

            if (!mappingData || Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["timestamp"])() < mappingData.lastUpdated + refreshInDays * 24 * 60 * 60 * 1000) {
              Object(__WEBPACK_IMPORTED_MODULE_10__ajax_js__["a"
              /* ajax */
              ])(info.url, {
                success: function success(response) {
                  try {
                    response = JSON.parse(response);
                    var mapping = {
                      lastUpdated: Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["timestamp"])(),
                      mapping: response.mapping
                    };
                    Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["setDataInLocalStorage"])(key, JSON.stringify(mapping));
                  } catch (error) {
                    Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["logError"])("Failed to parse ".concat(bidder, " bidder translation mapping file"));
                  }
                },
                error: function error() {
                  Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["logError"])("Failed to load ".concat(bidder, " bidder translation file"));
                }
              });
            }
          }
        });
        fn.call(this, adUnits);
      }

      Object(__WEBPACK_IMPORTED_MODULE_13__hook_js__["a"
      /* getHook */
      ])('checkAdUnitSetup').before(preloadBidderMappingFile);
      /**
       * Reads the data stored in localstorage and returns iab subcategory
       * @param {string} bidderCode bidderCode
       * @param {string} category bidders category
       */

      function getIabSubCategory(bidderCode, category) {
        var bidderSpec = __WEBPACK_IMPORTED_MODULE_1__adapterManager_js__["default"].getBidAdapter(bidderCode);

        if (bidderSpec.getSpec().getMappingFileInfo) {
          var info = bidderSpec.getSpec().getMappingFileInfo();
          var key = info.localStorageKey ? info.localStorageKey : bidderSpec.getBidderCode();
          var data = Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["getDataFromLocalStorage"])(key);

          if (data) {
            try {
              data = JSON.parse(data);
            } catch (error) {
              Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["logError"])("Failed to parse ".concat(bidderCode, " mapping data stored in local storage"));
            }

            return data.mapping[category] ? data.mapping[category] : null;
          }
        }
      } // check that the bid has a width and height set


      function validBidSize(adUnitCode, bid, bidRequests) {
        if ((bid.width || parseInt(bid.width, 10) === 0) && (bid.height || parseInt(bid.height, 10) === 0)) {
          bid.width = parseInt(bid.width, 10);
          bid.height = parseInt(bid.height, 10);
          return true;
        }

        var adUnit = Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["getBidderRequest"])(bidRequests, bid.bidderCode, adUnitCode);
        var sizes = adUnit && adUnit.bids && adUnit.bids[0] && adUnit.bids[0].sizes;
        var parsedSizes = Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["parseSizesInput"])(sizes); // if a banner impression has one valid size, we assign that size to any bid
        // response that does not explicitly set width or height

        if (parsedSizes.length === 1) {
          var _parsedSizes$0$split = parsedSizes[0].split('x'),
              _parsedSizes$0$split2 = _slicedToArray(_parsedSizes$0$split, 2),
              width = _parsedSizes$0$split2[0],
              height = _parsedSizes$0$split2[1];

          bid.width = parseInt(width, 10);
          bid.height = parseInt(height, 10);
          return true;
        }

        return false;
      } // Validate the arguments sent to us by the adapter. If this returns false, the bid should be totally ignored.


      function isValid(adUnitCode, bid, bidRequests) {
        function hasValidKeys() {
          var bidKeys = Object.keys(bid);
          return COMMON_BID_RESPONSE_KEYS.every(function (key) {
            return __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_includes_js___default()(bidKeys, key) && !__WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_includes_js___default()([undefined, null], bid[key]);
          });
        }

        function errorMessage(msg) {
          return "Invalid bid from ".concat(bid.bidderCode, ". Ignoring bid: ").concat(msg);
        }

        if (!adUnitCode) {
          Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["logWarn"])('No adUnitCode was supplied to addBidResponse.');
          return false;
        }

        if (!bid) {
          Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["logWarn"])("Some adapter tried to add an undefined bid for ".concat(adUnitCode, "."));
          return false;
        }

        if (!hasValidKeys()) {
          Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["logError"])(errorMessage("Bidder ".concat(bid.bidderCode, " is missing required params. Check http://prebid.org/dev-docs/bidder-adapter-1.html for list of params.")));
          return false;
        }

        if (bid.mediaType === 'native' && !Object(__WEBPACK_IMPORTED_MODULE_5__native_js__["f"
        /* nativeBidIsValid */
        ])(bid, bidRequests)) {
          Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["logError"])(errorMessage('Native bid missing some required properties.'));
          return false;
        }

        if (bid.mediaType === 'video' && !Object(__WEBPACK_IMPORTED_MODULE_6__video_js__["d"
        /* isValidVideoBid */
        ])(bid, bidRequests)) {
          Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["logError"])(errorMessage("Video bid does not have required vastUrl or renderer property"));
          return false;
        }

        if (bid.mediaType === 'banner' && !validBidSize(adUnitCode, bid, bidRequests)) {
          Object(__WEBPACK_IMPORTED_MODULE_11__utils_js__["logError"])(errorMessage("Banner bids require a width and height"));
          return false;
        }

        return true;
      }
      /***/

    },

    /***/
    10:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */
      __webpack_exports__["a"] = Renderer;
      /* harmony export (immutable) */

      __webpack_exports__["c"] = isRendererRequired;
      /* harmony export (immutable) */

      __webpack_exports__["b"] = executeRenderer;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__adloader_js__ = __webpack_require__(28);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_find_js__ = __webpack_require__(12);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_find_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_find_js__);

      var moduleCode = 'outstream';
      /**
       * @typedef {object} Renderer
       *
       * A Renderer stores some functions which are used to render a particular Bid.
       * These are used in Outstream Video Bids, returned on the Bid by the adapter, and will
       * be used to render that bid unless the Publisher overrides them.
       */

      function Renderer(options) {
        var _this = this;

        var url = options.url,
            config = options.config,
            id = options.id,
            callback = options.callback,
            loaded = options.loaded,
            adUnitCode = options.adUnitCode;
        this.url = url;
        this.config = config;
        this.handlers = {};
        this.id = id; // a renderer may push to the command queue to delay rendering until the
        // render function is loaded by loadExternalScript, at which point the the command
        // queue will be processed

        this.loaded = loaded;
        this.cmd = [];

        this.push = function (func) {
          if (typeof func !== 'function') {
            __WEBPACK_IMPORTED_MODULE_1__utils_js__["logError"]('Commands given to Renderer.push must be wrapped in a function');

            return;
          }

          _this.loaded ? func.call() : _this.cmd.push(func);
        }; // bidders may override this with the `callback` property given to `install`


        this.callback = callback || function () {
          _this.loaded = true;

          _this.process();
        };

        if (!isRendererDefinedOnAdUnit(adUnitCode)) {
          // we expect to load a renderer url once only so cache the request to load script
          Object(__WEBPACK_IMPORTED_MODULE_0__adloader_js__["a"
          /* loadExternalScript */
          ])(url, moduleCode, this.callback);
        } else {
          __WEBPACK_IMPORTED_MODULE_1__utils_js__["logWarn"]("External Js not loaded by Renderer since renderer url and callback is already defined on adUnit ".concat(adUnitCode));
        }
      }

      Renderer.install = function (_ref) {
        var url = _ref.url,
            config = _ref.config,
            id = _ref.id,
            callback = _ref.callback,
            loaded = _ref.loaded,
            adUnitCode = _ref.adUnitCode;
        return new Renderer({
          url: url,
          config: config,
          id: id,
          callback: callback,
          loaded: loaded,
          adUnitCode: adUnitCode
        });
      };

      Renderer.prototype.getConfig = function () {
        return this.config;
      };

      Renderer.prototype.setRender = function (fn) {
        this.render = fn;
      };

      Renderer.prototype.setEventHandlers = function (handlers) {
        this.handlers = handlers;
      };

      Renderer.prototype.handleVideoEvent = function (_ref2) {
        var id = _ref2.id,
            eventName = _ref2.eventName;

        if (typeof this.handlers[eventName] === 'function') {
          this.handlers[eventName]();
        }

        __WEBPACK_IMPORTED_MODULE_1__utils_js__["logMessage"]("Prebid Renderer event for id ".concat(id, " type ").concat(eventName));
      };
      /*
       * Calls functions that were pushed to the command queue before the
       * renderer was loaded by `loadExternalScript`
       */


      Renderer.prototype.process = function () {
        while (this.cmd.length > 0) {
          try {
            this.cmd.shift().call();
          } catch (error) {
            __WEBPACK_IMPORTED_MODULE_1__utils_js__["logError"]('Error processing Renderer command: ', error);
          }
        }
      };
      /**
       * Checks whether creative rendering should be done by Renderer or not.
       * @param {Object} renderer Renderer object installed by adapter
       * @returns {Boolean}
       */


      function isRendererRequired(renderer) {
        return !!(renderer && renderer.url);
      }
      /**
       * Render the bid returned by the adapter
       * @param {Object} renderer Renderer object installed by adapter
       * @param {Object} bid Bid response
       */


      function executeRenderer(renderer, bid) {
        renderer.render(bid);
      }

      function isRendererDefinedOnAdUnit(adUnitCode) {
        var adUnits = pbjs.adUnits;

        var adUnit = __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_find_js___default()(adUnits, function (adUnit) {
          return adUnit.code === adUnitCode;
        });

        return !!(adUnit && adUnit.renderer && adUnit.renderer.url && adUnit.renderer.render);
      }
      /***/

    },

    /***/
    100:
    /***/
    function _(module, exports, __webpack_require__) {
      var addToUnscopables = __webpack_require__(40);

      var step = __webpack_require__(67);

      var Iterators = __webpack_require__(31);

      var toIObject = __webpack_require__(49); // 22.1.3.4 Array.prototype.entries()
      // 22.1.3.13 Array.prototype.keys()
      // 22.1.3.29 Array.prototype.values()
      // 22.1.3.30 Array.prototype[@@iterator]()


      module.exports = __webpack_require__(50)(Array, 'Array', function (iterated, kind) {
        this._t = toIObject(iterated); // target

        this._i = 0; // next index

        this._k = kind; // kind
        // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
      }, function () {
        var O = this._t;
        var kind = this._k;
        var index = this._i++;

        if (!O || index >= O.length) {
          this._t = undefined;
          return step(1);
        }

        if (kind == 'keys') return step(0, index);
        if (kind == 'values') return step(0, O[index]);
        return step(0, [index, O[index]]);
      }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

      Iterators.Arguments = Iterators.Array;
      addToUnscopables('keys');
      addToUnscopables('values');
      addToUnscopables('entries');
      /***/
    },

    /***/
    101:
    /***/
    function _(module, exports, __webpack_require__) {
      var strong = __webpack_require__(102);

      var validate = __webpack_require__(75);

      var SET = 'Set'; // 23.2 Set Objects

      module.exports = __webpack_require__(104)(SET, function (get) {
        return function Set() {
          return get(this, arguments.length > 0 ? arguments[0] : undefined);
        };
      }, {
        // 23.2.3.1 Set.prototype.add(value)
        add: function add(value) {
          return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
        }
      }, strong);
      /***/
    },

    /***/
    102:
    /***/
    function _(module, exports, __webpack_require__) {
      var dP = __webpack_require__(20).f;

      var create = __webpack_require__(65);

      var redefineAll = __webpack_require__(68);

      var ctx = __webpack_require__(27);

      var anInstance = __webpack_require__(69);

      var forOf = __webpack_require__(41);

      var $iterDefine = __webpack_require__(50);

      var step = __webpack_require__(67);

      var setSpecies = __webpack_require__(103);

      var DESCRIPTORS = __webpack_require__(22);

      var fastKey = __webpack_require__(74).fastKey;

      var validate = __webpack_require__(75);

      var SIZE = DESCRIPTORS ? '_s' : 'size';

      var getEntry = function getEntry(that, key) {
        // fast case
        var index = fastKey(key);
        var entry;
        if (index !== 'F') return that._i[index]; // frozen object case

        for (entry = that._f; entry; entry = entry.n) {
          if (entry.k == key) return entry;
        }
      };

      module.exports = {
        getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
          var C = wrapper(function (that, iterable) {
            anInstance(that, C, NAME, '_i');
            that._t = NAME; // collection type

            that._i = create(null); // index

            that._f = undefined; // first entry

            that._l = undefined; // last entry

            that[SIZE] = 0; // size

            if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
          });
          redefineAll(C.prototype, {
            // 23.1.3.1 Map.prototype.clear()
            // 23.2.3.2 Set.prototype.clear()
            clear: function clear() {
              for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
                entry.r = true;
                if (entry.p) entry.p = entry.p.n = undefined;
                delete data[entry.i];
              }

              that._f = that._l = undefined;
              that[SIZE] = 0;
            },
            // 23.1.3.3 Map.prototype.delete(key)
            // 23.2.3.4 Set.prototype.delete(value)
            'delete': function _delete(key) {
              var that = validate(this, NAME);
              var entry = getEntry(that, key);

              if (entry) {
                var next = entry.n;
                var prev = entry.p;
                delete that._i[entry.i];
                entry.r = true;
                if (prev) prev.n = next;
                if (next) next.p = prev;
                if (that._f == entry) that._f = next;
                if (that._l == entry) that._l = prev;
                that[SIZE]--;
              }

              return !!entry;
            },
            // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
            // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
            forEach: function forEach(callbackfn
            /* , that = undefined */
            ) {
              validate(this, NAME);
              var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
              var entry;

              while (entry = entry ? entry.n : this._f) {
                f(entry.v, entry.k, this); // revert to the last existing entry

                while (entry && entry.r) {
                  entry = entry.p;
                }
              }
            },
            // 23.1.3.7 Map.prototype.has(key)
            // 23.2.3.7 Set.prototype.has(value)
            has: function has(key) {
              return !!getEntry(validate(this, NAME), key);
            }
          });
          if (DESCRIPTORS) dP(C.prototype, 'size', {
            get: function get() {
              return validate(this, NAME)[SIZE];
            }
          });
          return C;
        },
        def: function def(that, key, value) {
          var entry = getEntry(that, key);
          var prev, index; // change existing entry

          if (entry) {
            entry.v = value; // create new entry
          } else {
            that._l = entry = {
              i: index = fastKey(key, true),
              // <- index
              k: key,
              // <- key
              v: value,
              // <- value
              p: prev = that._l,
              // <- previous entry
              n: undefined,
              // <- next entry
              r: false // <- removed

            };
            if (!that._f) that._f = entry;
            if (prev) prev.n = entry;
            that[SIZE]++; // add to index

            if (index !== 'F') that._i[index] = entry;
          }

          return that;
        },
        getEntry: getEntry,
        setStrong: function setStrong(C, NAME, IS_MAP) {
          // add .keys, .values, .entries, [@@iterator]
          // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
          $iterDefine(C, NAME, function (iterated, kind) {
            this._t = validate(iterated, NAME); // target

            this._k = kind; // kind

            this._l = undefined; // previous
          }, function () {
            var that = this;
            var kind = that._k;
            var entry = that._l; // revert to the last existing entry

            while (entry && entry.r) {
              entry = entry.p;
            } // get next entry


            if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
              // or finish the iteration
              that._t = undefined;
              return step(1);
            } // return step by kind


            if (kind == 'keys') return step(0, entry.k);
            if (kind == 'values') return step(0, entry.v);
            return step(0, [entry.k, entry.v]);
          }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // add [@@species], 23.1.2.2, 23.2.2.2

          setSpecies(NAME);
        }
      };
      /***/
    },

    /***/
    103:
    /***/
    function _(module, exports, __webpack_require__) {
      var global = __webpack_require__(19);

      var core = __webpack_require__(16);

      var dP = __webpack_require__(20);

      var DESCRIPTORS = __webpack_require__(22);

      var SPECIES = __webpack_require__(14)('species');

      module.exports = function (KEY) {
        var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
        if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
          configurable: true,
          get: function get() {
            return this;
          }
        });
      };
      /***/

    },

    /***/
    104:
    /***/
    function _(module, exports, __webpack_require__) {
      var global = __webpack_require__(19);

      var $export = __webpack_require__(15);

      var meta = __webpack_require__(74);

      var fails = __webpack_require__(36);

      var hide = __webpack_require__(21);

      var redefineAll = __webpack_require__(68);

      var forOf = __webpack_require__(41);

      var anInstance = __webpack_require__(69);

      var isObject = __webpack_require__(17);

      var setToStringTag = __webpack_require__(52);

      var dP = __webpack_require__(20).f;

      var each = __webpack_require__(45)(0);

      var DESCRIPTORS = __webpack_require__(22);

      module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
        var Base = global[NAME];
        var C = Base;
        var ADDER = IS_MAP ? 'set' : 'add';
        var proto = C && C.prototype;
        var O = {};

        if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
          new C().entries().next();
        }))) {
          // create collection constructor
          C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
          redefineAll(C.prototype, methods);
          meta.NEED = true;
        } else {
          C = wrapper(function (target, iterable) {
            anInstance(target, C, NAME, '_c');
            target._c = new Base();
            if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);
          });
          each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
            var IS_ADDER = KEY == 'add' || KEY == 'set';
            if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {
              anInstance(this, C, KEY);
              if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;

              var result = this._c[KEY](a === 0 ? 0 : a, b);

              return IS_ADDER ? this : result;
            });
          });
          IS_WEAK || dP(C.prototype, 'size', {
            get: function get() {
              return this._c.size;
            }
          });
        }

        setToStringTag(C, NAME);
        O[NAME] = C;
        $export($export.G + $export.W + $export.F, O);
        if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
        return C;
      };
      /***/

    },

    /***/
    105:
    /***/
    function _(module, exports, __webpack_require__) {
      // https://github.com/DavidBruant/Map-Set.prototype.toJSON
      var $export = __webpack_require__(15);

      $export($export.P + $export.R, 'Set', {
        toJSON: __webpack_require__(106)('Set')
      });
      /***/
    },

    /***/
    106:
    /***/
    function _(module, exports, __webpack_require__) {
      // https://github.com/DavidBruant/Map-Set.prototype.toJSON
      var classof = __webpack_require__(73);

      var from = __webpack_require__(107);

      module.exports = function (NAME) {
        return function toJSON() {
          if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
          return from(this);
        };
      };
      /***/

    },

    /***/
    107:
    /***/
    function _(module, exports, __webpack_require__) {
      var forOf = __webpack_require__(41);

      module.exports = function (iter, ITERATOR) {
        var result = [];
        forOf(iter, false, result.push, result, ITERATOR);
        return result;
      };
      /***/

    },

    /***/
    108:
    /***/
    function _(module, exports, __webpack_require__) {
      // https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
      __webpack_require__(109)('Set');
      /***/

    },

    /***/
    109:
    /***/
    function _(module, exports, __webpack_require__) {
      // https://tc39.github.io/proposal-setmap-offrom/
      var $export = __webpack_require__(15);

      module.exports = function (COLLECTION) {
        $export($export.S, COLLECTION, {
          of: function of() {
            var length = arguments.length;
            var A = new Array(length);

            while (length--) {
              A[length] = arguments[length];
            }

            return new this(A);
          }
        });
      };
      /***/

    },

    /***/
    11:
    /***/
    function _(module, exports, __webpack_require__) {
      __webpack_require__(88);

      module.exports = __webpack_require__(16).Array.includes;
      /***/
    },

    /***/
    110:
    /***/
    function _(module, exports, __webpack_require__) {
      // https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
      __webpack_require__(111)('Set');
      /***/

    },

    /***/
    111:
    /***/
    function _(module, exports, __webpack_require__) {
      // https://tc39.github.io/proposal-setmap-offrom/
      var $export = __webpack_require__(15);

      var aFunction = __webpack_require__(57);

      var ctx = __webpack_require__(27);

      var forOf = __webpack_require__(41);

      module.exports = function (COLLECTION) {
        $export($export.S, COLLECTION, {
          from: function from(source
          /* , mapFn, thisArg */
          ) {
            var mapFn = arguments[1];
            var mapping, A, n, cb;
            aFunction(this);
            mapping = mapFn !== undefined;
            if (mapping) aFunction(mapFn);
            if (source == undefined) return new this();
            A = [];

            if (mapping) {
              n = 0;
              cb = ctx(mapFn, arguments[2], 2);
              forOf(source, false, function (nextItem) {
                A.push(cb(nextItem, n++));
              });
            } else {
              forOf(source, false, A.push, A);
            }

            return new this(A);
          }
        });
      };
      /***/

    },

    /***/
    112:
    /***/
    function _(module, exports, __webpack_require__) {
      var ctx = __webpack_require__(27);

      var $export = __webpack_require__(15);

      var toObject = __webpack_require__(46);

      var call = __webpack_require__(70);

      var isArrayIter = __webpack_require__(71);

      var toLength = __webpack_require__(39);

      var createProperty = __webpack_require__(113);

      var getIterFn = __webpack_require__(72);

      $export($export.S + $export.F * !__webpack_require__(114)(function (iter) {}), 'Array', {
        // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
        from: function from(arrayLike
        /* , mapfn = undefined, thisArg = undefined */
        ) {
          var O = toObject(arrayLike);
          var C = typeof this == 'function' ? this : Array;
          var aLen = arguments.length;
          var mapfn = aLen > 1 ? arguments[1] : undefined;
          var mapping = mapfn !== undefined;
          var index = 0;
          var iterFn = getIterFn(O);
          var length, result, step, iterator;
          if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2); // if object isn't iterable or it's array with default iterator - use simple case

          if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
            for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
              createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
            }
          } else {
            length = toLength(O.length);

            for (result = new C(length); length > index; index++) {
              createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
            }
          }

          result.length = index;
          return result;
        }
      });
      /***/
    },

    /***/
    113:
    /***/
    function _(module, exports, __webpack_require__) {
      var $defineProperty = __webpack_require__(20);

      var createDesc = __webpack_require__(44);

      module.exports = function (object, index, value) {
        if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
      };
      /***/

    },

    /***/
    114:
    /***/
    function _(module, exports, __webpack_require__) {
      var ITERATOR = __webpack_require__(14)('iterator');

      var SAFE_CLOSING = false;

      try {
        var riter = [7][ITERATOR]();

        riter['return'] = function () {
          SAFE_CLOSING = true;
        }; // eslint-disable-next-line no-throw-literal


        Array.from(riter, function () {
          throw 2;
        });
      } catch (e) {
        /* empty */
      }

      module.exports = function (exec, skipClosing) {
        if (!skipClosing && !SAFE_CLOSING) return false;
        var safe = false;

        try {
          var arr = [7];
          var iter = arr[ITERATOR]();

          iter.next = function () {
            return {
              done: safe = true
            };
          };

          arr[ITERATOR] = function () {
            return iter;
          };

          exec(arr);
        } catch (e) {
          /* empty */
        }

        return safe;
      };
      /***/

    },

    /***/
    115:
    /***/
    function _(module, exports) {
      module.exports = clone;
      /*
        Identical to `just-extend(true, {}, obj1)`
      
        var arr = [1, 2, 3];
        var subObj = {aa: 1};
        var obj = {a: 3, b: 5, c: arr, d: subObj};
        var objClone = clone(obj);
        arr.push(4);
        subObj.bb = 2;
        obj; // {a: 3, b: 5, c: [1, 2, 3, 4], d: {aa: 1}}  
        objClone; // {a: 3, b: 5, c: [1, 2, 3], d: {aa: 1, bb: 2}}
      */

      function clone(obj) {
        var result = Array.isArray(obj) ? [] : {};

        for (var key in obj) {
          // include prototype properties
          var value = obj[key];

          if (value && _typeof4(value) == 'object') {
            result[key] = clone(value);
          } else {
            result[key] = value;
          }
        }

        return result;
      }
      /***/

    },

    /***/
    116:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */
      __webpack_exports__["a"] = dlv;

      function dlv(obj, key, def, p, undef) {
        key = key.split ? key.split('.') : key;

        for (p = 0; p < key.length; p++) {
          obj = obj ? obj[key[p]] : undef;
        }

        return obj === undef ? def : obj;
      }
      /***/

    },

    /***/
    117:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony default export */
      __webpack_exports__["a"] = function (obj, keys, val) {
        keys.split && (keys = keys.split('.'));
        var i = 0,
            l = keys.length,
            t = obj,
            x;

        for (; i < l; ++i) {
          x = t[keys[i]];
          t = t[keys[i]] = i === l - 1 ? val : x != null ? x : !!~keys[i + 1].indexOf('.') || !(+keys[i + 1] > -1) ? {} : [];
        }
      };
      /***/

    },

    /***/
    118:
    /***/
    function _(module, exports) {
      /*
      * @license MIT
      * Fun Hooks v0.9.8
      * (c) @snapwich
      */
      create.SYNC = 1;
      create.ASYNC = 2;
      create.QUEUE = 4;
      var packageName = "fun-hooks";

      function hasProxy() {
        return !!(typeof Proxy === "function" && Proxy.revocable);
      }

      var defaults = Object.freeze({
        useProxy: true,
        ready: 0
      });
      var hookableMap = new WeakMap(); // detect incorrectly implemented reduce and if found use polyfill
      // https://github.com/prebid/Prebid.js/issues/3576
      // polyfill from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce

      var reduce = [1].reduce(function (a, b, c) {
        return [a, b, c];
      }, 2).toString() === "2,1,0" ? Array.prototype.reduce : function (callback, initial) {
        var o = Object(this);
        var len = o.length >>> 0;
        var k = 0;
        var value;

        if (initial) {
          value = initial;
        } else {
          while (k < len && !(k in o)) {
            k++;
          }

          value = o[k++];
        }

        while (k < len) {
          if (k in o) {
            value = callback(value, o[k], k, o);
          }

          k++;
        }

        return value;
      };

      function rest(args, skip) {
        return Array.prototype.slice.call(args, skip);
      }

      var assign = Object.assign || function assign(target) {
        return reduce.call(rest(arguments, 1), function (target, obj) {
          if (obj) {
            Object.keys(obj).forEach(function (prop) {
              target[prop] = obj[prop];
            });
          }

          return target;
        }, target);
      };

      function runAll(queue) {
        var queued; // eslint-disable-next-line no-cond-assign

        while (queued = queue.shift()) {
          queued();
        }
      }

      function create(config) {
        var hooks = {};
        var postReady = [];
        config = assign({}, defaults, config);

        function dispatch(arg1, arg2) {
          if (typeof arg1 === "function") {
            return hookFn.call(null, "sync", arg1, arg2);
          } else if (typeof arg1 === "string" && typeof arg2 === "function") {
            return hookFn.apply(null, arguments);
          } else if (_typeof4(arg1) === "object") {
            return hookObj.apply(null, arguments);
          }
        }

        var ready;

        if (config.ready) {
          dispatch.ready = function () {
            ready = true;
            runAll(postReady);
          };
        } else {
          ready = true;
        }

        function hookObj(obj, props, objName) {
          var walk = true;

          if (typeof props === "undefined") {
            props = Object.getOwnPropertyNames(obj);
            walk = false;
          }

          var objHooks = {};
          var doNotHook = ["constructor"];

          do {
            props = props.filter(function (prop) {
              return typeof obj[prop] === "function" && !(doNotHook.indexOf(prop) !== -1) && !prop.match(/^_/);
            });
            props.forEach(function (prop) {
              var parts = prop.split(":");
              var name = parts[0];
              var type = parts[1] || "sync";

              if (!objHooks[name]) {
                var fn = obj[name];
                objHooks[name] = obj[name] = hookFn(type, fn, objName ? [objName, name] : undefined);
              }
            });
            obj = Object.getPrototypeOf(obj);
          } while (walk && obj);

          return objHooks;
        }
        /**
         * Navigates a string path to return a hookable function.  If not found, creates a placeholder for hooks.
         * @param {(Array<string> | string)} path
         */


        function get(path) {
          var parts = Array.isArray(path) ? path : path.split(".");
          return reduce.call(parts, function (memo, part, i) {
            var item = memo[part];
            var installed = false;

            if (item) {
              return item;
            } else if (i === parts.length - 1) {
              if (!ready) {
                postReady.push(function () {
                  if (!installed) {
                    // eslint-disable-next-line no-console
                    console.warn(packageName + ": referenced '" + path + "' but it was never created");
                  }
                });
              }

              return memo[part] = newHookable(function (fn) {
                memo[part] = fn;
                installed = true;
              });
            }

            return memo[part] = {};
          }, hooks);
        }

        function newHookable(onInstall) {
          var _before = [];
          var _after = [];

          var generateTrap = function generateTrap() {};

          var api = {
            before: function before(hook, priority) {
              return add.call(this, _before, "before", hook, priority);
            },
            after: function after(hook, priority) {
              return add.call(this, _after, "after", hook, priority);
            },
            getHooks: function getHooks(match) {
              var hooks = _before.concat(_after);

              if (_typeof4(match) === "object") {
                hooks = hooks.filter(function (entry) {
                  return Object.keys(match).every(function (prop) {
                    return entry[prop] === match[prop];
                  });
                });
              }

              return assign(hooks, {
                remove: function remove() {
                  hooks.forEach(function (entry) {
                    entry.remove();
                  });
                  return this;
                }
              });
            },
            removeAll: function removeAll() {
              return this.getHooks().remove();
            }
          };
          var meta = {
            install: function install(type, fn, generate) {
              this.type = type;
              generateTrap = generate;
              generate(_before, _after);
              onInstall && onInstall(fn);
            }
          }; // store meta data related to hookable. use `api.after` since `api` reference is not available on our proxy.

          hookableMap.set(api.after, meta);
          return api;

          function add(store, type, hook, priority) {
            var entry = {
              hook: hook,
              type: type,
              priority: priority || 10,
              remove: function remove() {
                var index = store.indexOf(entry);

                if (index !== -1) {
                  store.splice(index, 1);
                  generateTrap(_before, _after);
                }
              }
            };
            store.push(entry);
            store.sort(function (a, b) {
              return b.priority - a.priority;
            });
            generateTrap(_before, _after);
            return this;
          }
        }

        function hookFn(type, fn, name) {
          // check if function has already been wrapped
          var meta = fn.after && hookableMap.get(fn.after);

          if (meta) {
            if (meta.type !== type) {
              throw packageName + ": recreated hookable with different type";
            } else {
              return fn;
            }
          }

          var hookable = name ? get(name) : newHookable();
          var trap;
          var hookedFn;
          var handlers = {
            get: function get(target, prop) {
              return hookable[prop] || Reflect.get.apply(Reflect, arguments);
            }
          };

          if (!ready) {
            postReady.push(setTrap);
          }

          if (config.useProxy && hasProxy()) {
            hookedFn = new Proxy(fn, handlers);
          } else {
            hookedFn = function hookedFn() {
              return handlers.apply ? handlers.apply(fn, this, rest(arguments)) : fn.apply(this, arguments);
            };

            assign(hookedFn, hookable);
          }

          hookableMap.get(hookedFn.after).install(type, hookedFn, generateTrap);
          return hookedFn; // eslint-disable-next-line no-redeclare

          function generateTrap(before, after) {
            var order = [];
            var targetIndex;

            if (before.length || after.length) {
              before.forEach(addToOrder); // placeholder for target function wrapper

              targetIndex = order.push(undefined) - 1;
              after.forEach(addToOrder);

              trap = function trap(target, thisArg, args) {
                var curr = 0;
                var result;
                var callback = type === "async" && typeof args[args.length - 1] === "function" && args.pop();

                function bail(value) {
                  if (type === "sync") {
                    result = value;
                  } else if (callback) {
                    callback.apply(null, arguments);
                  }
                }

                function next(value) {
                  if (order[curr]) {
                    var args = rest(arguments);
                    next.bail = bail;
                    args.unshift(next);
                    return order[curr++].apply(thisArg, args);
                  }

                  if (type === "sync") {
                    result = value;
                  } else if (callback) {
                    callback.apply(null, arguments);
                  }
                }

                order[targetIndex] = function () {
                  var args = rest(arguments, 1);

                  if (type === "async" && callback) {
                    delete next.bail;
                    args.push(next);
                  }

                  var result = target.apply(thisArg, args);

                  if (type === "sync") {
                    next(result);
                  }
                };

                next.apply(null, args);
                return result;
              };
            } else {
              trap = undefined;
            }

            setTrap();

            function addToOrder(entry) {
              order.push(entry.hook);
            }
          }

          function setTrap() {
            if (ready || type === "sync" && !(config.ready & create.SYNC) || type === "async" && !(config.ready & create.ASYNC)) {
              handlers.apply = trap;
            } else if (type === "sync" || !(config.ready & create.QUEUE)) {
              handlers.apply = function () {
                throw packageName + ": hooked function not ready";
              };
            } else {
              handlers.apply = function () {
                var args = arguments;
                postReady.push(function () {
                  hookedFn.apply(args[1], args[2]);
                });
              };
            }
          }
        }

        dispatch.get = get;
        return dispatch;
      }
      /* global module */


      module.exports = create;
      /***/
    },

    /***/
    12:
    /***/
    function _(module, exports, __webpack_require__) {
      __webpack_require__(82);

      module.exports = __webpack_require__(16).Array.find;
      /***/
    },

    /***/
    13:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "b", function () {
        return hook;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "a", function () {
        return getHook;
      });
      /* harmony export (immutable) */


      __webpack_exports__["d"] = setupBeforeHookFnOnce;
      /* harmony export (immutable) */

      __webpack_exports__["c"] = module;
      /* harmony export (immutable) */

      __webpack_exports__["e"] = submodule;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0_fun_hooks_no_eval_index_js__ = __webpack_require__(118);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_fun_hooks_no_eval_index_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_fun_hooks_no_eval_index_js__);

      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance");
      }

      function _iterableToArray(iter) {
        if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        }
      }

      var hook = __WEBPACK_IMPORTED_MODULE_0_fun_hooks_no_eval_index_js___default()({
        ready: __WEBPACK_IMPORTED_MODULE_0_fun_hooks_no_eval_index_js___default.a.SYNC | __WEBPACK_IMPORTED_MODULE_0_fun_hooks_no_eval_index_js___default.a.ASYNC | __WEBPACK_IMPORTED_MODULE_0_fun_hooks_no_eval_index_js___default.a.QUEUE
      });

      var getHook = hook.get;

      function setupBeforeHookFnOnce(baseFn, hookFn) {
        var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 15;
        var result = baseFn.getHooks({
          hook: hookFn
        });

        if (result.length === 0) {
          baseFn.before(hookFn, priority);
        }
      }

      function module(name, install) {
        hook('async', function (submodules) {
          submodules.forEach(function (args) {
            return install.apply(void 0, _toConsumableArray(args));
          });
        }, name)([]); // will be queued until hook.ready() called in pbjs.processQueue();
      }

      function submodule(name) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        getHook(name).before(function (next, modules) {
          modules.push(args);
          next(modules);
        });
      }
      /***/

    },

    /***/
    14:
    /***/
    function _(module, exports, __webpack_require__) {
      var store = __webpack_require__(60)('wks');

      var uid = __webpack_require__(48);

      var _Symbol3 = __webpack_require__(19).Symbol;

      var USE_SYMBOL = typeof _Symbol3 == 'function';

      var $exports = module.exports = function (name) {
        return store[name] || (store[name] = USE_SYMBOL && _Symbol3[name] || (USE_SYMBOL ? _Symbol3 : uid)('Symbol.' + name));
      };

      $exports.store = store;
      /***/
    },

    /***/
    15:
    /***/
    function _(module, exports, __webpack_require__) {
      var global = __webpack_require__(19);

      var core = __webpack_require__(16);

      var ctx = __webpack_require__(27);

      var hide = __webpack_require__(21);

      var has = __webpack_require__(30);

      var PROTOTYPE = 'prototype';

      var $export = function $export(type, name, source) {
        var IS_FORCED = type & $export.F;
        var IS_GLOBAL = type & $export.G;
        var IS_STATIC = type & $export.S;
        var IS_PROTO = type & $export.P;
        var IS_BIND = type & $export.B;
        var IS_WRAP = type & $export.W;
        var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
        var expProto = exports[PROTOTYPE];
        var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
        var key, own, out;
        if (IS_GLOBAL) source = name;

        for (key in source) {
          // contains in native
          own = !IS_FORCED && target && target[key] !== undefined;
          if (own && has(exports, key)) continue; // export native or passed

          out = own ? target[key] : source[key]; // prevent global pollution for namespaces

          exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] // bind timers to global for call from export context
          : IS_BIND && own ? ctx(out, global) // wrap global constructors for prevent change them in library
          : IS_WRAP && target[key] == out ? function (C) {
            var F = function F(a, b, c) {
              if (this instanceof C) {
                switch (arguments.length) {
                  case 0:
                    return new C();

                  case 1:
                    return new C(a);

                  case 2:
                    return new C(a, b);
                }

                return new C(a, b, c);
              }

              return C.apply(this, arguments);
            };

            F[PROTOTYPE] = C[PROTOTYPE];
            return F; // make static versions for prototype methods
          }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out; // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%

          if (IS_PROTO) {
            (exports.virtual || (exports.virtual = {}))[key] = out; // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%

            if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
          }
        }
      }; // type bitmap


      $export.F = 1; // forced

      $export.G = 2; // global

      $export.S = 4; // static

      $export.P = 8; // proto

      $export.B = 16; // bind

      $export.W = 32; // wrap

      $export.U = 64; // safe

      $export.R = 128; // real proto method for `library`

      module.exports = $export;
      /***/
    },

    /***/
    16:
    /***/
    function _(module, exports) {
      var core = module.exports = {
        version: '2.6.11'
      };
      if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

      /***/
    },

    /***/
    17:
    /***/
    function _(module, exports) {
      module.exports = function (it) {
        return _typeof4(it) === 'object' ? it !== null : typeof it === 'function';
      };
      /***/

    },

    /***/
    170:
    /***/
    function _(module, exports, __webpack_require__) {
      // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
      var $export = __webpack_require__(15);

      var $find = __webpack_require__(45)(6);

      var KEY = 'findIndex';
      var forced = true; // Shouldn't skip holes

      if (KEY in []) Array(1)[KEY](function () {
        forced = false;
      });
      $export($export.P + $export.F * forced, 'Array', {
        findIndex: function findIndex(callbackfn
        /* , that = undefined */
        ) {
          return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });

      __webpack_require__(40)(KEY);
      /***/

    },

    /***/
    173:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */
      __webpack_exports__["a"] = listenMessagesFromCreative;
      /* unused harmony export _sendAdToCreative */

      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__events_js__ = __webpack_require__(8);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__events_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__events_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__native_js__ = __webpack_require__(23);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__constants_json__ = __webpack_require__(5);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__constants_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__constants_json__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__auctionManager_js__ = __webpack_require__(25);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5_core_js_library_fn_array_find_js__ = __webpack_require__(12);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5_core_js_library_fn_array_find_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_core_js_library_fn_array_find_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6__Renderer_js__ = __webpack_require__(10);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js__ = __webpack_require__(11);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js__);
      /* Secure Creatives
        Provides support for rendering creatives into cross domain iframes such as SafeFrame to prevent
         access to a publisher page from creative payloads.
       */


      var BID_WON = __WEBPACK_IMPORTED_MODULE_2__constants_json__["EVENTS"].BID_WON;

      function listenMessagesFromCreative() {
        window.addEventListener('message', receiveMessage, false);
      }

      function receiveMessage(ev) {
        var key = ev.message ? 'message' : 'data';
        var data = {};

        try {
          data = JSON.parse(ev[key]);
        } catch (e) {
          return;
        }

        if (data && data.adId) {
          var adObject = __WEBPACK_IMPORTED_MODULE_5_core_js_library_fn_array_find_js___default()(__WEBPACK_IMPORTED_MODULE_4__auctionManager_js__["a"
          /* auctionManager */
          ].getBidsReceived(), function (bid) {
            return bid.adId === data.adId;
          });

          if (adObject && data.message === 'Prebid Request') {
            _sendAdToCreative(adObject, data.adServerDomain, ev.source); // save winning bids


            __WEBPACK_IMPORTED_MODULE_4__auctionManager_js__["a"
            /* auctionManager */
            ].addWinningBid(adObject);

            __WEBPACK_IMPORTED_MODULE_0__events_js___default.a.emit(BID_WON, adObject);
          } // handle this script from native template in an ad server
          // window.parent.postMessage(JSON.stringify({
          //   message: 'Prebid Native',
          //   adId: '%%PATTERN:hb_adid%%'
          // }), '*');


          if (adObject && data.message === 'Prebid Native') {
            if (data.action === 'assetRequest') {
              var message = Object(__WEBPACK_IMPORTED_MODULE_1__native_js__["c"
              /* getAssetMessage */
              ])(data, adObject);
              ev.source.postMessage(JSON.stringify(message), ev.origin);
              return;
            }

            var trackerType = Object(__WEBPACK_IMPORTED_MODULE_1__native_js__["b"
            /* fireNativeTrackers */
            ])(data, adObject);

            if (trackerType === 'click') {
              return;
            }

            __WEBPACK_IMPORTED_MODULE_4__auctionManager_js__["a"
            /* auctionManager */
            ].addWinningBid(adObject);

            __WEBPACK_IMPORTED_MODULE_0__events_js___default.a.emit(BID_WON, adObject);
          }
        }
      }

      function _sendAdToCreative(adObject, remoteDomain, source) {
        var adId = adObject.adId,
            ad = adObject.ad,
            adUrl = adObject.adUrl,
            width = adObject.width,
            height = adObject.height,
            renderer = adObject.renderer,
            cpm = adObject.cpm; // rendering for outstream safeframe

        if (Object(__WEBPACK_IMPORTED_MODULE_6__Renderer_js__["c"
        /* isRendererRequired */
        ])(renderer)) {
          Object(__WEBPACK_IMPORTED_MODULE_6__Renderer_js__["b"
          /* executeRenderer */
          ])(renderer, adObject);
        } else if (adId) {
          resizeRemoteCreative(adObject);
          source.postMessage(JSON.stringify({
            message: 'Prebid Response',
            ad: Object(__WEBPACK_IMPORTED_MODULE_3__utils_js__["replaceAuctionPrice"])(ad, cpm),
            adUrl: Object(__WEBPACK_IMPORTED_MODULE_3__utils_js__["replaceAuctionPrice"])(adUrl, cpm),
            adId: adId,
            width: width,
            height: height
          }), remoteDomain);
        }
      }

      function resizeRemoteCreative(_ref) {
        var adId = _ref.adId,
            adUnitCode = _ref.adUnitCode,
            width = _ref.width,
            height = _ref.height; // resize both container div + iframe

        ['div', 'iframe'].forEach(function (elmType) {
          // not select element that gets removed after dfp render
          var element = getElementByAdUnit(elmType + ':not([style*="display: none"])');

          if (element) {
            var elementStyle = element.style;
            elementStyle.width = width + 'px';
            elementStyle.height = height + 'px';
          } else {
            Object(__WEBPACK_IMPORTED_MODULE_3__utils_js__["logWarn"])("Unable to locate matching page element for adUnitCode ".concat(adUnitCode, ".  Can't resize it to ad's dimensions.  Please review setup."));
          }
        });

        function getElementByAdUnit(elmType) {
          var id = getElementIdBasedOnAdServer(adId, adUnitCode);
          var parentDivEle = document.getElementById(id);
          return parentDivEle && parentDivEle.querySelector(elmType);
        }

        function getElementIdBasedOnAdServer(adId, adUnitCode) {
          if (window.googletag) {
            return getDfpElementId(adId);
          } else if (window.apntag) {
            return getAstElementId(adUnitCode);
          } else {
            return adUnitCode;
          }
        }

        function getDfpElementId(adId) {
          return __WEBPACK_IMPORTED_MODULE_5_core_js_library_fn_array_find_js___default()(window.googletag.pubads().getSlots(), function (slot) {
            return __WEBPACK_IMPORTED_MODULE_5_core_js_library_fn_array_find_js___default()(slot.getTargetingKeys(), function (key) {
              return __WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default()(slot.getTargeting(key), adId);
            });
          }).getSlotElementId();
        }

        function getAstElementId(adUnitCode) {
          var astTag = window.apntag.getTag(adUnitCode);
          return astTag && astTag.targetId;
        }
      }
      /***/

    },

    /***/
    174:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* unused harmony export addBidResponseBound */

      /* unused harmony export addBidderRequestsBound */

      /* unused harmony export enableOverrides */

      /* unused harmony export disableOverrides */

      /* unused harmony export bidExcluded */

      /* unused harmony export bidderExcluded */

      /* unused harmony export applyBidOverrides */

      /* unused harmony export addBidResponseHook */

      /* unused harmony export addBidderRequestsHook */

      /* unused harmony export getConfig */

      /* harmony export (immutable) */
      __webpack_exports__["a"] = sessionLoader;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__auction_js__ = __webpack_require__(42);

      var OVERRIDE_KEY = "pbjs:debugging";
      var addBidResponseBound;
      var addBidderRequestsBound;

      function logMessage(msg) {
        Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["logMessage"])('DEBUG: ' + msg);
      }

      function logWarn(msg) {
        Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["logWarn"])('DEBUG: ' + msg);
      }

      function addHooks(overrides) {
        addBidResponseBound = addBidResponseHook.bind(overrides);

        __WEBPACK_IMPORTED_MODULE_2__auction_js__["c"
        /* addBidResponse */
        ].before(addBidResponseBound, 5);

        addBidderRequestsBound = addBidderRequestsHook.bind(overrides);

        __WEBPACK_IMPORTED_MODULE_2__auction_js__["e"
        /* addBidderRequests */
        ].before(addBidderRequestsBound, 5);
      }

      function removeHooks() {
        __WEBPACK_IMPORTED_MODULE_2__auction_js__["c"
        /* addBidResponse */
        ].getHooks({
          hook: addBidResponseBound
        }).remove();

        __WEBPACK_IMPORTED_MODULE_2__auction_js__["e"
        /* addBidderRequests */
        ].getHooks({
          hook: addBidderRequestsBound
        }).remove();
      }

      function enableOverrides(overrides) {
        var fromSession = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        __WEBPACK_IMPORTED_MODULE_0__config_js__["b"
        /* config */
        ].setConfig({
          'debug': true
        });

        removeHooks();
        addHooks(overrides);
        logMessage("bidder overrides enabled".concat(fromSession ? ' from session' : ''));
      }

      function disableOverrides() {
        removeHooks();
        logMessage('bidder overrides disabled');
      }
      /**
       * @param {{bidder:string, adUnitCode:string}} overrideObj
       * @param {string} bidderCode
       * @param {string} adUnitCode
       * @returns {boolean}
       */


      function bidExcluded(overrideObj, bidderCode, adUnitCode) {
        if (overrideObj.bidder && overrideObj.bidder !== bidderCode) {
          return true;
        }

        if (overrideObj.adUnitCode && overrideObj.adUnitCode !== adUnitCode) {
          return true;
        }

        return false;
      }
      /**
       * @param {string[]} bidders
       * @param {string} bidderCode
       * @returns {boolean}
       */


      function bidderExcluded(bidders, bidderCode) {
        return Array.isArray(bidders) && bidders.indexOf(bidderCode) === -1;
      }
      /**
       * @param {Object} overrideObj
       * @param {Object} bidObj
       * @param {Object} bidType
       * @returns {Object} bidObj with overridden properties
       */


      function applyBidOverrides(overrideObj, bidObj, bidType) {
        return Object.keys(overrideObj).filter(function (key) {
          return ['adUnitCode', 'bidder'].indexOf(key) === -1;
        }).reduce(function (result, key) {
          logMessage("bidder overrides changed '".concat(result.adUnitCode, "/").concat(result.bidderCode, "' ").concat(bidType, ".").concat(key, " from '").concat(result[key], ".js' to '").concat(overrideObj[key], "'"));
          result[key] = overrideObj[key];
          return result;
        }, bidObj);
      }

      function addBidResponseHook(next, adUnitCode, bid) {
        var overrides = this;

        if (bidderExcluded(overrides.bidders, bid.bidderCode)) {
          logWarn("bidder '".concat(bid.bidderCode, "' excluded from auction by bidder overrides"));
          return;
        }

        if (Array.isArray(overrides.bids)) {
          overrides.bids.forEach(function (overrideBid) {
            if (!bidExcluded(overrideBid, bid.bidderCode, adUnitCode)) {
              applyBidOverrides(overrideBid, bid, 'bidder');
            }
          });
        }

        next(adUnitCode, bid);
      }

      function addBidderRequestsHook(next, bidderRequests) {
        var overrides = this;
        var includedBidderRequests = bidderRequests.filter(function (bidderRequest) {
          if (bidderExcluded(overrides.bidders, bidderRequest.bidderCode)) {
            logWarn("bidRequest '".concat(bidderRequest.bidderCode, "' excluded from auction by bidder overrides"));
            return false;
          }

          return true;
        });

        if (Array.isArray(overrides.bidRequests)) {
          includedBidderRequests.forEach(function (bidderRequest) {
            overrides.bidRequests.forEach(function (overrideBid) {
              bidderRequest.bids.forEach(function (bid) {
                if (!bidExcluded(overrideBid, bidderRequest.bidderCode, bid.adUnitCode)) {
                  applyBidOverrides(overrideBid, bid, 'bidRequest');
                }
              });
            });
          });
        }

        next(includedBidderRequests);
      }

      function getConfig(debugging) {
        if (!debugging.enabled) {
          disableOverrides();

          try {
            window.sessionStorage.removeItem(OVERRIDE_KEY);
          } catch (e) {}
        } else {
          try {
            window.sessionStorage.setItem(OVERRIDE_KEY, JSON.stringify(debugging));
          } catch (e) {}

          enableOverrides(debugging);
        }
      }

      __WEBPACK_IMPORTED_MODULE_0__config_js__["b"
      /* config */
      ].getConfig('debugging', function (_ref) {
        var debugging = _ref.debugging;
        return getConfig(debugging);
      });

      function sessionLoader(storage) {
        var overrides;

        try {
          storage = storage || window.sessionStorage;
          overrides = JSON.parse(storage.getItem(OVERRIDE_KEY));
        } catch (e) {}

        if (overrides) {
          enableOverrides(overrides, true);
        }
      }
      /***/

    },

    /***/
    18:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */
      __webpack_exports__["a"] = getGlobal; // if $$PREBID_GLOBAL$$ already exists in global document scope, use it, if not, create the object
      // global defination should happen BEFORE imports to avoid global undefined errors.

      window.pbjs = window.pbjs || {};
      window.pbjs.cmd = window.pbjs.cmd || [];
      window.pbjs.que = window.pbjs.que || []; // create a pbjs global pointer

      window._pbjsGlobals = window._pbjsGlobals || [];

      window._pbjsGlobals.push("pbjs");

      function getGlobal() {
        return window.pbjs;
      }
      /***/

    },

    /***/
    19:
    /***/
    function _(module, exports) {
      // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
      var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self // eslint-disable-next-line no-new-func
      : Function('return this')();
      if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

      /***/
    },

    /***/
    2:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "c", function () {
        return NATIVE;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "d", function () {
        return VIDEO;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "b", function () {
        return BANNER;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "a", function () {
        return ADPOD;
      });
      /**
       * This file contains the valid Media Types in Prebid.
       *
       * All adapters are assumed to support banner ads. Other media types are specified by Adapters when they
       * register themselves with prebid-core.
       */

      /**
       * @typedef {('native'|'video'|'banner')} MediaType
       * @typedef {('adpod')} VideoContext
       */

      /** @type MediaType */


      var NATIVE = 'native';
      /** @type MediaType */

      var VIDEO = 'video';
      /** @type MediaType */

      var BANNER = 'banner';
      /** @type VideoContext */

      var ADPOD = 'adpod';
      /***/
    },

    /***/
    20:
    /***/
    function _(module, exports, __webpack_require__) {
      var anObject = __webpack_require__(29);

      var IE8_DOM_DEFINE = __webpack_require__(83);

      var toPrimitive = __webpack_require__(84);

      var dP = Object.defineProperty;
      exports.f = __webpack_require__(22) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (IE8_DOM_DEFINE) try {
          return dP(O, P, Attributes);
        } catch (e) {
          /* empty */
        }
        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
        if ('value' in Attributes) O[P] = Attributes.value;
        return O;
      };
      /***/
    },

    /***/
    21:
    /***/
    function _(module, exports, __webpack_require__) {
      var dP = __webpack_require__(20);

      var createDesc = __webpack_require__(44);

      module.exports = __webpack_require__(22) ? function (object, key, value) {
        return dP.f(object, key, createDesc(1, value));
      } : function (object, key, value) {
        object[key] = value;
        return object;
      };
      /***/
    },

    /***/
    22:
    /***/
    function _(module, exports, __webpack_require__) {
      // Thank's IE8 for his funny defineProperty
      module.exports = !__webpack_require__(36)(function () {
        return Object.defineProperty({}, 'a', {
          get: function get() {
            return 7;
          }
        }).a != 7;
      });
      /***/
    },

    /***/
    23:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "e", function () {
        return nativeAdapters;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "a", function () {
        return NATIVE_TARGETING_KEYS;
      });
      /* harmony export (immutable) */


      __webpack_exports__["g"] = processNativeAdUnitParams;
      /* unused harmony export nativeAdUnit */

      /* unused harmony export nativeBidder */

      /* unused harmony export hasNonNativeBidder */

      /* harmony export (immutable) */

      __webpack_exports__["f"] = nativeBidIsValid;
      /* harmony export (immutable) */

      __webpack_exports__["b"] = fireNativeTrackers;
      /* harmony export (immutable) */

      __webpack_exports__["d"] = getNativeTargeting;
      /* harmony export (immutable) */

      __webpack_exports__["c"] = getAssetMessage;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_core_js_library_fn_array_includes__ = __webpack_require__(11);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_core_js_library_fn_array_includes___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_core_js_library_fn_array_includes__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__config_js__ = __webpack_require__(3);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var CONSTANTS = __webpack_require__(5);

      var nativeAdapters = [];
      var NATIVE_TARGETING_KEYS = Object.keys(CONSTANTS.NATIVE_KEYS).map(function (key) {
        return CONSTANTS.NATIVE_KEYS[key];
      });
      var IMAGE = {
        image: {
          required: true
        },
        title: {
          required: true
        },
        sponsoredBy: {
          required: true
        },
        clickUrl: {
          required: true
        },
        body: {
          required: false
        },
        icon: {
          required: false
        }
      };
      var SUPPORTED_TYPES = {
        image: IMAGE
      };
      /**
       * Recieves nativeParams from an adUnit. If the params were not of type 'type',
       * passes them on directly. If they were of type 'type', translate
       * them into the predefined specific asset requests for that type of native ad.
       */

      function processNativeAdUnitParams(params) {
        if (params && params.type && typeIsSupported(params.type)) {
          return SUPPORTED_TYPES[params.type];
        }

        return params;
      }
      /**
       * Check if the native type specified in the adUnit is supported by Prebid.
       */


      function typeIsSupported(type) {
        if (!(type && __WEBPACK_IMPORTED_MODULE_1_core_js_library_fn_array_includes___default()(Object.keys(SUPPORTED_TYPES), type))) {
          Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["logError"])("".concat(type, " nativeParam is not supported"));
          return false;
        }

        return true;
      }
      /**
       * Validate that the native assets on this bid contain all assets that were
       * marked as required in the adUnit configuration.
       * @param {Bid} bid Native bid to validate
       * @param {BidRequest[]} bidRequests All bid requests for an auction
       * @return {Boolean} If object is valid
       */


      function nativeBidIsValid(bid, bidRequests) {
        var bidRequest = Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["getBidRequest"])(bid.requestId, bidRequests);

        if (!bidRequest) {
          return false;
        } // all native bid responses must define a landing page url


        if (!Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepAccess"])(bid, 'native.clickUrl')) {
          return false;
        }

        if (Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepAccess"])(bid, 'native.image')) {
          if (!Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepAccess"])(bid, 'native.image.height') || !Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepAccess"])(bid, 'native.image.width')) {
            return false;
          }
        }

        if (Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepAccess"])(bid, 'native.icon')) {
          if (!Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepAccess"])(bid, 'native.icon.height') || !Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepAccess"])(bid, 'native.icon.width')) {
            return false;
          }
        }

        var requestedAssets = bidRequest.nativeParams;

        if (!requestedAssets) {
          return true;
        }

        var requiredAssets = Object.keys(requestedAssets).filter(function (key) {
          return requestedAssets[key].required;
        });
        var returnedAssets = Object.keys(bid['native']).filter(function (key) {
          return bid['native'][key];
        });
        return requiredAssets.every(function (asset) {
          return __WEBPACK_IMPORTED_MODULE_1_core_js_library_fn_array_includes___default()(returnedAssets, asset);
        });
      }
      /*
       * Native responses may have associated impression or click trackers.
       * This retrieves the appropriate tracker urls for the given ad object and
       * fires them. As a native creatives may be in a cross-origin frame, it may be
       * necessary to invoke this function via postMessage. secureCreatives is
       * configured to fire this function when it receives a `message` of 'Prebid Native'
       * and an `adId` with the value of the `bid.adId`. When a message is posted with
       * these parameters, impression trackers are fired. To fire click trackers, the
       * message should contain an `action` set to 'click'.
       *
       * // Native creative template example usage
       * <a href="%%CLICK_URL_UNESC%%%%PATTERN:hb_native_linkurl%%"
       *    target="_blank"
       *    onclick="fireTrackers('click')">
       *    %%PATTERN:hb_native_title%%
       * </a>
       *
       * <script>
       *   function fireTrackers(action) {
       *     var message = {message: 'Prebid Native', adId: '%%PATTERN:hb_adid%%'};
       *     if (action === 'click') {message.action = 'click';} // fires click trackers
       *     window.parent.postMessage(JSON.stringify(message), '*');
       *   }
       *   fireTrackers(); // fires impressions when creative is loaded
       * </script>
       */


      function fireNativeTrackers(message, adObject) {
        var trackers;

        if (message.action === 'click') {
          trackers = adObject['native'] && adObject['native'].clickTrackers;
        } else {
          trackers = adObject['native'] && adObject['native'].impressionTrackers;

          if (adObject['native'] && adObject['native'].javascriptTrackers) {
            Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["insertHtmlIntoIframe"])(adObject['native'].javascriptTrackers);
          }
        }

        (trackers || []).forEach(__WEBPACK_IMPORTED_MODULE_0__utils_js__["triggerPixel"]);
        return message.action;
      }
      /**
       * Gets native targeting key-value pairs
       * @param {Object} bid
       * @return {Object} targeting
       */


      function getNativeTargeting(bid, bidReq) {
        var keyValues = {};

        var sendNativeTargetingKeysFlag = __WEBPACK_IMPORTED_MODULE_2__config_js__["b"
        /* config */
        ].getConfig('sendNativeTargetingKeys');

        var nativeMediaType = Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepAccess"])(bidReq, 'mediaTypes.native');
        var assetsWithSendTargeting = Object.keys(nativeMediaType || []).filter(function (asset) {
          return nativeMediaType[asset].sendTargeting === true;
        });

        if (sendNativeTargetingKeysFlag === false && assetsWithSendTargeting.length === 0) {
          return keyValues;
        }

        var activeAssets = sendNativeTargetingKeysFlag === false && assetsWithSendTargeting.length > 0 ? assetsWithSendTargeting : Object.keys(bid['native']);
        activeAssets.forEach(function (asset) {
          var key = CONSTANTS.NATIVE_KEYS[asset];
          var value = getAssetValue(bid['native'][asset]);
          var sendPlaceholder = Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepAccess"])(bidReq, "mediaTypes.native.".concat(asset, ".sendId"));

          if (sendPlaceholder) {
            var placeholder = "".concat(key, ":").concat(bid.adId);
            value = placeholder;
          }

          if (key && value) {
            keyValues[key] = value;
          }
        });
        return keyValues;
      }
      /**
       * Constructs a message object containing asset values for each of the
       * requested data keys.
       */


      function getAssetMessage(data, adObject) {
        var message = {
          message: 'assetResponse',
          adId: data.adId,
          assets: []
        };
        data.assets.forEach(function (asset) {
          var key = Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["getKeyByValue"])(CONSTANTS.NATIVE_KEYS, asset);
          var value = getAssetValue(adObject["native"][key]);
          message.assets.push({
            key: key,
            value: value
          });
        });
        return message;
      }
      /**
       * Native assets can be a string or an object with a url prop. Returns the value
       * appropriate for sending in adserver targeting or placeholder replacement.
       */


      function getAssetValue(value) {
        if (_typeof(value) === 'object' && value.url) {
          return value.url;
        }

        return value;
      }
      /***/

    },

    /***/
    24:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */
      __webpack_exports__["a"] = createBid;

      var utils = __webpack_require__(0);
      /**
       Required paramaters
       bidderCode,
       height,
       width,
       statusCode
       Optional paramaters
       adId,
       cpm,
       ad,
       adUrl,
       dealId,
       priceKeyString;
       */


      function Bid(statusCode, bidRequest) {
        var _bidSrc = bidRequest && bidRequest.src || 'client';

        var _statusCode = statusCode || 0;

        this.bidderCode = bidRequest && bidRequest.bidder || '';
        this.width = 0;
        this.height = 0;
        this.statusMessage = _getStatus();
        this.adId = utils.getUniqueIdentifierStr();
        this.requestId = bidRequest && bidRequest.bidId;
        this.mediaType = 'banner';
        this.source = _bidSrc;

        function _getStatus() {
          switch (_statusCode) {
            case 0:
              return 'Pending';

            case 1:
              return 'Bid available';

            case 2:
              return 'Bid returned empty or error response';

            case 3:
              return 'Bid timed out';
          }
        }

        this.getStatusCode = function () {
          return _statusCode;
        }; // returns the size of the bid creative. Concatenation of width and height by ‘x’.


        this.getSize = function () {
          return this.width + 'x' + this.height;
        };
      } // Bid factory function.


      function createBid(statusCode, bidRequest) {
        return new Bid(statusCode, bidRequest);
      }
      /***/

    },

    /***/
    25:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* unused harmony export newAuctionManager */

      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "a", function () {
        return auctionManager;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__auction_js__ = __webpack_require__(42);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_find_js__ = __webpack_require__(12);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_find_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_find_js__);
      /**
       * AuctionManager modules is responsible for creating auction instances.
       * This module is the gateway for Prebid core to access auctions.
       * It stores all created instances of auction and can be used to get consolidated values from auction.
       */

      /**
       * @typedef {Object} AuctionManager
       *
       * @property {function(): Array} getBidsRequested - returns consolidated bid requests
       * @property {function(): Array} getBidsReceived - returns consolidated bid received
       * @property {function(): Array} getAdUnits - returns consolidated adUnits
       * @property {function(): Array} getAdUnitCodes - returns consolidated adUnitCodes
       * @property {function(): Object} createAuction - creates auction instance and stores it for future reference
       * @property {function(): Object} findBidByAdId - find bid received by adId. This function will be called by $$PREBID_GLOBAL$$.renderAd
       * @property {function(): Object} getStandardBidderAdServerTargeting - returns standard bidder targeting for all the adapters. Refer http://prebid.org/dev-docs/publisher-api-reference.html#module_pbjs.bidderSettings for more details
       */


      var CONSTANTS = __webpack_require__(5);
      /**
       * Creates new instance of auctionManager. There will only be one instance of auctionManager but
       * a factory is created to assist in testing.
       *
       * @returns {AuctionManager} auctionManagerInstance
       */


      function newAuctionManager() {
        var _auctions = [];
        var auctionManager = {};

        auctionManager.addWinningBid = function (bid) {
          var auction = __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_find_js___default()(_auctions, function (auction) {
            return auction.getAuctionId() === bid.auctionId;
          });

          if (auction) {
            bid.status = CONSTANTS.BID_STATUS.RENDERED;
            auction.addWinningBid(bid);
          } else {
            Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["logWarn"])("Auction not found when adding winning bid");
          }
        };

        auctionManager.getAllWinningBids = function () {
          return _auctions.map(function (auction) {
            return auction.getWinningBids();
          }).reduce(__WEBPACK_IMPORTED_MODULE_0__utils_js__["flatten"], []);
        };

        auctionManager.getBidsRequested = function () {
          return _auctions.map(function (auction) {
            return auction.getBidRequests();
          }).reduce(__WEBPACK_IMPORTED_MODULE_0__utils_js__["flatten"], []);
        };

        auctionManager.getNoBids = function () {
          return _auctions.map(function (auction) {
            return auction.getNoBids();
          }).reduce(__WEBPACK_IMPORTED_MODULE_0__utils_js__["flatten"], []);
        };

        auctionManager.getBidsReceived = function () {
          return _auctions.map(function (auction) {
            if (auction.getAuctionStatus() === __WEBPACK_IMPORTED_MODULE_1__auction_js__["a"
            /* AUCTION_COMPLETED */
            ]) {
              return auction.getBidsReceived();
            }
          }).reduce(__WEBPACK_IMPORTED_MODULE_0__utils_js__["flatten"], []).filter(function (bid) {
            return bid;
          });
        };

        auctionManager.getAdUnits = function () {
          return _auctions.map(function (auction) {
            return auction.getAdUnits();
          }).reduce(__WEBPACK_IMPORTED_MODULE_0__utils_js__["flatten"], []);
        };

        auctionManager.getAdUnitCodes = function () {
          return _auctions.map(function (auction) {
            return auction.getAdUnitCodes();
          }).reduce(__WEBPACK_IMPORTED_MODULE_0__utils_js__["flatten"], []).filter(__WEBPACK_IMPORTED_MODULE_0__utils_js__["uniques"]);
        };

        auctionManager.createAuction = function (_ref) {
          var adUnits = _ref.adUnits,
              adUnitCodes = _ref.adUnitCodes,
              callback = _ref.callback,
              cbTimeout = _ref.cbTimeout,
              labels = _ref.labels,
              auctionId = _ref.auctionId;
          var auction = Object(__WEBPACK_IMPORTED_MODULE_1__auction_js__["k"
          /* newAuction */
          ])({
            adUnits: adUnits,
            adUnitCodes: adUnitCodes,
            callback: callback,
            cbTimeout: cbTimeout,
            labels: labels,
            auctionId: auctionId
          });

          _addAuction(auction);

          return auction;
        };

        auctionManager.findBidByAdId = function (adId) {
          return __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_find_js___default()(_auctions.map(function (auction) {
            return auction.getBidsReceived();
          }).reduce(__WEBPACK_IMPORTED_MODULE_0__utils_js__["flatten"], []), function (bid) {
            return bid.adId === adId;
          });
        };

        auctionManager.getStandardBidderAdServerTargeting = function () {
          return Object(__WEBPACK_IMPORTED_MODULE_1__auction_js__["j"
          /* getStandardBidderSettings */
          ])()[CONSTANTS.JSON_MAPPING.ADSERVER_TARGETING];
        };

        auctionManager.setStatusForBids = function (adId, status) {
          var bid = auctionManager.findBidByAdId(adId);
          if (bid) bid.status = status;

          if (bid && status === CONSTANTS.BID_STATUS.BID_TARGETING_SET) {
            var auction = __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_find_js___default()(_auctions, function (auction) {
              return auction.getAuctionId() === bid.auctionId;
            });

            if (auction) auction.setBidTargeting(bid);
          }
        };

        auctionManager.getLastAuctionId = function () {
          return _auctions.length && _auctions[_auctions.length - 1].getAuctionId();
        };

        function _addAuction(auction) {
          _auctions.push(auction);
        }

        return auctionManager;
      }

      var auctionManager = newAuctionManager();
      /***/
    },

    /***/
    269:
    /***/
    function _(module, exports, __webpack_require__) {
      __webpack_require__(270);

      module.exports = __webpack_require__(16).String.includes;
      /***/
    },

    /***/
    27:
    /***/
    function _(module, exports, __webpack_require__) {
      // optional / simple context binding
      var aFunction = __webpack_require__(57);

      module.exports = function (fn, that, length) {
        aFunction(fn);
        if (that === undefined) return fn;

        switch (length) {
          case 1:
            return function (a) {
              return fn.call(that, a);
            };

          case 2:
            return function (a, b) {
              return fn.call(that, a, b);
            };

          case 3:
            return function (a, b, c) {
              return fn.call(that, a, b, c);
            };
        }

        return function ()
        /* ...args */
        {
          return fn.apply(that, arguments);
        };
      };
      /***/

    },

    /***/
    270:
    /***/
    function _(module, exports, __webpack_require__) {
      // 21.1.3.7 String.prototype.includes(searchString, position = 0)
      var $export = __webpack_require__(15);

      var context = __webpack_require__(271);

      var INCLUDES = 'includes';
      $export($export.P + $export.F * __webpack_require__(273)(INCLUDES), 'String', {
        includes: function includes(searchString
        /* , position = 0 */
        ) {
          return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      /***/
    },

    /***/
    271:
    /***/
    function _(module, exports, __webpack_require__) {
      // helper for String#{startsWith, endsWith, includes}
      var isRegExp = __webpack_require__(272);

      var defined = __webpack_require__(38);

      module.exports = function (that, searchString, NAME) {
        if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
        return String(defined(that));
      };
      /***/

    },

    /***/
    272:
    /***/
    function _(module, exports, __webpack_require__) {
      // 7.2.8 IsRegExp(argument)
      var isObject = __webpack_require__(17);

      var cof = __webpack_require__(37);

      var MATCH = __webpack_require__(14)('match');

      module.exports = function (it) {
        var isRegExp;
        return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
      };
      /***/

    },

    /***/
    273:
    /***/
    function _(module, exports, __webpack_require__) {
      var MATCH = __webpack_require__(14)('match');

      module.exports = function (KEY) {
        var re = /./;

        try {
          '/./'[KEY](re);
        } catch (e) {
          try {
            re[MATCH] = false;
            return !'/./'[KEY](re);
          } catch (f) {
            /* empty */
          }
        }

        return true;
      };
      /***/

    },

    /***/
    28:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */
      __webpack_exports__["a"] = loadExternalScript;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0_core_js_library_fn_array_includes_js__ = __webpack_require__(11);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_core_js_library_fn_array_includes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_core_js_library_fn_array_includes_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__utils_js__ = __webpack_require__(0);

      var _requestCache = {}; // The below list contains modules or vendors whom Prebid allows to load external JS.

      var _approvedLoadExternalJSList = ['criteo', 'outstream', 'adagio', 'browsi'];
      /**
       * Loads external javascript. Can only be used if external JS is approved by Prebid. See https://github.com/prebid/prebid-js-external-js-template#policy
       * Each unique URL will be loaded at most 1 time.
       * @param {string} url the url to load
       * @param {string} moduleCode bidderCode or module code of the module requesting this resource
       * @param {function} [callback] callback function to be called after the script is loaded.
       */

      function loadExternalScript(url, moduleCode, callback) {
        if (!moduleCode || !url) {
          __WEBPACK_IMPORTED_MODULE_1__utils_js__["logError"]('cannot load external script without url and moduleCode');

          return;
        }

        if (!__WEBPACK_IMPORTED_MODULE_0_core_js_library_fn_array_includes_js___default()(_approvedLoadExternalJSList, moduleCode)) {
          __WEBPACK_IMPORTED_MODULE_1__utils_js__["logError"]("".concat(moduleCode, " not whitelisted for loading external JavaScript"));

          return;
        } // only load each asset once


        if (_requestCache[url]) {
          if (callback && typeof callback === 'function') {
            if (_requestCache[url].loaded) {
              // invokeCallbacks immediately
              callback();
            } else {
              // queue the callback
              _requestCache[url].callbacks.push(callback);
            }
          }

          return _requestCache[url].tag;
        }

        _requestCache[url] = {
          loaded: false,
          tag: null,
          callbacks: []
        };

        if (callback && typeof callback === 'function') {
          _requestCache[url].callbacks.push(callback);
        }

        __WEBPACK_IMPORTED_MODULE_1__utils_js__["logWarn"]("module ".concat(moduleCode, " is loading external JavaScript"));

        return requestResource(url, function () {
          _requestCache[url].loaded = true;

          try {
            for (var i = 0; i < _requestCache[url].callbacks.length; i++) {
              _requestCache[url].callbacks[i]();
            }
          } catch (e) {
            __WEBPACK_IMPORTED_MODULE_1__utils_js__["logError"]('Error executing callback', 'adloader.js:loadExternalScript', e);
          }
        });

        function requestResource(tagSrc, callback) {
          var jptScript = document.createElement('script');
          jptScript.type = 'text/javascript';
          jptScript.async = true;
          _requestCache[url].tag = jptScript;

          if (jptScript.readyState) {
            jptScript.onreadystatechange = function () {
              if (jptScript.readyState === 'loaded' || jptScript.readyState === 'complete') {
                jptScript.onreadystatechange = null;
                callback();
              }
            };
          } else {
            jptScript.onload = function () {
              callback();
            };
          }

          jptScript.src = tagSrc; // add the new script tag to the page

          __WEBPACK_IMPORTED_MODULE_1__utils_js__["insertElement"](jptScript);

          return jptScript;
        }
      }
      /***/

    },

    /***/
    29:
    /***/
    function _(module, exports, __webpack_require__) {
      var isObject = __webpack_require__(17);

      module.exports = function (it) {
        if (!isObject(it)) throw TypeError(it + ' is not an object!');
        return it;
      };
      /***/

    },

    /***/
    3:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "a", function () {
        return RANDOM;
      });
      /* unused harmony export newConfig */

      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "b", function () {
        return config;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__cpmBucketManager_js__ = __webpack_require__(43);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_core_js_library_fn_array_find_js__ = __webpack_require__(12);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_core_js_library_fn_array_find_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_core_js_library_fn_array_find_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_includes_js__ = __webpack_require__(11);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_includes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_includes_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_set_js__ = __webpack_require__(63);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_set_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_set_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__url_js__ = __webpack_require__(9);

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }
      /*
       * Module for getting and setting Prebid configuration.
       */

      /**
       * @typedef {Object} MediaTypePriceGranularity
       *
       * @property {(string|Object)} [banner]
       * @property {(string|Object)} [native]
       * @property {(string|Object)} [video]
       * @property {(string|Object)} [video-instream]
       * @property {(string|Object)} [video-outstream]
       */


      var from = __webpack_require__(76);

      var utils = __webpack_require__(0);

      var CONSTANTS = __webpack_require__(5);

      var DEFAULT_DEBUG = (Object(__WEBPACK_IMPORTED_MODULE_4__url_js__["d"
      /* parseQS */
      ])(window.location.search)[CONSTANTS.DEBUG_MODE] || '').toUpperCase() === 'TRUE';
      var DEFAULT_BIDDER_TIMEOUT = 3000;
      var DEFAULT_PUBLISHER_DOMAIN = window.location.origin;
      var DEFAULT_ENABLE_SEND_ALL_BIDS = true;
      var DEFAULT_DISABLE_AJAX_TIMEOUT = false;
      var DEFAULT_BID_CACHE = false;
      var DEFAULT_DEVICE_ACCESS = true;
      var DEFAULT_TIMEOUTBUFFER = 400;
      var RANDOM = 'random';
      var FIXED = 'fixed';
      var VALID_ORDERS = {};
      VALID_ORDERS[RANDOM] = true;
      VALID_ORDERS[FIXED] = true;
      var DEFAULT_BIDDER_SEQUENCE = RANDOM;
      var GRANULARITY_OPTIONS = {
        LOW: 'low',
        MEDIUM: 'medium',
        HIGH: 'high',
        AUTO: 'auto',
        DENSE: 'dense',
        CUSTOM: 'custom'
      };
      var ALL_TOPICS = '*';
      /**
       * @typedef {object} PrebidConfig
       *
       * @property {string} cache.url Set a url if we should use prebid-cache to store video bids before adding
       *   bids to the auction. **NOTE** This must be set if you want to use the dfpAdServerVideo module.
       */

      function newConfig() {
        var listeners = [];
        var defaults;
        var config;
        var bidderConfig;
        var currBidder = null;

        function resetConfig() {
          defaults = {};
          var newConfig = {
            // `debug` is equivalent to legacy `pbjs.logging` property
            _debug: DEFAULT_DEBUG,

            get debug() {
              return this._debug;
            },

            set debug(val) {
              this._debug = val;
            },

            // default timeout for all bids
            _bidderTimeout: DEFAULT_BIDDER_TIMEOUT,

            get bidderTimeout() {
              return this._bidderTimeout;
            },

            set bidderTimeout(val) {
              this._bidderTimeout = val;
            },

            // domain where prebid is running for cross domain iframe communication
            _publisherDomain: DEFAULT_PUBLISHER_DOMAIN,

            get publisherDomain() {
              return this._publisherDomain;
            },

            set publisherDomain(val) {
              this._publisherDomain = val;
            },

            // calls existing function which may be moved after deprecation
            _priceGranularity: GRANULARITY_OPTIONS.MEDIUM,

            set priceGranularity(val) {
              if (validatePriceGranularity(val)) {
                if (typeof val === 'string') {
                  this._priceGranularity = hasGranularity(val) ? val : GRANULARITY_OPTIONS.MEDIUM;
                } else if (utils.isPlainObject(val)) {
                  this._customPriceBucket = val;
                  this._priceGranularity = GRANULARITY_OPTIONS.CUSTOM;
                  utils.logMessage('Using custom price granularity');
                }
              }
            },

            get priceGranularity() {
              return this._priceGranularity;
            },

            _customPriceBucket: {},

            get customPriceBucket() {
              return this._customPriceBucket;
            },

            /**
             * mediaTypePriceGranularity
             * @type {MediaTypePriceGranularity}
             */
            _mediaTypePriceGranularity: {},

            get mediaTypePriceGranularity() {
              return this._mediaTypePriceGranularity;
            },

            set mediaTypePriceGranularity(val) {
              var _this = this;

              this._mediaTypePriceGranularity = Object.keys(val).reduce(function (aggregate, item) {
                if (validatePriceGranularity(val[item])) {
                  if (typeof val === 'string') {
                    aggregate[item] = hasGranularity(val[item]) ? val[item] : _this._priceGranularity;
                  } else if (utils.isPlainObject(val)) {
                    aggregate[item] = val[item];
                    utils.logMessage("Using custom price granularity for ".concat(item));
                  }
                } else {
                  utils.logWarn("Invalid price granularity for media type: ".concat(item));
                }

                return aggregate;
              }, {});
            },

            _sendAllBids: DEFAULT_ENABLE_SEND_ALL_BIDS,

            get enableSendAllBids() {
              return this._sendAllBids;
            },

            set enableSendAllBids(val) {
              this._sendAllBids = val;
            },

            _useBidCache: DEFAULT_BID_CACHE,

            get useBidCache() {
              return this._useBidCache;
            },

            set useBidCache(val) {
              this._useBidCache = val;
            },

            /**
             * deviceAccess set to false will disable setCookie, getCookie, hasLocalStorage
             * @type {boolean}
             */
            _deviceAccess: DEFAULT_DEVICE_ACCESS,

            get deviceAccess() {
              return this._deviceAccess;
            },

            set deviceAccess(val) {
              this._deviceAccess = val;
            },

            _bidderSequence: DEFAULT_BIDDER_SEQUENCE,

            get bidderSequence() {
              return this._bidderSequence;
            },

            set bidderSequence(val) {
              if (VALID_ORDERS[val]) {
                this._bidderSequence = val;
              } else {
                utils.logWarn("Invalid order: ".concat(val, ". Bidder Sequence was not set."));
              }
            },

            // timeout buffer to adjust for bidder CDN latency
            _timeoutBuffer: DEFAULT_TIMEOUTBUFFER,

            get timeoutBuffer() {
              return this._timeoutBuffer;
            },

            set timeoutBuffer(val) {
              this._timeoutBuffer = val;
            },

            _disableAjaxTimeout: DEFAULT_DISABLE_AJAX_TIMEOUT,

            get disableAjaxTimeout() {
              return this._disableAjaxTimeout;
            },

            set disableAjaxTimeout(val) {
              this._disableAjaxTimeout = val;
            }

          };

          if (config) {
            callSubscribers(Object.keys(config).reduce(function (memo, topic) {
              if (config[topic] !== newConfig[topic]) {
                memo[topic] = newConfig[topic] || {};
              }

              return memo;
            }, {}));
          }

          config = newConfig;
          bidderConfig = {};

          function hasGranularity(val) {
            return __WEBPACK_IMPORTED_MODULE_1_core_js_library_fn_array_find_js___default()(Object.keys(GRANULARITY_OPTIONS), function (option) {
              return val === GRANULARITY_OPTIONS[option];
            });
          }

          function validatePriceGranularity(val) {
            if (!val) {
              utils.logError('Prebid Error: no value passed to `setPriceGranularity()`');
              return false;
            }

            if (typeof val === 'string') {
              if (!hasGranularity(val)) {
                utils.logWarn('Prebid Warning: setPriceGranularity was called with invalid setting, using `medium` as default.');
              }
            } else if (utils.isPlainObject(val)) {
              if (!Object(__WEBPACK_IMPORTED_MODULE_0__cpmBucketManager_js__["b"
              /* isValidPriceConfig */
              ])(val)) {
                utils.logError('Invalid custom price value passed to `setPriceGranularity()`');
                return false;
              }
            }

            return true;
          }
        }
        /**
         * Returns base config with bidder overrides (if there is currently a bidder)
         * @private
         */


        function _getConfig() {
          if (currBidder && bidderConfig && utils.isPlainObject(bidderConfig[currBidder])) {
            var currBidderConfig = bidderConfig[currBidder];
            var configTopicSet = new __WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_set_js___default.a(Object.keys(config).concat(Object.keys(currBidderConfig)));
            return from(configTopicSet).reduce(function (memo, topic) {
              if (typeof currBidderConfig[topic] === 'undefined') {
                memo[topic] = config[topic];
              } else if (typeof config[topic] === 'undefined') {
                memo[topic] = currBidderConfig[topic];
              } else {
                if (utils.isPlainObject(currBidderConfig[topic])) {
                  memo[topic] = _extends({}, config[topic], currBidderConfig[topic]);
                } else {
                  memo[topic] = currBidderConfig[topic];
                }
              }

              return memo;
            }, {});
          }

          return _extends({}, config);
        }
        /*
         * Returns configuration object if called without parameters,
         * or single configuration property if given a string matching a configuration
         * property name.  Allows deep access e.g. getConfig('currency.adServerCurrency')
         *
         * If called with callback parameter, or a string and a callback parameter,
         * subscribes to configuration updates. See `subscribe` function for usage.
         */


        function getConfig() {
          if (arguments.length <= 1 && typeof (arguments.length <= 0 ? undefined : arguments[0]) !== 'function') {
            var option = arguments.length <= 0 ? undefined : arguments[0];
            return option ? utils.deepAccess(_getConfig(), option) : _getConfig();
          }

          return subscribe.apply(void 0, arguments);
        }
        /**
         * Internal API for modules (such as prebid-server) that might need access to all bidder config
         */


        function getBidderConfig() {
          return bidderConfig;
        }
        /*
         * Sets configuration given an object containing key-value pairs and calls
         * listeners that were added by the `subscribe` function
         */


        function setConfig(options) {
          if (!utils.isPlainObject(options)) {
            utils.logError('setConfig options must be an object');
            return;
          }

          var topics = Object.keys(options);
          var topicalConfig = {};
          topics.forEach(function (topic) {
            var option = options[topic];

            if (utils.isPlainObject(defaults[topic]) && utils.isPlainObject(option)) {
              option = _extends({}, defaults[topic], option);
            }

            topicalConfig[topic] = config[topic] = option;
          });
          callSubscribers(topicalConfig);
        }
        /**
         * Sets configuration defaults which setConfig values can be applied on top of
         * @param {object} options
         */


        function setDefaults(options) {
          if (!utils.isPlainObject(defaults)) {
            utils.logError('defaults must be an object');
            return;
          }

          _extends(defaults, options); // Add default values to config as well


          _extends(config, options);
        }
        /*
         * Adds a function to a set of listeners that are invoked whenever `setConfig`
         * is called. The subscribed function will be passed the options object that
         * was used in the `setConfig` call. Topics can be subscribed to to only get
         * updates when specific properties are updated by passing a topic string as
         * the first parameter.
         *
         * Returns an `unsubscribe` function for removing the subscriber from the
         * set of listeners
         *
         * Example use:
         * // subscribe to all configuration changes
         * subscribe((config) => console.log('config set:', config));
         *
         * // subscribe to only 'logging' changes
         * subscribe('logging', (config) => console.log('logging set:', config));
         *
         * // unsubscribe
         * const unsubscribe = subscribe(...);
         * unsubscribe(); // no longer listening
         */


        function subscribe(topic, listener) {
          var callback = listener;

          if (typeof topic !== 'string') {
            // first param should be callback function in this case,
            // meaning it gets called for any config change
            callback = topic;
            topic = ALL_TOPICS;
          }

          if (typeof callback !== 'function') {
            utils.logError('listener must be a function');
            return;
          }

          var nl = {
            topic: topic,
            callback: callback
          };
          listeners.push(nl); // save and call this function to remove the listener

          return function unsubscribe() {
            listeners.splice(listeners.indexOf(nl), 1);
          };
        }
        /*
         * Calls listeners that were added by the `subscribe` function
         */


        function callSubscribers(options) {
          var TOPICS = Object.keys(options); // call subscribers of a specific topic, passing only that configuration

          listeners.filter(function (listener) {
            return __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_includes_js___default()(TOPICS, listener.topic);
          }).forEach(function (listener) {
            listener.callback(_defineProperty({}, listener.topic, options[listener.topic]));
          }); // call subscribers that didn't give a topic, passing everything that was set

          listeners.filter(function (listener) {
            return listener.topic === ALL_TOPICS;
          }).forEach(function (listener) {
            return listener.callback(options);
          });
        }

        function setBidderConfig(config) {
          try {
            check(config);
            config.bidders.forEach(function (bidder) {
              if (!bidderConfig[bidder]) {
                bidderConfig[bidder] = {};
              }

              Object.keys(config.config).forEach(function (topic) {
                var option = config.config[topic];

                if (utils.isPlainObject(option)) {
                  bidderConfig[bidder][topic] = _extends({}, bidderConfig[bidder][topic] || {}, option);
                } else {
                  bidderConfig[bidder][topic] = option;
                }
              });
            });
          } catch (e) {
            utils.logError(e);
          }

          function check(obj) {
            if (!utils.isPlainObject(obj)) {
              throw 'setBidderConfig bidder options must be an object';
            }

            if (!(Array.isArray(obj.bidders) && obj.bidders.length)) {
              throw 'setBidderConfig bidder options must contain a bidders list with at least 1 bidder';
            }

            if (!utils.isPlainObject(obj.config)) {
              throw 'setBidderConfig bidder options must contain a config object';
            }
          }
        }
        /**
         * Internal functions for core to execute some synchronous code while having an active bidder set.
         */


        function runWithBidder(bidder, fn) {
          currBidder = bidder;

          try {
            return fn();
          } finally {
            currBidder = null;
          }
        }

        function callbackWithBidder(bidder) {
          return function (cb) {
            return function () {
              if (typeof cb === 'function') {
                var _utils$bind;

                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                return runWithBidder(bidder, (_utils$bind = utils.bind).call.apply(_utils$bind, [cb, this].concat(args)));
              } else {
                utils.logWarn('config.callbackWithBidder callback is not a function');
              }
            };
          };
        }

        resetConfig();
        return {
          getConfig: getConfig,
          setConfig: setConfig,
          setDefaults: setDefaults,
          resetConfig: resetConfig,
          runWithBidder: runWithBidder,
          callbackWithBidder: callbackWithBidder,
          setBidderConfig: setBidderConfig,
          getBidderConfig: getBidderConfig
        };
      }

      var config = newConfig();
      /***/
    },

    /***/
    30:
    /***/
    function _(module, exports) {
      var hasOwnProperty = {}.hasOwnProperty;

      module.exports = function (it, key) {
        return hasOwnProperty.call(it, key);
      };
      /***/

    },

    /***/
    31:
    /***/
    function _(module, exports) {
      module.exports = {};
      /***/
    },

    /***/
    32:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */
      __webpack_exports__["a"] = detectReferer;
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "b", function () {
        return getRefererInfo;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(0);

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }
      /**
       * The referer detection module attempts to gather referer information from the current page that prebid.js resides in.
       * The information that it tries to collect includes:
       * The detected top url in the nav bar,
       * Whether it was able to reach the top most window (if for example it was embedded in several iframes),
       * The number of iframes it was embedded in if applicable,
       * A list of the domains of each embedded window if applicable.
       * Canonical URL which refers to an HTML link element, with the attribute of rel="canonical", found in the <head> element of your webpage
       */


      function detectReferer(win) {
        /**
         * Returns number of frames to reach top from current frame where prebid.js sits
         * @returns {Array} levels
         */
        function getLevels() {
          var levels = walkUpWindows();
          var ancestors = getAncestorOrigins();

          if (ancestors) {
            for (var i = 0, l = ancestors.length; i < l; i++) {
              levels[i].ancestor = ancestors[i];
            }
          }

          return levels;
        }
        /**
         * This function would return a read-only array of hostnames for all the parent frames.
         * win.location.ancestorOrigins is only supported in webkit browsers. For non-webkit browsers it will return undefined.
         * @returns {(undefined|Array)} Ancestor origins or undefined
         */


        function getAncestorOrigins() {
          try {
            if (!win.location.ancestorOrigins) {
              return;
            }

            return win.location.ancestorOrigins;
          } catch (e) {// Ignore error
          }
        }
        /**
         * This function would try to get referer and urls for all parent frames in case of win.location.ancestorOrigins undefined.
         * @param {Array} levels
         * @returns {Object} urls for all parent frames and top most detected referer url
         */


        function getPubUrlStack(levels) {
          var stack = [];
          var defUrl = null;
          var frameLocation = null;
          var prevFrame = null;
          var prevRef = null;
          var ancestor = null;
          var detectedRefererUrl = null;
          var i;

          for (i = levels.length - 1; i >= 0; i--) {
            try {
              frameLocation = levels[i].location;
            } catch (e) {// Ignore error
            }

            if (frameLocation) {
              stack.push(frameLocation);

              if (!detectedRefererUrl) {
                detectedRefererUrl = frameLocation;
              }
            } else if (i !== 0) {
              prevFrame = levels[i - 1];

              try {
                prevRef = prevFrame.referrer;
                ancestor = prevFrame.ancestor;
              } catch (e) {// Ignore error
              }

              if (prevRef) {
                stack.push(prevRef);

                if (!detectedRefererUrl) {
                  detectedRefererUrl = prevRef;
                }
              } else if (ancestor) {
                stack.push(ancestor);

                if (!detectedRefererUrl) {
                  detectedRefererUrl = ancestor;
                }
              } else {
                stack.push(defUrl);
              }
            } else {
              stack.push(defUrl);
            }
          }

          return {
            stack: stack,
            detectedRefererUrl: detectedRefererUrl
          };
        }
        /**
         * This function returns canonical URL which refers to an HTML link element, with the attribute of rel="canonical", found in the <head> element of your webpage
         * @param {Object} doc document
         */


        function getCanonicalUrl(doc) {
          try {
            var element = doc.querySelector("link[rel='canonical']");

            if (element !== null) {
              return element.href;
            }
          } catch (e) {}

          return null;
        }
        /**
         * Walk up to the top of the window to detect origin, number of iframes, ancestor origins and canonical url
         */


        function walkUpWindows() {
          var acc = [];
          var currentWindow;

          do {
            try {
              currentWindow = currentWindow ? currentWindow.parent : win;

              try {
                var isTop = currentWindow == win.top;
                var refData = {
                  referrer: currentWindow.document.referrer || null,
                  location: currentWindow.location.href || null,
                  isTop: isTop
                };

                if (isTop) {
                  refData = _extends(refData, {
                    canonicalUrl: getCanonicalUrl(currentWindow.document)
                  });
                }

                acc.push(refData);
              } catch (e) {
                acc.push({
                  referrer: null,
                  location: null,
                  isTop: currentWindow == win.top
                });
                Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["logWarn"])('Trying to access cross domain iframe. Continuing without referrer and location');
              }
            } catch (e) {
              acc.push({
                referrer: null,
                location: null,
                isTop: false
              });
              return acc;
            }
          } while (currentWindow != win.top);

          return acc;
        }
        /**
         * Referer info
         * @typedef {Object} refererInfo
         * @property {string} referer detected top url
         * @property {boolean} reachedTop whether prebid was able to walk upto top window or not
         * @property {number} numIframes number of iframes
         * @property {string} stack comma separated urls of all origins
         * @property {string} canonicalUrl canonical URL refers to an HTML link element, with the attribute of rel="canonical", found in the <head> element of your webpage
         */

        /**
         * Get referer info
         * @returns {refererInfo}
         */


        function refererInfo() {
          try {
            var levels = getLevels();
            var numIframes = levels.length - 1;
            var reachedTop = levels[numIframes].location !== null || numIframes > 0 && levels[numIframes - 1].referrer !== null;
            var stackInfo = getPubUrlStack(levels);
            var canonicalUrl;

            if (levels[levels.length - 1].canonicalUrl) {
              canonicalUrl = levels[levels.length - 1].canonicalUrl;
            }

            return {
              referer: stackInfo.detectedRefererUrl,
              reachedTop: reachedTop,
              numIframes: numIframes,
              stack: stackInfo.stack,
              canonicalUrl: canonicalUrl
            };
          } catch (e) {// Ignore error
          }
        }

        return refererInfo;
      }

      var getRefererInfo = detectReferer(window);
      /***/
    },

    /***/
    33:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* unused harmony export USERSYNC_DEFAULT_CONFIG */

      /* unused harmony export newUserSync */

      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "a", function () {
        return userSync;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_includes_js__ = __webpack_require__(11);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_includes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_includes_js__);

      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
      }

      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }

      function _iterableToArrayLimit(arr, i) {
        if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
          return;
        }

        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
      }

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      var USERSYNC_DEFAULT_CONFIG = {
        syncEnabled: true,
        filterSettings: {
          image: {
            bidders: '*',
            filter: 'include'
          }
        },
        syncsPerBidder: 5,
        syncDelay: 3000,
        auctionDelay: 0
      }; // Set userSync default values

      __WEBPACK_IMPORTED_MODULE_1__config_js__["b"
      /* config */
      ].setDefaults({
        'userSync': __WEBPACK_IMPORTED_MODULE_0__utils_js__["deepClone"](USERSYNC_DEFAULT_CONFIG)
      });
      /**
       * Factory function which creates a new UserSyncPool.
       *
       * @param {UserSyncDependencies} userSyncDependencies Configuration options and dependencies which the
       *   UserSync object needs in order to behave properly.
       */


      function newUserSync(userSyncDependencies) {
        var publicApi = {}; // A queue of user syncs for each adapter
        // Let getDefaultQueue() set the defaults

        var queue = getDefaultQueue(); // Whether or not user syncs have been trigger on this page load for a specific bidder

        var hasFiredBidder = new Set(); // How many bids for each adapter

        var numAdapterBids = {}; // for now - default both to false in case filterSettings config is absent/misconfigured

        var permittedPixels = {
          image: true,
          iframe: false
        }; // Use what is in config by default

        var usConfig = userSyncDependencies.config; // Update if it's (re)set

        __WEBPACK_IMPORTED_MODULE_1__config_js__["b"
        /* config */
        ].getConfig('userSync', function (conf) {
          // Added this logic for https://github.com/prebid/Prebid.js/issues/4864
          // if userSync.filterSettings does not contain image/all configs, merge in default image config to ensure image pixels are fired
          if (conf.userSync) {
            var fs = conf.userSync.filterSettings;

            if (__WEBPACK_IMPORTED_MODULE_0__utils_js__["isPlainObject"](fs)) {
              if (!fs.image && !fs.all) {
                conf.userSync.filterSettings.image = {
                  bidders: '*',
                  filter: 'include'
                };
              }
            }
          }

          usConfig = _extends(usConfig, conf.userSync);
        });
        /**
         * @function getDefaultQueue
         * @summary Returns the default empty queue
         * @private
         * @return {object} A queue with no syncs
         */


        function getDefaultQueue() {
          return {
            image: [],
            iframe: []
          };
        }
        /**
         * @function fireSyncs
         * @summary Trigger all user syncs in the queue
         * @private
         */


        function fireSyncs() {
          if (!usConfig.syncEnabled || !userSyncDependencies.browserSupportsCookies) {
            return;
          }

          try {
            // Image pixels
            fireImagePixels(); // Iframe syncs

            loadIframes();
          } catch (e) {
            return __WEBPACK_IMPORTED_MODULE_0__utils_js__["logError"]('Error firing user syncs', e);
          } // Reset the user sync queue


          queue = getDefaultQueue();
        }

        function forEachFire(queue, fn) {
          // Randomize the order of the pixels before firing
          // This is to avoid giving any bidder who has registered multiple syncs
          // any preferential treatment and balancing them out
          __WEBPACK_IMPORTED_MODULE_0__utils_js__["shuffle"](queue).forEach(function (sync) {
            fn(sync);
            hasFiredBidder.add(sync[0]);
          });
        }
        /**
         * @function fireImagePixels
         * @summary Loops through user sync pixels and fires each one
         * @private
         */


        function fireImagePixels() {
          if (!permittedPixels.image) {
            return;
          }

          forEachFire(queue.image, function (sync) {
            var _sync = _slicedToArray(sync, 2),
                bidderName = _sync[0],
                trackingPixelUrl = _sync[1];

            __WEBPACK_IMPORTED_MODULE_0__utils_js__["logMessage"]("Invoking image pixel user sync for bidder: ".concat(bidderName)); // Create image object and add the src url


            __WEBPACK_IMPORTED_MODULE_0__utils_js__["triggerPixel"](trackingPixelUrl);
          });
        }
        /**
         * @function loadIframes
         * @summary Loops through iframe syncs and loads an iframe element into the page
         * @private
         */


        function loadIframes() {
          if (!permittedPixels.iframe) {
            return;
          }

          forEachFire(queue.iframe, function (sync) {
            var _sync2 = _slicedToArray(sync, 2),
                bidderName = _sync2[0],
                iframeUrl = _sync2[1];

            __WEBPACK_IMPORTED_MODULE_0__utils_js__["logMessage"]("Invoking iframe user sync for bidder: ".concat(bidderName)); // Insert iframe into DOM


            __WEBPACK_IMPORTED_MODULE_0__utils_js__["insertUserSyncIframe"](iframeUrl);
          });
        }
        /**
         * @function incrementAdapterBids
         * @summary Increment the count of user syncs queue for the adapter
         * @private
         * @params {object} numAdapterBids The object contain counts for all adapters
         * @params {string} bidder The name of the bidder adding a sync
         * @returns {object} The updated version of numAdapterBids
         */


        function incrementAdapterBids(numAdapterBids, bidder) {
          if (!numAdapterBids[bidder]) {
            numAdapterBids[bidder] = 1;
          } else {
            numAdapterBids[bidder] += 1;
          }

          return numAdapterBids;
        }
        /**
         * @function registerSync
         * @summary Add sync for this bidder to a queue to be fired later
         * @public
         * @params {string} type The type of the sync including image, iframe
         * @params {string} bidder The name of the adapter. e.g. "rubicon"
         * @params {string} url Either the pixel url or iframe url depending on the type
          * @example <caption>Using Image Sync</caption>
         * // registerSync(type, adapter, pixelUrl)
         * userSync.registerSync('image', 'rubicon', 'http://example.com/pixel')
         */


        publicApi.registerSync = function (type, bidder, url) {
          if (hasFiredBidder.has(bidder)) {
            return __WEBPACK_IMPORTED_MODULE_0__utils_js__["logMessage"]("already fired syncs for \"".concat(bidder, "\", ignoring registerSync call"));
          }

          if (!usConfig.syncEnabled || !__WEBPACK_IMPORTED_MODULE_0__utils_js__["isArray"](queue[type])) {
            return __WEBPACK_IMPORTED_MODULE_0__utils_js__["logWarn"]("User sync type \"".concat(type, "\" not supported"));
          }

          if (!bidder) {
            return __WEBPACK_IMPORTED_MODULE_0__utils_js__["logWarn"]("Bidder is required for registering sync");
          }

          if (usConfig.syncsPerBidder !== 0 && Number(numAdapterBids[bidder]) >= usConfig.syncsPerBidder) {
            return __WEBPACK_IMPORTED_MODULE_0__utils_js__["logWarn"]("Number of user syncs exceeded for \"".concat(bidder, "\""));
          }

          var canBidderRegisterSync = publicApi.canBidderRegisterSync(type, bidder);

          if (!canBidderRegisterSync) {
            return __WEBPACK_IMPORTED_MODULE_0__utils_js__["logWarn"]("Bidder \"".concat(bidder, "\" not permitted to register their \"").concat(type, "\" userSync pixels."));
          } // the bidder's pixel has passed all checks and is allowed to register


          queue[type].push([bidder, url]);
          numAdapterBids = incrementAdapterBids(numAdapterBids, bidder);
        };
        /**
         * @function shouldBidderBeBlocked
         * @summary Check filterSettings logic to determine if the bidder should be prevented from registering their userSync tracker
         * @private
         * @param {string} type The type of the sync; either image or iframe
         * @param {string} bidder The name of the adapter. e.g. "rubicon"
         * @returns {boolean} true => bidder is not allowed to register; false => bidder can register
          */


        function shouldBidderBeBlocked(type, bidder) {
          var filterConfig = usConfig.filterSettings; // apply the filter check if the config object is there (eg filterSettings.iframe exists) and if the config object is properly setup

          if (isFilterConfigValid(filterConfig, type)) {
            permittedPixels[type] = true;
            var activeConfig = filterConfig.all ? filterConfig.all : filterConfig[type];
            var biddersToFilter = activeConfig.bidders === '*' ? [bidder] : activeConfig.bidders;
            var filterType = activeConfig.filter || 'include'; // set default if undefined
            // return true if the bidder is either: not part of the include (ie outside the whitelist) or part of the exclude (ie inside the blacklist)

            var checkForFiltering = {
              'include': function include(bidders, bidder) {
                return !__WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_includes_js___default()(bidders, bidder);
              },
              'exclude': function exclude(bidders, bidder) {
                return __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_includes_js___default()(bidders, bidder);
              }
            };
            return checkForFiltering[filterType](biddersToFilter, bidder);
          }

          return false;
        }
        /**
         * @function isFilterConfigValid
         * @summary Check if the filterSettings object in the userSync config is setup properly
         * @private
         * @param {object} filterConfig sub-config object taken from filterSettings
         * @param {string} type The type of the sync; either image or iframe
         * @returns {boolean} true => config is setup correctly, false => setup incorrectly or filterConfig[type] is not present
         */


        function isFilterConfigValid(filterConfig, type) {
          if (filterConfig.all && filterConfig[type]) {
            __WEBPACK_IMPORTED_MODULE_0__utils_js__["logWarn"]("Detected presence of the \"filterSettings.all\" and \"filterSettings.".concat(type, "\" in userSync config.  You cannot mix \"all\" with \"iframe/image\" configs; they are mutually exclusive."));

            return false;
          }

          var activeConfig = filterConfig.all ? filterConfig.all : filterConfig[type];
          var activeConfigName = filterConfig.all ? 'all' : type; // if current pixel type isn't part of the config's logic, skip rest of the config checks...
          // we return false to skip subsequent filter checks in shouldBidderBeBlocked() function

          if (!activeConfig) {
            return false;
          }

          var filterField = activeConfig.filter;
          var biddersField = activeConfig.bidders;

          if (filterField && filterField !== 'include' && filterField !== 'exclude') {
            __WEBPACK_IMPORTED_MODULE_0__utils_js__["logWarn"]("UserSync \"filterSettings.".concat(activeConfigName, ".filter\" setting '").concat(filterField, "' is not a valid option; use either 'include' or 'exclude'."));

            return false;
          }

          if (biddersField !== '*' && !(Array.isArray(biddersField) && biddersField.length > 0 && biddersField.every(function (bidderInList) {
            return __WEBPACK_IMPORTED_MODULE_0__utils_js__["isStr"](bidderInList) && bidderInList !== '*';
          }))) {
            __WEBPACK_IMPORTED_MODULE_0__utils_js__["logWarn"]("Detected an invalid setup in userSync \"filterSettings.".concat(activeConfigName, ".bidders\"; use either '*' (to represent all bidders) or an array of bidders."));

            return false;
          }

          return true;
        }
        /**
         * @function syncUsers
         * @summary Trigger all the user syncs based on publisher-defined timeout
         * @public
         * @params {int} timeout The delay in ms before syncing data - default 0
         */


        publicApi.syncUsers = function () {
          var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

          if (timeout) {
            return setTimeout(fireSyncs, Number(timeout));
          }

          fireSyncs();
        };
        /**
         * @function triggerUserSyncs
         * @summary A `syncUsers` wrapper for determining if enableOverride has been turned on
         * @public
         */


        publicApi.triggerUserSyncs = function () {
          if (usConfig.enableOverride) {
            publicApi.syncUsers();
          }
        };

        publicApi.canBidderRegisterSync = function (type, bidder) {
          if (usConfig.filterSettings) {
            if (shouldBidderBeBlocked(type, bidder)) {
              return false;
            }
          }

          return true;
        };

        return publicApi;
      }

      var browserSupportsCookies = !__WEBPACK_IMPORTED_MODULE_0__utils_js__["isSafariBrowser"]() && __WEBPACK_IMPORTED_MODULE_0__utils_js__["cookiesAreEnabled"]();

      var userSync = newUserSync({
        config: __WEBPACK_IMPORTED_MODULE_1__config_js__["b"
        /* config */
        ].getConfig('userSync'),
        browserSupportsCookies: browserSupportsCookies
      });
      /**
       * @typedef {Object} UserSyncDependencies
       *
       * @property {UserSyncConfig} config
       * @property {boolean} browserSupportsCookies True if the current browser supports cookies, and false otherwise.
       */

      /**
       * @typedef {Object} UserSyncConfig
       *
       * @property {boolean} enableOverride
       * @property {boolean} syncEnabled
       * @property {int} syncsPerBidder
       * @property {string[]} enabledBidders
       * @property {Object} filterSettings
       */

      /***/
    },

    /***/
    34:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "b", function () {
        return OUTSTREAM;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "a", function () {
        return INSTREAM;
      });
      /* unused harmony export videoAdUnit */

      /* unused harmony export videoBidder */

      /* unused harmony export hasNonVideoBidder */

      /* harmony export (immutable) */


      __webpack_exports__["d"] = isValidVideoBid;
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "c", function () {
        return checkVideoBidSetup;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__adapterManager_js__ = __webpack_require__(7);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__src_config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_includes_js__ = __webpack_require__(11);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_includes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_includes_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__hook_js__ = __webpack_require__(13);

      var OUTSTREAM = 'outstream';
      var INSTREAM = 'instream';
      /**
       * @typedef {object} VideoBid
       * @property {string} adId id of the bid
       */

      /**
       * Validate that the assets required for video context are present on the bid
       * @param {VideoBid} bid Video bid to validate
       * @param {BidRequest[]} bidRequests All bid requests for an auction
       * @return {Boolean} If object is valid
       */

      function isValidVideoBid(bid, bidRequests) {
        var bidRequest = Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["getBidRequest"])(bid.requestId, bidRequests);
        var videoMediaType = bidRequest && Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["deepAccess"])(bidRequest, 'mediaTypes.video');
        var context = videoMediaType && Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["deepAccess"])(videoMediaType, 'context'); // if context not defined assume default 'instream' for video bids
        // instream bids require a vast url or vast xml content

        return checkVideoBidSetup(bid, bidRequest, videoMediaType, context);
      }

      var checkVideoBidSetup = Object(__WEBPACK_IMPORTED_MODULE_4__hook_js__["b"
      /* hook */
      ])('sync', function (bid, bidRequest, videoMediaType, context) {
        if (!bidRequest || videoMediaType && context !== OUTSTREAM) {
          // xml-only video bids require a prebid cache url
          if (!__WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
          /* config */
          ].getConfig('cache.url') && bid.vastXml && !bid.vastUrl) {
            Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["logError"])("\n        This bid contains only vastXml and will not work when a prebid cache url is not specified.\n        Try enabling prebid cache with pbjs.setConfig({ cache: {url: \"...\"} });\n      ");
            return false;
          }

          return !!(bid.vastUrl || bid.vastXml);
        } // outstream bids require a renderer on the bid or pub-defined on adunit


        if (context === OUTSTREAM) {
          return !!(bid.renderer || bidRequest.renderer);
        }

        return true;
      }, 'checkVideoBidSetup');
      /***/
    },

    /***/
    35:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* unused harmony export TARGETING_KEYS */

      /* unused harmony export filters */

      /* unused harmony export getHighestCpmBidsFromBidPool */

      /* unused harmony export sortByDealAndPriceBucketOrCpm */

      /* unused harmony export newTargeting */

      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "a", function () {
        return targeting;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__native_js__ = __webpack_require__(23);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__auctionManager_js__ = __webpack_require__(25);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__sizeMapping_js__ = __webpack_require__(78);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__mediaTypes_js__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_includes_js__ = __webpack_require__(11);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_includes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_includes_js__);

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance");
      }

      function _iterableToArray(iter) {
        if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        }
      }

      var utils = __webpack_require__(0);

      var CONSTANTS = __webpack_require__(5);

      var pbTargetingKeys = [];
      var MAX_DFP_KEYLENGTH = 20;
      var TTL_BUFFER = 1000;
      var TARGETING_KEYS = Object.keys(CONSTANTS.TARGETING_KEYS).map(function (key) {
        return CONSTANTS.TARGETING_KEYS[key];
      }); // return unexpired bids

      var isBidNotExpired = function isBidNotExpired(bid) {
        return bid.responseTimestamp + bid.ttl * 1000 + TTL_BUFFER > Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["timestamp"])();
      }; // return bids whose status is not set. Winning bids can only have a status of `rendered`.


      var isUnusedBid = function isUnusedBid(bid) {
        return bid && (bid.status && !__WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_includes_js___default()([CONSTANTS.BID_STATUS.RENDERED], bid.status) || !bid.status);
      };

      var filters = {
        isBidNotExpired: isBidNotExpired,
        isUnusedBid: isUnusedBid
      }; // If two bids are found for same adUnitCode, we will use the highest one to take part in auction
      // This can happen in case of concurrent auctions
      // If adUnitBidLimit is set above 0 return top N number of bids

      function getHighestCpmBidsFromBidPool(bidsReceived, highestCpmCallback) {
        var adUnitBidLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var bids = [];

        var dealPrioritization = __WEBPACK_IMPORTED_MODULE_1__config_js__["b"
        /* config */
        ].getConfig('sendBidsControl.dealPrioritization'); // bucket by adUnitcode


        var buckets = Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["groupBy"])(bidsReceived, 'adUnitCode'); // filter top bid for each bucket by bidder

        Object.keys(buckets).forEach(function (bucketKey) {
          var bucketBids = [];
          var bidsByBidder = Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["groupBy"])(buckets[bucketKey], 'bidderCode');
          Object.keys(bidsByBidder).forEach(function (key) {
            return bucketBids.push(bidsByBidder[key].reduce(highestCpmCallback));
          }); // if adUnitBidLimit is set, pass top N number bids

          if (adUnitBidLimit > 0) {
            bucketBids = dealPrioritization ? bucketBids(sortByDealAndPriceBucketOrCpm(true)) : bucketBids.sort(function (a, b) {
              return b.cpm - a.cpm;
            });
            bids.push.apply(bids, _toConsumableArray(bucketBids.slice(0, adUnitBidLimit)));
          } else {
            bids.push.apply(bids, _toConsumableArray(bucketBids));
          }
        });
        return bids;
      }
      /**
      * A descending sort function that will sort the list of objects based on the following two dimensions:
      *  - bids with a deal are sorted before bids w/o a deal
      *  - then sort bids in each grouping based on the hb_pb value
      * eg: the following list of bids would be sorted like:
      *  [{
      *    "hb_adid": "vwx",
      *    "hb_pb": "28",
      *    "hb_deal": "7747"
      *  }, {
      *    "hb_adid": "jkl",
      *    "hb_pb": "10",
      *    "hb_deal": "9234"
      *  }, {
      *    "hb_adid": "stu",
      *    "hb_pb": "50"
      *  }, {
      *    "hb_adid": "def",
      *    "hb_pb": "2"
      *  }]
      */


      function sortByDealAndPriceBucketOrCpm() {
        var useCpm = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        return function (a, b) {
          if (a.adUnitTargeting.hb_deal !== undefined && b.adUnitTargeting.hb_deal === undefined) {
            return -1;
          }

          if (a.adUnitTargeting.hb_deal === undefined && b.adUnitTargeting.hb_deal !== undefined) {
            return 1;
          } // assuming both values either have a deal or don't have a deal - sort by the hb_pb param


          if (useCpm) {
            return b.cpm - a.cpm;
          }

          return b.adUnitTargeting.hb_pb - a.adUnitTargeting.hb_pb;
        };
      }
      /**
       * @typedef {Object.<string,string>} targeting
       * @property {string} targeting_key
       */

      /**
       * @typedef {Object.<string,Object.<string,string[]>[]>[]} targetingArray
       */


      function newTargeting(auctionManager) {
        var targeting = {};
        var latestAuctionForAdUnit = {};

        targeting.setLatestAuctionForAdUnit = function (adUnitCode, auctionId) {
          latestAuctionForAdUnit[adUnitCode] = auctionId;
        };

        targeting.resetPresetTargeting = function (adUnitCode) {
          if (Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["isGptPubadsDefined"])()) {
            var adUnitCodes = getAdUnitCodes(adUnitCode);
            var adUnits = auctionManager.getAdUnits().filter(function (adUnit) {
              return __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_includes_js___default()(adUnitCodes, adUnit.code);
            });
            window.googletag.pubads().getSlots().forEach(function (slot) {
              pbTargetingKeys.forEach(function (key) {
                // reset only registered adunits
                adUnits.forEach(function (unit) {
                  if (unit.code === slot.getAdUnitPath() || unit.code === slot.getSlotElementId()) {
                    slot.setTargeting(key, null);
                  }
                });
              });
            });
          }
        };

        targeting.resetPresetTargetingAST = function (adUnitCode) {
          var adUnitCodes = getAdUnitCodes(adUnitCode);
          adUnitCodes.forEach(function (unit) {
            var astTag = window.apntag.getTag(unit);

            if (astTag && astTag.keywords) {
              var currentKeywords = Object.keys(astTag.keywords);
              var newKeywords = {};
              currentKeywords.forEach(function (key) {
                if (!__WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_includes_js___default()(pbTargetingKeys, key.toLowerCase())) {
                  newKeywords[key] = astTag.keywords[key];
                }
              });
              window.apntag.modifyTag(unit, {
                keywords: newKeywords
              });
            }
          });
        };
        /**
         * checks if bid has targeting set and belongs based on matching ad unit codes
         * @return {boolean} true or false
         */


        function bidShouldBeAddedToTargeting(bid, adUnitCodes) {
          return bid.adserverTargeting && adUnitCodes && (utils.isArray(adUnitCodes) && __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_includes_js___default()(adUnitCodes, bid.adUnitCode) || typeof adUnitCodes === 'string' && bid.adUnitCode === adUnitCodes);
        }
        /**
         * Returns targeting for any bids which have deals if alwaysIncludeDeals === true
         */


        function getDealBids(adUnitCodes, bidsReceived) {
          if (__WEBPACK_IMPORTED_MODULE_1__config_js__["b"
          /* config */
          ].getConfig('targetingControls.alwaysIncludeDeals') === true) {
            var standardKeys = TARGETING_KEYS.concat(__WEBPACK_IMPORTED_MODULE_2__native_js__["a"
            /* NATIVE_TARGETING_KEYS */
            ]); // we only want the top bid from bidders who have multiple entries per ad unit code

            var bids = getHighestCpmBidsFromBidPool(bidsReceived, __WEBPACK_IMPORTED_MODULE_0__utils_js__["getHighestCpm"]); // populate targeting keys for the remaining bids if they have a dealId

            return bids.map(function (bid) {
              if (bid.dealId && bidShouldBeAddedToTargeting(bid, adUnitCodes)) {
                return _defineProperty({}, bid.adUnitCode, getTargetingMap(bid, standardKeys.filter(function (key) {
                  return typeof bid.adserverTargeting[key] !== 'undefined';
                })));
              }
            }).filter(function (bid) {
              return bid;
            }); // removes empty elements in array
          }

          return [];
        }
        /**
         * Returns all ad server targeting for all ad units.
         * @param {string=} adUnitCode
         * @return {Object.<string,targeting>} targeting
         */


        targeting.getAllTargeting = function (adUnitCode) {
          var bidsReceived = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getBidsReceived();
          var adUnitCodes = getAdUnitCodes(adUnitCode); // Get targeting for the winning bid. Add targeting for any bids that have
          // `alwaysUseBid=true`. If sending all bids is enabled, add targeting for losing bids.

          var targeting = getWinningBidTargeting(adUnitCodes, bidsReceived).concat(getCustomBidTargeting(adUnitCodes, bidsReceived)).concat(__WEBPACK_IMPORTED_MODULE_1__config_js__["b"
          /* config */
          ].getConfig('enableSendAllBids') ? getBidLandscapeTargeting(adUnitCodes, bidsReceived) : getDealBids(adUnitCodes, bidsReceived)); // store a reference of the targeting keys

          targeting.map(function (adUnitCode) {
            Object.keys(adUnitCode).map(function (key) {
              adUnitCode[key].map(function (targetKey) {
                if (pbTargetingKeys.indexOf(Object.keys(targetKey)[0]) === -1) {
                  pbTargetingKeys = Object.keys(targetKey).concat(pbTargetingKeys);
                }
              });
            });
          });
          targeting = flattenTargeting(targeting);

          var auctionKeysThreshold = __WEBPACK_IMPORTED_MODULE_1__config_js__["b"
          /* config */
          ].getConfig('targetingControls.auctionKeyMaxChars');

          if (auctionKeysThreshold) {
            Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["logInfo"])("Detected 'targetingControls.auctionKeyMaxChars' was active for this auction; set with a limit of ".concat(auctionKeysThreshold, " characters.  Running checks on auction keys..."));
            targeting = filterTargetingKeys(targeting, auctionKeysThreshold);
          } // make sure at least there is a entry per adUnit code in the targetingSet so receivers of SET_TARGETING call's can know what ad units are being invoked


          adUnitCodes.forEach(function (code) {
            if (!targeting[code]) {
              targeting[code] = {};
            }
          });
          return targeting;
        }; // create an encoded string variant based on the keypairs of the provided object
        //  - note this will encode the characters between the keys (ie = and &)


        function convertKeysToQueryForm(keyMap) {
          return Object.keys(keyMap).reduce(function (queryString, key) {
            var encodedKeyPair = "".concat(key, "%3d").concat(encodeURIComponent(keyMap[key]), "%26");
            return queryString += encodedKeyPair;
          }, '');
        }

        function filterTargetingKeys(targeting, auctionKeysThreshold) {
          // read each targeting.adUnit object and sort the adUnits into a list of adUnitCodes based on priorization setting (eg CPM)
          var targetingCopy = Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepClone"])(targeting);
          var targetingMap = Object.keys(targetingCopy).map(function (adUnitCode) {
            return {
              adUnitCode: adUnitCode,
              adUnitTargeting: targetingCopy[adUnitCode]
            };
          }).sort(sortByDealAndPriceBucketOrCpm()); // iterate through the targeting based on above list and transform the keys into the query-equivalent and count characters

          return targetingMap.reduce(function (accMap, currMap, index, arr) {
            var adUnitQueryString = convertKeysToQueryForm(currMap.adUnitTargeting); // for the last adUnit - trim last encoded ampersand from the converted query string

            if (index + 1 === arr.length) {
              adUnitQueryString = adUnitQueryString.slice(0, -3);
            } // if under running threshold add to result


            var code = currMap.adUnitCode;
            var querySize = adUnitQueryString.length;

            if (querySize <= auctionKeysThreshold) {
              auctionKeysThreshold -= querySize;
              Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["logInfo"])("AdUnit '".concat(code, "' auction keys comprised of ").concat(querySize, " characters.  Deducted from running threshold; new limit is ").concat(auctionKeysThreshold), targetingCopy[code]);
              accMap[code] = targetingCopy[code];
            } else {
              Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["logWarn"])("The following keys for adUnitCode '".concat(code, "' exceeded the current limit of the 'auctionKeyMaxChars' setting.\nThe key-set size was ").concat(querySize, ", the current allotted amount was ").concat(auctionKeysThreshold, ".\n"), targetingCopy[code]);
            }

            if (index + 1 === arr.length && Object.keys(accMap).length === 0) {
              Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["logError"])('No auction targeting keys were permitted due to the setting in setConfig(targetingControls.auctionKeyMaxChars).  Please review setup and consider adjusting.');
            }

            return accMap;
          }, {});
        }
        /**
         * Converts targeting array and flattens to make it easily iteratable
         * e.g: Sample input to this function
         * ```
         * [
         *    {
         *      "div-gpt-ad-1460505748561-0": [{"hb_bidder": ["appnexusAst"]}]
         *    },
         *    {
         *      "div-gpt-ad-1460505748561-0": [{"hb_bidder_appnexusAs": ["appnexusAst"]}]
         *    }
         * ]
         * ```
         * Resulting array
         * ```
         * {
         *  "div-gpt-ad-1460505748561-0": {
         *    "hb_bidder": "appnexusAst",
         *    "hb_bidder_appnexusAs": "appnexusAst"
         *  }
         * }
         * ```
         *
         * @param {targetingArray}  targeting
         * @return {Object.<string,targeting>}  targeting
         */


        function flattenTargeting(targeting) {
          var targetingObj = targeting.map(function (targeting) {
            return _defineProperty({}, Object.keys(targeting)[0], targeting[Object.keys(targeting)[0]].map(function (target) {
              return _defineProperty({}, Object.keys(target)[0], target[Object.keys(target)[0]].join(', '));
            }).reduce(function (p, c) {
              return _extends(c, p);
            }, {}));
          }).reduce(function (accumulator, targeting) {
            var key = Object.keys(targeting)[0];
            accumulator[key] = _extends({}, accumulator[key], targeting[key]);
            return accumulator;
          }, {});
          return targetingObj;
        }
        /**
         * Sets targeting for DFP
         * @param {Object.<string,Object.<string,string>>} targetingConfig
         */


        targeting.setTargetingForGPT = function (targetingConfig, customSlotMatching) {
          window.googletag.pubads().getSlots().forEach(function (slot) {
            Object.keys(targetingConfig).filter(customSlotMatching ? customSlotMatching(slot) : Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["isAdUnitCodeMatchingSlot"])(slot)).forEach(function (targetId) {
              return Object.keys(targetingConfig[targetId]).forEach(function (key) {
                var valueArr = targetingConfig[targetId][key].split(',');
                valueArr = valueArr.length > 1 ? [valueArr] : valueArr;
                valueArr.map(function (value) {
                  utils.logMessage("Attempting to set key value for slot: ".concat(slot.getSlotElementId(), " key: ").concat(key, " value: ").concat(value));
                  return value;
                }).forEach(function (value) {
                  slot.setTargeting(key, value);
                });
              });
            });
          });
        };
        /**
         * normlizes input to a `adUnit.code` array
         * @param  {(string|string[])} adUnitCode [description]
         * @return {string[]}     AdUnit code array
         */


        function getAdUnitCodes(adUnitCode) {
          if (typeof adUnitCode === 'string') {
            return [adUnitCode];
          } else if (utils.isArray(adUnitCode)) {
            return adUnitCode;
          }

          return auctionManager.getAdUnitCodes() || [];
        }

        function getBidsReceived() {
          var bidsReceived = auctionManager.getBidsReceived();

          if (!__WEBPACK_IMPORTED_MODULE_1__config_js__["b"
          /* config */
          ].getConfig('useBidCache')) {
            bidsReceived = bidsReceived.filter(function (bid) {
              return latestAuctionForAdUnit[bid.adUnitCode] === bid.auctionId;
            });
          }

          bidsReceived = bidsReceived.filter(function (bid) {
            return Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepAccess"])(bid, 'video.context') !== __WEBPACK_IMPORTED_MODULE_5__mediaTypes_js__["a"
            /* ADPOD */
            ];
          }).filter(function (bid) {
            return bid.mediaType !== 'banner' || Object(__WEBPACK_IMPORTED_MODULE_4__sizeMapping_js__["c"
            /* sizeSupported */
            ])([bid.width, bid.height]);
          }).filter(filters.isUnusedBid).filter(filters.isBidNotExpired);
          return getHighestCpmBidsFromBidPool(bidsReceived, __WEBPACK_IMPORTED_MODULE_0__utils_js__["getOldestHighestCpmBid"]);
        }
        /**
         * Returns top bids for a given adUnit or set of adUnits.
         * @param  {(string|string[])} adUnitCode adUnitCode or array of adUnitCodes
         * @return {[type]}            [description]
         */


        targeting.getWinningBids = function (adUnitCode) {
          var bidsReceived = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getBidsReceived();
          var adUnitCodes = getAdUnitCodes(adUnitCode);
          return bidsReceived.filter(function (bid) {
            return __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_includes_js___default()(adUnitCodes, bid.adUnitCode);
          }).filter(function (bid) {
            return bid.cpm > 0;
          }).map(function (bid) {
            return bid.adUnitCode;
          }).filter(__WEBPACK_IMPORTED_MODULE_0__utils_js__["uniques"]).map(function (adUnitCode) {
            return bidsReceived.filter(function (bid) {
              return bid.adUnitCode === adUnitCode ? bid : null;
            }).reduce(__WEBPACK_IMPORTED_MODULE_0__utils_js__["getHighestCpm"]);
          });
        };
        /**
         * @param  {(string|string[])} adUnitCode adUnitCode or array of adUnitCodes
         * Sets targeting for AST
         */


        targeting.setTargetingForAst = function (adUnitCodes) {
          var astTargeting = targeting.getAllTargeting(adUnitCodes);

          try {
            targeting.resetPresetTargetingAST(adUnitCodes);
          } catch (e) {
            utils.logError('unable to reset targeting for AST' + e);
          }

          Object.keys(astTargeting).forEach(function (targetId) {
            return Object.keys(astTargeting[targetId]).forEach(function (key) {
              utils.logMessage("Attempting to set targeting for targetId: ".concat(targetId, " key: ").concat(key, " value: ").concat(astTargeting[targetId][key])); // setKeywords supports string and array as value

              if (utils.isStr(astTargeting[targetId][key]) || utils.isArray(astTargeting[targetId][key])) {
                var keywordsObj = {};
                var regex = /pt[0-9]/;

                if (key.search(regex) < 0) {
                  keywordsObj[key.toUpperCase()] = astTargeting[targetId][key];
                } else {
                  // pt${n} keys should not be uppercased
                  keywordsObj[key] = astTargeting[targetId][key];
                }

                window.apntag.setKeywords(targetId, keywordsObj, {
                  overrideKeyValue: true
                });
              }
            });
          });
        };
        /**
         * Get targeting key value pairs for winning bid.
         * @param {string[]}    AdUnit code array
         * @return {targetingArray}   winning bids targeting
         */


        function getWinningBidTargeting(adUnitCodes, bidsReceived) {
          var winners = targeting.getWinningBids(adUnitCodes, bidsReceived);
          var standardKeys = getStandardKeys();
          winners = winners.map(function (winner) {
            return _defineProperty({}, winner.adUnitCode, Object.keys(winner.adserverTargeting).filter(function (key) {
              return typeof winner.sendStandardTargeting === 'undefined' || winner.sendStandardTargeting || standardKeys.indexOf(key) === -1;
            }).reduce(function (acc, key) {
              var targetingValue = [winner.adserverTargeting[key]];

              var targeting = _defineProperty({}, key.substring(0, MAX_DFP_KEYLENGTH), targetingValue);

              if (key === CONSTANTS.TARGETING_KEYS.DEAL) {
                var bidderCodeTargetingKey = "".concat(key, "_").concat(winner.bidderCode).substring(0, MAX_DFP_KEYLENGTH);

                var bidderCodeTargeting = _defineProperty({}, bidderCodeTargetingKey, targetingValue);

                return [].concat(_toConsumableArray(acc), [targeting, bidderCodeTargeting]);
              }

              return [].concat(_toConsumableArray(acc), [targeting]);
            }, []));
          });
          return winners;
        }

        function getStandardKeys() {
          return auctionManager.getStandardBidderAdServerTargeting() // in case using a custom standard key set
          .map(function (targeting) {
            return targeting.key;
          }).concat(TARGETING_KEYS).filter(__WEBPACK_IMPORTED_MODULE_0__utils_js__["uniques"]); // standard keys defined in the library.
        }
        /**
         * Merge custom adserverTargeting with same key name for same adUnitCode.
         * e.g: Appnexus defining custom keyvalue pair foo:bar and Rubicon defining custom keyvalue pair foo:baz will be merged to foo: ['bar','baz']
         *
         * @param {Object[]} acc Accumulator for reducer. It will store updated bidResponse objects
         * @param {Object} bid BidResponse
         * @param {number} index current index
         * @param {Array} arr original array
         */


        function mergeAdServerTargeting(acc, bid, index, arr) {
          function concatTargetingValue(key) {
            return function (currentBidElement) {
              if (!utils.isArray(currentBidElement.adserverTargeting[key])) {
                currentBidElement.adserverTargeting[key] = [currentBidElement.adserverTargeting[key]];
              }

              currentBidElement.adserverTargeting[key] = currentBidElement.adserverTargeting[key].concat(bid.adserverTargeting[key]).filter(__WEBPACK_IMPORTED_MODULE_0__utils_js__["uniques"]);
              delete bid.adserverTargeting[key];
            };
          }

          function hasSameAdunitCodeAndKey(key) {
            return function (currentBidElement) {
              return currentBidElement.adUnitCode === bid.adUnitCode && currentBidElement.adserverTargeting[key];
            };
          }

          Object.keys(bid.adserverTargeting).filter(getCustomKeys()).forEach(function (key) {
            if (acc.length) {
              acc.filter(hasSameAdunitCodeAndKey(key)).forEach(concatTargetingValue(key));
            }
          });
          acc.push(bid);
          return acc;
        }

        function getCustomKeys() {
          var standardKeys = getStandardKeys().concat(__WEBPACK_IMPORTED_MODULE_2__native_js__["a"
          /* NATIVE_TARGETING_KEYS */
          ]);
          return function (key) {
            return standardKeys.indexOf(key) === -1;
          };
        }

        function truncateCustomKeys(bid) {
          return _defineProperty({}, bid.adUnitCode, Object.keys(bid.adserverTargeting) // Get only the non-standard keys of the losing bids, since we
          // don't want to override the standard keys of the winning bid.
          .filter(getCustomKeys()).map(function (key) {
            return _defineProperty({}, key.substring(0, MAX_DFP_KEYLENGTH), [bid.adserverTargeting[key]]);
          }));
        }
        /**
         * Get custom targeting key value pairs for bids.
         * @param {string[]}    AdUnit code array
         * @return {targetingArray}   bids with custom targeting defined in bidderSettings
         */


        function getCustomBidTargeting(adUnitCodes, bidsReceived) {
          return bidsReceived.filter(function (bid) {
            return __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_includes_js___default()(adUnitCodes, bid.adUnitCode);
          }).map(function (bid) {
            return _extends({}, bid);
          }).reduce(mergeAdServerTargeting, []).map(truncateCustomKeys).filter(function (bid) {
            return bid;
          }); // removes empty elements in array;
        }
        /**
         * Get targeting key value pairs for non-winning bids.
         * @param {string[]}    AdUnit code array
         * @return {targetingArray}   all non-winning bids targeting
         */


        function getBidLandscapeTargeting(adUnitCodes, bidsReceived) {
          var standardKeys = TARGETING_KEYS.concat(__WEBPACK_IMPORTED_MODULE_2__native_js__["a"
          /* NATIVE_TARGETING_KEYS */
          ]);

          var adUnitBidLimit = __WEBPACK_IMPORTED_MODULE_1__config_js__["b"
          /* config */
          ].getConfig('sendBidsControl.bidLimit');

          var bids = getHighestCpmBidsFromBidPool(bidsReceived, __WEBPACK_IMPORTED_MODULE_0__utils_js__["getHighestCpm"], adUnitBidLimit); // populate targeting keys for the remaining bids

          return bids.map(function (bid) {
            if (bidShouldBeAddedToTargeting(bid, adUnitCodes)) {
              return _defineProperty({}, bid.adUnitCode, getTargetingMap(bid, standardKeys.filter(function (key) {
                return typeof bid.adserverTargeting[key] !== 'undefined';
              })));
            }
          }).filter(function (bid) {
            return bid;
          }); // removes empty elements in array
        }

        function getTargetingMap(bid, keys) {
          return keys.map(function (key) {
            return _defineProperty({}, "".concat(key, "_").concat(bid.bidderCode).substring(0, MAX_DFP_KEYLENGTH), [bid.adserverTargeting[key]]);
          });
        }

        targeting.isApntagDefined = function () {
          if (window.apntag && utils.isFn(window.apntag.setKeywords)) {
            return true;
          }
        };

        return targeting;
      }

      var targeting = newTargeting(__WEBPACK_IMPORTED_MODULE_3__auctionManager_js__["a"
      /* auctionManager */
      ]);
      /***/
    },

    /***/
    36:
    /***/
    function _(module, exports) {
      module.exports = function (exec) {
        try {
          return !!exec();
        } catch (e) {
          return true;
        }
      };
      /***/

    },

    /***/
    37:
    /***/
    function _(module, exports) {
      var toString = {}.toString;

      module.exports = function (it) {
        return toString.call(it).slice(8, -1);
      };
      /***/

    },

    /***/
    375:
    /***/
    function _(module, exports, __webpack_require__) {
      __webpack_require__(376);

      module.exports = __webpack_require__(16).Number.isInteger;
      /***/
    },

    /***/
    376:
    /***/
    function _(module, exports, __webpack_require__) {
      // 20.1.2.3 Number.isInteger(number)
      var $export = __webpack_require__(15);

      $export($export.S, 'Number', {
        isInteger: __webpack_require__(377)
      });
      /***/
    },

    /***/
    377:
    /***/
    function _(module, exports, __webpack_require__) {
      // 20.1.2.3 Number.isInteger(number)
      var isObject = __webpack_require__(17);

      var floor = Math.floor;

      module.exports = function isInteger(it) {
        return !isObject(it) && isFinite(it) && floor(it) === it;
      };
      /***/

    },

    /***/
    38:
    /***/
    function _(module, exports) {
      // 7.2.1 RequireObjectCoercible(argument)
      module.exports = function (it) {
        if (it == undefined) throw TypeError("Can't call method on  " + it);
        return it;
      };
      /***/

    },

    /***/
    39:
    /***/
    function _(module, exports, __webpack_require__) {
      // 7.1.15 ToLength
      var toInteger = __webpack_require__(47);

      var min = Math.min;

      module.exports = function (it) {
        return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
      };
      /***/

    },

    /***/
    4:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "a", function () {
        return ajax;
      });
      /* harmony export (immutable) */


      __webpack_exports__["b"] = ajaxBuilder;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__url_js__ = __webpack_require__(9);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__config_js__ = __webpack_require__(3);

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var utils = __webpack_require__(0);

      var XHR_DONE = 4;
      /**
       * Simple IE9+ and cross-browser ajax request function
       * Note: x-domain requests in IE9 do not support the use of cookies
       *
       * @param url string url
       * @param callback {object | function} callback
       * @param data mixed data
       * @param options object
       */

      var ajax = ajaxBuilder();

      function ajaxBuilder() {
        var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;

        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
            request = _ref.request,
            done = _ref.done;

        return function (url, callback, data) {
          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

          try {
            var x;
            var method = options.method || (data ? 'POST' : 'GET');
            var parser = document.createElement('a');
            parser.href = url;
            var callbacks = _typeof(callback) === 'object' && callback !== null ? callback : {
              success: function success() {
                utils.logMessage('xhr success');
              },
              error: function error(e) {
                utils.logError('xhr error', null, e);
              }
            };

            if (typeof callback === 'function') {
              callbacks.success = callback;
            }

            x = new window.XMLHttpRequest();

            x.onreadystatechange = function () {
              if (x.readyState === XHR_DONE) {
                if (typeof done === 'function') {
                  done(parser.origin);
                }

                var status = x.status;

                if (status >= 200 && status < 300 || status === 304) {
                  callbacks.success(x.responseText, x);
                } else {
                  callbacks.error(x.statusText, x);
                }
              }
            }; // Disabled timeout temporarily to avoid xhr failed requests. https://github.com/prebid/Prebid.js/issues/2648


            if (!__WEBPACK_IMPORTED_MODULE_1__config_js__["b"
            /* config */
            ].getConfig('disableAjaxTimeout')) {
              x.ontimeout = function () {
                utils.logError('  xhr timeout after ', x.timeout, 'ms');
              };
            }

            if (method === 'GET' && data) {
              var urlInfo = Object(__WEBPACK_IMPORTED_MODULE_0__url_js__["c"
              /* parse */
              ])(url, options);

              _extends(urlInfo.search, data);

              url = Object(__WEBPACK_IMPORTED_MODULE_0__url_js__["a"
              /* format */
              ])(urlInfo);
            }

            x.open(method, url, true); // IE needs timoeut to be set after open - see #1410
            // Disabled timeout temporarily to avoid xhr failed requests. https://github.com/prebid/Prebid.js/issues/2648

            if (!__WEBPACK_IMPORTED_MODULE_1__config_js__["b"
            /* config */
            ].getConfig('disableAjaxTimeout')) {
              x.timeout = timeout;
            }

            if (options.withCredentials) {
              x.withCredentials = true;
            }

            utils._each(options.customHeaders, function (value, header) {
              x.setRequestHeader(header, value);
            });

            if (options.preflight) {
              x.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            }

            x.setRequestHeader('Content-Type', options.contentType || 'text/plain');

            if (typeof request === 'function') {
              request(parser.origin);
            }

            if (method === 'POST' && data) {
              x.send(data);
            } else {
              x.send();
            }
          } catch (error) {
            utils.logError('xhr construction', error);
          }
        };
      }
      /***/

    },

    /***/
    40:
    /***/
    function _(module, exports) {
      module.exports = function () {
        /* empty */
      };
      /***/

    },

    /***/
    41:
    /***/
    function _(module, exports, __webpack_require__) {
      var ctx = __webpack_require__(27);

      var call = __webpack_require__(70);

      var isArrayIter = __webpack_require__(71);

      var anObject = __webpack_require__(29);

      var toLength = __webpack_require__(39);

      var getIterFn = __webpack_require__(72);

      var BREAK = {};
      var RETURN = {};

      var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
        var iterFn = ITERATOR ? function () {
          return iterable;
        } : getIterFn(iterable);
        var f = ctx(fn, that, entries ? 2 : 1);
        var index = 0;
        var length, step, iterator, result;
        if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!'); // fast case for arrays with default iterator

        if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
          result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
          if (result === BREAK || result === RETURN) return result;
        } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
          result = call(iterator, f, step.value, entries);
          if (result === BREAK || result === RETURN) return result;
        }
      };

      exports.BREAK = BREAK;
      exports.RETURN = RETURN;
      /***/
    },

    /***/
    42:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* unused harmony export AUCTION_STARTED */

      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "b", function () {
        return AUCTION_IN_PROGRESS;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "a", function () {
        return AUCTION_COMPLETED;
      });
      /* harmony export (immutable) */


      __webpack_exports__["k"] = newAuction;
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "c", function () {
        return addBidResponse;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "e", function () {
        return addBidderRequests;
      });
      /* unused harmony export bidsBackCallback */

      /* unused harmony export auctionCallbacks */

      /* harmony export (immutable) */


      __webpack_exports__["g"] = doCallbacksIfTimedout;
      /* harmony export (immutable) */

      __webpack_exports__["d"] = addBidToAuction;
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "f", function () {
        return callPrebidCache;
      });
      /* unused harmony export getMediaTypeGranularity */

      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "i", function () {
        return getPriceGranularity;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "h", function () {
        return getPriceByGranularity;
      });
      /* harmony export (immutable) */


      __webpack_exports__["j"] = getStandardBidderSettings;
      /* unused harmony export getKeyValueTargetingPairs */

      /* unused harmony export adjustBids */

      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__url_js__ = __webpack_require__(9);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__cpmBucketManager_js__ = __webpack_require__(43);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__native_js__ = __webpack_require__(23);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__videoCache_js__ = __webpack_require__(79);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__Renderer_js__ = __webpack_require__(10);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6__config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7__userSync_js__ = __webpack_require__(33);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_8__hook_js__ = __webpack_require__(13);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_find_js__ = __webpack_require__(12);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_find_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_find_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_10__video_js__ = __webpack_require__(34);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_11__mediaTypes_js__ = __webpack_require__(2);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }
      /**
       * Module for auction instances.
       *
       * In Prebid 0.x, $$PREBID_GLOBAL$$ had _bidsRequested and _bidsReceived as public properties.
       * Starting 1.0, Prebid will support concurrent auctions. Each auction instance will store private properties, bidsRequested and bidsReceived.
       *
       * AuctionManager will create instance of auction and will store all the auctions.
       *
       */

      /**
        * @typedef {Object} AdUnit An object containing the adUnit configuration.
        *
        * @property {string} code A code which will be used to uniquely identify this bidder. This should be the same
        *   one as is used in the call to registerBidAdapter
        * @property {Array.<size>} sizes A list of size for adUnit.
        * @property {object} params Any bidder-specific params which the publisher used in their bid request.
        *   This is guaranteed to have passed the spec.areParamsValid() test.
        */

      /**
       * @typedef {Array.<number>} size
       */

      /**
       * @typedef {Array.<string>} AdUnitCode
       */

      /**
       * @typedef {Object} BidderRequest
       *
       * @property {string} bidderCode - adUnit bidder
       * @property {number} auctionId - random UUID
       * @property {string} bidderRequestId - random string, unique key set on all bidRequest.bids[]
       * @property {Array.<Bid>} bids
       * @property {number} auctionStart - Date.now() at auction start
       * @property {number} timeout - callback timeout
       * @property {refererInfo} refererInfo - referer info object
       * @property {string} [tid] - random UUID (used for s2s)
       * @property {string} [src] - s2s or client (used for s2s)
       */

      /**
       * @typedef {Object} BidReceived
       * //TODO add all properties
       */

      /**
       * @typedef {Object} Auction
       *
       * @property {function(): string} getAuctionStatus - returns the auction status which can be any one of 'started', 'in progress' or 'completed'
       * @property {function(): AdUnit[]} getAdUnits - return the adUnits for this auction instance
       * @property {function(): AdUnitCode[]} getAdUnitCodes - return the adUnitCodes for this auction instance
       * @property {function(): BidRequest[]} getBidRequests - get all bid requests for this auction instance
       * @property {function(): BidReceived[]} getBidsReceived - get all bid received for this auction instance
       * @property {function(): void} startAuctionTimer - sets the bidsBackHandler callback and starts the timer for auction
       * @property {function(): void} callBids - sends requests to all adapters for bids
       */


      var syncUsers = __WEBPACK_IMPORTED_MODULE_7__userSync_js__["a"
      /* userSync */
      ].syncUsers;

      var utils = __webpack_require__(0);

      var adapterManager = __webpack_require__(7)["default"];

      var events = __webpack_require__(8);

      var CONSTANTS = __webpack_require__(5);

      var AUCTION_STARTED = 'started';
      var AUCTION_IN_PROGRESS = 'inProgress';
      var AUCTION_COMPLETED = 'completed'; // register event for bid adjustment

      events.on(CONSTANTS.EVENTS.BID_ADJUSTMENT, function (bid) {
        adjustBids(bid);
      });
      var MAX_REQUESTS_PER_ORIGIN = 4;
      var outstandingRequests = {};
      var sourceInfo = {};
      var queuedCalls = [];
      /**
        * Creates new auction instance
        *
        * @param {Object} requestConfig
        * @param {AdUnit} requestConfig.adUnits
        * @param {AdUnitCode} requestConfig.adUnitCodes
        * @param {function():void} requestConfig.callback
        * @param {number} requestConfig.cbTimeout
        * @param {Array.<string>} requestConfig.labels
        * @param {string} requestConfig.auctionId
        *
        * @returns {Auction} auction instance
        */

      function newAuction(_ref) {
        var adUnits = _ref.adUnits,
            adUnitCodes = _ref.adUnitCodes,
            callback = _ref.callback,
            cbTimeout = _ref.cbTimeout,
            labels = _ref.labels,
            auctionId = _ref.auctionId;
        var _adUnits = adUnits;
        var _labels = labels;
        var _adUnitCodes = adUnitCodes;
        var _bidderRequests = [];
        var _bidsReceived = [];
        var _noBids = [];

        var _auctionStart;

        var _auctionEnd;

        var _auctionId = auctionId || utils.generateUUID();

        var _auctionStatus;

        var _callback = callback;

        var _timer;

        var _timeout = cbTimeout;
        var _winningBids = [];

        var _timelyBidders = new Set();

        function addBidRequests(bidderRequests) {
          _bidderRequests = _bidderRequests.concat(bidderRequests);
        }

        function addBidReceived(bidsReceived) {
          _bidsReceived = _bidsReceived.concat(bidsReceived);
        }

        function addNoBid(noBid) {
          _noBids = _noBids.concat(noBid);
        }

        function getProperties() {
          return {
            auctionId: _auctionId,
            timestamp: _auctionStart,
            auctionEnd: _auctionEnd,
            auctionStatus: _auctionStatus,
            adUnits: _adUnits,
            adUnitCodes: _adUnitCodes,
            labels: _labels,
            bidderRequests: _bidderRequests,
            noBids: _noBids,
            bidsReceived: _bidsReceived,
            winningBids: _winningBids,
            timeout: _timeout
          };
        }

        function startAuctionTimer() {
          var timedOut = true;
          var timeoutCallback = executeCallback.bind(null, timedOut);
          var timer = setTimeout(timeoutCallback, _timeout);
          _timer = timer;
        }

        function executeCallback(timedOut, cleartimer) {
          // clear timer when done calls executeCallback
          if (cleartimer) {
            clearTimeout(_timer);
          }

          if (_auctionEnd === undefined) {
            var timedOutBidders = [];

            if (timedOut) {
              utils.logMessage("Auction ".concat(_auctionId, " timedOut"));
              timedOutBidders = getTimedOutBids(_bidderRequests, _timelyBidders);

              if (timedOutBidders.length) {
                events.emit(CONSTANTS.EVENTS.BID_TIMEOUT, timedOutBidders);
              }
            }

            _auctionStatus = AUCTION_COMPLETED;
            _auctionEnd = Date.now();
            events.emit(CONSTANTS.EVENTS.AUCTION_END, getProperties());
            bidsBackCallback(_adUnits, function () {
              try {
                if (_callback != null) {
                  var _adUnitCodes2 = _adUnitCodes;

                  var bids = _bidsReceived.filter(utils.bind.call(__WEBPACK_IMPORTED_MODULE_0__utils_js__["adUnitsFilter"], this, _adUnitCodes2)).reduce(groupByPlacement, {});

                  _callback.apply(pbjs, [bids, timedOut, _auctionId]);

                  _callback = null;
                }
              } catch (e) {
                utils.logError('Error executing bidsBackHandler', null, e);
              } finally {
                // Calling timed out bidders
                if (timedOutBidders.length) {
                  adapterManager.callTimedOutBidders(adUnits, timedOutBidders, _timeout);
                } // Only automatically sync if the publisher has not chosen to "enableOverride"


                var userSyncConfig = __WEBPACK_IMPORTED_MODULE_6__config_js__["b"
                /* config */
                ].getConfig('userSync') || {};

                if (!userSyncConfig.enableOverride) {
                  // Delay the auto sync by the config delay
                  syncUsers(userSyncConfig.syncDelay);
                }
              }
            });
          }
        }

        function auctionDone() {
          // when all bidders have called done callback atleast once it means auction is complete
          utils.logInfo("Bids Received for Auction with id: ".concat(_auctionId), _bidsReceived);
          _auctionStatus = AUCTION_COMPLETED;
          executeCallback(false, true);
        }

        function onTimelyResponse(bidderCode) {
          _timelyBidders.add(bidderCode);
        }

        function callBids() {
          _auctionStatus = AUCTION_STARTED;
          _auctionStart = Date.now();
          var bidRequests = adapterManager.makeBidRequests(_adUnits, _auctionStart, _auctionId, _timeout, _labels);
          utils.logInfo("Bids Requested for Auction with id: ".concat(_auctionId), bidRequests);

          if (bidRequests.length < 1) {
            utils.logWarn('No valid bid requests returned for auction');
            auctionDone();
          } else {
            addBidderRequests.call({
              dispatch: addBidderRequestsCallback,
              context: this
            }, bidRequests);
          }
        }
        /**
         * callback executed after addBidderRequests completes
         * @param {BidRequest[]} bidRequests
         */


        function addBidderRequestsCallback(bidRequests) {
          var _this = this;

          bidRequests.forEach(function (bidRequest) {
            addBidRequests(bidRequest);
          });
          var requests = {};
          var call = {
            bidRequests: bidRequests,
            run: function run() {
              startAuctionTimer();
              _auctionStatus = AUCTION_IN_PROGRESS;
              events.emit(CONSTANTS.EVENTS.AUCTION_INIT, getProperties());
              var callbacks = auctionCallbacks(auctionDone, _this);
              adapterManager.callBids(_adUnits, bidRequests, function () {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                addBidResponse.apply({
                  dispatch: callbacks.addBidResponse,
                  bidderRequest: this
                }, args);
              }, callbacks.adapterDone, {
                request: function request(source, origin) {
                  increment(outstandingRequests, origin);
                  increment(requests, source);

                  if (!sourceInfo[source]) {
                    sourceInfo[source] = {
                      SRA: true,
                      origin: origin
                    };
                  }

                  if (requests[source] > 1) {
                    sourceInfo[source].SRA = false;
                  }
                },
                done: function done(origin) {
                  outstandingRequests[origin]--;

                  if (queuedCalls[0]) {
                    if (runIfOriginHasCapacity(queuedCalls[0])) {
                      queuedCalls.shift();
                    }
                  }
                }
              }, _timeout, onTimelyResponse);
            }
          };

          if (!runIfOriginHasCapacity(call)) {
            utils.logWarn('queueing auction due to limited endpoint capacity');
            queuedCalls.push(call);
          }

          function runIfOriginHasCapacity(call) {
            var hasCapacity = true;
            var maxRequests = __WEBPACK_IMPORTED_MODULE_6__config_js__["b"
            /* config */
            ].getConfig('maxRequestsPerOrigin') || MAX_REQUESTS_PER_ORIGIN;
            call.bidRequests.some(function (bidRequest) {
              var requests = 1;
              var source = typeof bidRequest.src !== 'undefined' && bidRequest.src === CONSTANTS.S2S.SRC ? 's2s' : bidRequest.bidderCode; // if we have no previous info on this source just let them through

              if (sourceInfo[source]) {
                if (sourceInfo[source].SRA === false) {
                  // some bidders might use more than the MAX_REQUESTS_PER_ORIGIN in a single auction.  In those cases
                  // set their request count to MAX_REQUESTS_PER_ORIGIN so the auction isn't permanently queued waiting
                  // for capacity for that bidder
                  requests = Math.min(bidRequest.bids.length, maxRequests);
                }

                if (outstandingRequests[sourceInfo[source].origin] + requests > maxRequests) {
                  hasCapacity = false;
                }
              } // return only used for terminating this .some() iteration early if it is determined we don't have capacity


              return !hasCapacity;
            });

            if (hasCapacity) {
              call.run();
            }

            return hasCapacity;
          }

          function increment(obj, prop) {
            if (typeof obj[prop] === 'undefined') {
              obj[prop] = 1;
            } else {
              obj[prop]++;
            }
          }
        }

        function addWinningBid(winningBid) {
          _winningBids = _winningBids.concat(winningBid);
          adapterManager.callBidWonBidder(winningBid.bidder, winningBid, adUnits);
        }

        function setBidTargeting(bid) {
          adapterManager.callSetTargetingBidder(bid.bidder, bid);
        }

        return {
          addBidReceived: addBidReceived,
          addNoBid: addNoBid,
          executeCallback: executeCallback,
          callBids: callBids,
          addWinningBid: addWinningBid,
          setBidTargeting: setBidTargeting,
          getWinningBids: function getWinningBids() {
            return _winningBids;
          },
          getTimeout: function getTimeout() {
            return _timeout;
          },
          getAuctionId: function getAuctionId() {
            return _auctionId;
          },
          getAuctionStatus: function getAuctionStatus() {
            return _auctionStatus;
          },
          getAdUnits: function getAdUnits() {
            return _adUnits;
          },
          getAdUnitCodes: function getAdUnitCodes() {
            return _adUnitCodes;
          },
          getBidRequests: function getBidRequests() {
            return _bidderRequests;
          },
          getBidsReceived: function getBidsReceived() {
            return _bidsReceived;
          },
          getNoBids: function getNoBids() {
            return _noBids;
          }
        };
      }

      var addBidResponse = Object(__WEBPACK_IMPORTED_MODULE_8__hook_js__["b"
      /* hook */
      ])('async', function (adUnitCode, bid) {
        this.dispatch.call(this.bidderRequest, adUnitCode, bid);
      }, 'addBidResponse');
      var addBidderRequests = Object(__WEBPACK_IMPORTED_MODULE_8__hook_js__["b"
      /* hook */
      ])('sync', function (bidderRequests) {
        this.dispatch.call(this.context, bidderRequests);
      }, 'addBidderRequests');
      var bidsBackCallback = Object(__WEBPACK_IMPORTED_MODULE_8__hook_js__["b"
      /* hook */
      ])('async', function (adUnits, callback) {
        if (callback) {
          callback();
        }
      }, 'bidsBackCallback');

      function auctionCallbacks(auctionDone, auctionInstance) {
        var outstandingBidsAdded = 0;
        var allAdapterCalledDone = false;
        var bidderRequestsDone = new Set();
        var bidResponseMap = {};

        function afterBidAdded() {
          outstandingBidsAdded--;

          if (allAdapterCalledDone && outstandingBidsAdded === 0) {
            auctionDone();
          }
        }

        function addBidResponse(adUnitCode, bid) {
          var bidderRequest = this;
          bidResponseMap[bid.requestId] = true;
          outstandingBidsAdded++;
          var auctionId = auctionInstance.getAuctionId();
          var bidResponse = getPreparedBidForAuction({
            adUnitCode: adUnitCode,
            bid: bid,
            bidderRequest: bidderRequest,
            auctionId: auctionId
          });

          if (bidResponse.mediaType === 'video') {
            tryAddVideoBid(auctionInstance, bidResponse, bidderRequest, afterBidAdded);
          } else {
            addBidToAuction(auctionInstance, bidResponse);
            afterBidAdded();
          }
        }

        function adapterDone() {
          var bidderRequest = this;
          bidderRequestsDone.add(bidderRequest);
          allAdapterCalledDone = auctionInstance.getBidRequests().every(function (bidderRequest) {
            return bidderRequestsDone.has(bidderRequest);
          });
          bidderRequest.bids.forEach(function (bid) {
            if (!bidResponseMap[bid.bidId]) {
              auctionInstance.addNoBid(bid);
              events.emit(CONSTANTS.EVENTS.NO_BID, bid);
            }
          });

          if (allAdapterCalledDone && outstandingBidsAdded === 0) {
            auctionDone();
          }
        }

        return {
          addBidResponse: addBidResponse,
          adapterDone: adapterDone
        };
      }

      function doCallbacksIfTimedout(auctionInstance, bidResponse) {
        if (bidResponse.timeToRespond > auctionInstance.getTimeout() + __WEBPACK_IMPORTED_MODULE_6__config_js__["b"
        /* config */
        ].getConfig('timeoutBuffer')) {
          auctionInstance.executeCallback(true);
        }
      } // Add a bid to the auction.


      function addBidToAuction(auctionInstance, bidResponse) {
        var bidderRequests = auctionInstance.getBidRequests();

        var bidderRequest = __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_find_js___default()(bidderRequests, function (bidderRequest) {
          return bidderRequest.bidderCode === bidResponse.bidderCode;
        });

        setupBidTargeting(bidResponse, bidderRequest);
        events.emit(CONSTANTS.EVENTS.BID_RESPONSE, bidResponse);
        auctionInstance.addBidReceived(bidResponse);
        doCallbacksIfTimedout(auctionInstance, bidResponse);
      } // Video bids may fail if the cache is down, or there's trouble on the network.


      function tryAddVideoBid(auctionInstance, bidResponse, bidRequests, afterBidAdded) {
        var addBid = true;
        var bidderRequest = Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["getBidRequest"])(bidResponse.requestId, [bidRequests]);
        var videoMediaType = bidderRequest && Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepAccess"])(bidderRequest, 'mediaTypes.video');
        var context = videoMediaType && Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepAccess"])(videoMediaType, 'context');

        if (__WEBPACK_IMPORTED_MODULE_6__config_js__["b"
        /* config */
        ].getConfig('cache.url') && context !== __WEBPACK_IMPORTED_MODULE_10__video_js__["b"
        /* OUTSTREAM */
        ]) {
          if (!bidResponse.videoCacheKey) {
            addBid = false;
            callPrebidCache(auctionInstance, bidResponse, afterBidAdded, bidderRequest);
          } else if (!bidResponse.vastUrl) {
            utils.logError('videoCacheKey specified but not required vastUrl for video bid');
            addBid = false;
          }
        }

        if (addBid) {
          addBidToAuction(auctionInstance, bidResponse);
          afterBidAdded();
        }
      }

      var callPrebidCache = Object(__WEBPACK_IMPORTED_MODULE_8__hook_js__["b"
      /* hook */
      ])('async', function (auctionInstance, bidResponse, afterBidAdded, bidderRequest) {
        Object(__WEBPACK_IMPORTED_MODULE_4__videoCache_js__["b"
        /* store */
        ])([bidResponse], function (error, cacheIds) {
          if (error) {
            utils.logWarn("Failed to save to the video cache: ".concat(error, ". Video bid must be discarded."));
            doCallbacksIfTimedout(auctionInstance, bidResponse);
          } else {
            if (cacheIds[0].uuid === '') {
              utils.logWarn("Supplied video cache key was already in use by Prebid Cache; caching attempt was rejected. Video bid must be discarded.");
              doCallbacksIfTimedout(auctionInstance, bidResponse);
            } else {
              bidResponse.videoCacheKey = cacheIds[0].uuid;

              if (!bidResponse.vastUrl) {
                bidResponse.vastUrl = Object(__WEBPACK_IMPORTED_MODULE_4__videoCache_js__["a"
                /* getCacheUrl */
                ])(bidResponse.videoCacheKey);
              }

              addBidToAuction(auctionInstance, bidResponse);
              afterBidAdded();
            }
          }
        });
      }, 'callPrebidCache'); // Postprocess the bids so that all the universal properties exist, no matter which bidder they came from.
      // This should be called before addBidToAuction().

      function getPreparedBidForAuction(_ref2) {
        var adUnitCode = _ref2.adUnitCode,
            bid = _ref2.bid,
            bidderRequest = _ref2.bidderRequest,
            auctionId = _ref2.auctionId;
        var start = bidderRequest.start;

        var bidObject = _extends({}, bid, {
          auctionId: auctionId,
          responseTimestamp: Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["timestamp"])(),
          requestTimestamp: start,
          cpm: parseFloat(bid.cpm) || 0,
          bidder: bid.bidderCode,
          adUnitCode: adUnitCode
        });

        bidObject.timeToRespond = bidObject.responseTimestamp - bidObject.requestTimestamp; // Let listeners know that now is the time to adjust the bid, if they want to.
        //
        // CAREFUL: Publishers rely on certain bid properties to be available (like cpm),
        // but others to not be set yet (like priceStrings). See #1372 and #1389.

        events.emit(CONSTANTS.EVENTS.BID_ADJUSTMENT, bidObject); // a publisher-defined renderer can be used to render bids

        var bidReq = bidderRequest.bids && __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_find_js___default()(bidderRequest.bids, function (bid) {
          return bid.adUnitCode == adUnitCode;
        });

        var adUnitRenderer = bidReq && bidReq.renderer;

        if (adUnitRenderer && adUnitRenderer.url) {
          bidObject.renderer = __WEBPACK_IMPORTED_MODULE_5__Renderer_js__["a"
          /* Renderer */
          ].install({
            url: adUnitRenderer.url
          });
          bidObject.renderer.setRender(adUnitRenderer.render);
        } // Use the config value 'mediaTypeGranularity' if it has been defined for mediaType, else use 'customPriceBucket'


        var mediaTypeGranularity = getMediaTypeGranularity(bid.mediaType, bidReq, __WEBPACK_IMPORTED_MODULE_6__config_js__["b"
        /* config */
        ].getConfig('mediaTypePriceGranularity'));
        var priceStringsObj = Object(__WEBPACK_IMPORTED_MODULE_2__cpmBucketManager_js__["a"
        /* getPriceBucketString */
        ])(bidObject.cpm, _typeof(mediaTypeGranularity) === 'object' ? mediaTypeGranularity : __WEBPACK_IMPORTED_MODULE_6__config_js__["b"
        /* config */
        ].getConfig('customPriceBucket'), __WEBPACK_IMPORTED_MODULE_6__config_js__["b"
        /* config */
        ].getConfig('currency.granularityMultiplier'));
        bidObject.pbLg = priceStringsObj.low;
        bidObject.pbMg = priceStringsObj.med;
        bidObject.pbHg = priceStringsObj.high;
        bidObject.pbAg = priceStringsObj.auto;
        bidObject.pbDg = priceStringsObj.dense;
        bidObject.pbCg = priceStringsObj.custom;
        return bidObject;
      }

      function setupBidTargeting(bidObject, bidderRequest) {
        var keyValues;

        if (bidObject.bidderCode && (bidObject.cpm > 0 || bidObject.dealId)) {
          var bidReq = __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_find_js___default()(bidderRequest.bids, function (bid) {
            return bid.adUnitCode === bidObject.adUnitCode;
          });

          keyValues = getKeyValueTargetingPairs(bidObject.bidderCode, bidObject, bidReq);
        } // use any targeting provided as defaults, otherwise just set from getKeyValueTargetingPairs


        bidObject.adserverTargeting = _extends(bidObject.adserverTargeting || {}, keyValues);
      }
      /**
       * @param {MediaType} mediaType
       * @param {Bid} [bidReq]
       * @param {MediaTypePriceGranularity} [mediaTypePriceGranularity]
       * @returns {(Object|string|undefined)}
       */


      function getMediaTypeGranularity(mediaType, bidReq, mediaTypePriceGranularity) {
        if (mediaType && mediaTypePriceGranularity) {
          if (mediaType === __WEBPACK_IMPORTED_MODULE_11__mediaTypes_js__["d"
          /* VIDEO */
          ]) {
            var context = Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepAccess"])(bidReq, "mediaTypes.".concat(__WEBPACK_IMPORTED_MODULE_11__mediaTypes_js__["d"
            /* VIDEO */
            ], ".context"), 'instream');

            if (mediaTypePriceGranularity["".concat(__WEBPACK_IMPORTED_MODULE_11__mediaTypes_js__["d"
            /* VIDEO */
            ], "-").concat(context)]) {
              return mediaTypePriceGranularity["".concat(__WEBPACK_IMPORTED_MODULE_11__mediaTypes_js__["d"
              /* VIDEO */
              ], "-").concat(context)];
            }
          }

          return mediaTypePriceGranularity[mediaType];
        }
      }
      /**
       * This function returns the price granularity defined. It can be either publisher defined or default value
       * @param {string} mediaType
       * @param {BidRequest} bidReq
       * @returns {string} granularity
       */


      var getPriceGranularity = function getPriceGranularity(mediaType, bidReq) {
        // Use the config value 'mediaTypeGranularity' if it has been set for mediaType, else use 'priceGranularity'
        var mediaTypeGranularity = getMediaTypeGranularity(mediaType, bidReq, __WEBPACK_IMPORTED_MODULE_6__config_js__["b"
        /* config */
        ].getConfig('mediaTypePriceGranularity'));
        var granularity = typeof mediaType === 'string' && mediaTypeGranularity ? typeof mediaTypeGranularity === 'string' ? mediaTypeGranularity : 'custom' : __WEBPACK_IMPORTED_MODULE_6__config_js__["b"
        /* config */
        ].getConfig('priceGranularity');
        return granularity;
      };
      /**
       * This function returns a function to get bid price by price granularity
       * @param {string} granularity
       * @returns {function}
       */


      var getPriceByGranularity = function getPriceByGranularity(granularity) {
        return function (bid) {
          if (granularity === CONSTANTS.GRANULARITY_OPTIONS.AUTO) {
            return bid.pbAg;
          } else if (granularity === CONSTANTS.GRANULARITY_OPTIONS.DENSE) {
            return bid.pbDg;
          } else if (granularity === CONSTANTS.GRANULARITY_OPTIONS.LOW) {
            return bid.pbLg;
          } else if (granularity === CONSTANTS.GRANULARITY_OPTIONS.MEDIUM) {
            return bid.pbMg;
          } else if (granularity === CONSTANTS.GRANULARITY_OPTIONS.HIGH) {
            return bid.pbHg;
          } else if (granularity === CONSTANTS.GRANULARITY_OPTIONS.CUSTOM) {
            return bid.pbCg;
          }
        };
      };
      /**
       * @param {string} mediaType
       * @param {string} bidderCode
       * @param {BidRequest} bidReq
       * @returns {*}
       */


      function getStandardBidderSettings(mediaType, bidderCode, bidReq) {
        // factory for key value objs
        function createKeyVal(key, value) {
          return {
            key: key,
            val: typeof value === 'function' ? function (bidResponse) {
              return value(bidResponse);
            } : function (bidResponse) {
              return Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["getValue"])(bidResponse, value);
            }
          };
        }

        var TARGETING_KEYS = CONSTANTS.TARGETING_KEYS;
        var granularity = getPriceGranularity(mediaType, bidReq);
        var bidderSettings = pbjs.bidderSettings;

        if (!bidderSettings[CONSTANTS.JSON_MAPPING.BD_SETTING_STANDARD]) {
          bidderSettings[CONSTANTS.JSON_MAPPING.BD_SETTING_STANDARD] = {};
        }

        if (!bidderSettings[CONSTANTS.JSON_MAPPING.BD_SETTING_STANDARD][CONSTANTS.JSON_MAPPING.ADSERVER_TARGETING]) {
          bidderSettings[CONSTANTS.JSON_MAPPING.BD_SETTING_STANDARD][CONSTANTS.JSON_MAPPING.ADSERVER_TARGETING] = [createKeyVal(TARGETING_KEYS.BIDDER, 'bidderCode'), createKeyVal(TARGETING_KEYS.AD_ID, 'adId'), createKeyVal(TARGETING_KEYS.PRICE_BUCKET, getPriceByGranularity(granularity)), createKeyVal(TARGETING_KEYS.SIZE, 'size'), createKeyVal(TARGETING_KEYS.DEAL, 'dealId'), createKeyVal(TARGETING_KEYS.SOURCE, 'source'), createKeyVal(TARGETING_KEYS.FORMAT, 'mediaType')];
        }

        if (mediaType === 'video') {
          var adserverTargeting = bidderSettings[CONSTANTS.JSON_MAPPING.BD_SETTING_STANDARD][CONSTANTS.JSON_MAPPING.ADSERVER_TARGETING]; // Adding hb_uuid + hb_cache_id

          [TARGETING_KEYS.UUID, TARGETING_KEYS.CACHE_ID].forEach(function (targetingKeyVal) {
            if (typeof __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_find_js___default()(adserverTargeting, function (kvPair) {
              return kvPair.key === targetingKeyVal;
            }) === 'undefined') {
              adserverTargeting.push(createKeyVal(targetingKeyVal, 'videoCacheKey'));
            }
          }); // Adding hb_cache_host

          if (__WEBPACK_IMPORTED_MODULE_6__config_js__["b"
          /* config */
          ].getConfig('cache.url') && (!bidderCode || utils.deepAccess(bidderSettings, "".concat(bidderCode, ".sendStandardTargeting")) !== false)) {
            var urlInfo = Object(__WEBPACK_IMPORTED_MODULE_1__url_js__["c"
            /* parse */
            ])(__WEBPACK_IMPORTED_MODULE_6__config_js__["b"
            /* config */
            ].getConfig('cache.url'));

            if (typeof __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_find_js___default()(adserverTargeting, function (targetingKeyVal) {
              return targetingKeyVal.key === TARGETING_KEYS.CACHE_HOST;
            }) === 'undefined') {
              adserverTargeting.push(createKeyVal(TARGETING_KEYS.CACHE_HOST, function (bidResponse) {
                return utils.deepAccess(bidResponse, "adserverTargeting.".concat(TARGETING_KEYS.CACHE_HOST)) ? bidResponse.adserverTargeting[TARGETING_KEYS.CACHE_HOST] : urlInfo.hostname;
              }));
            }
          }
        }

        return bidderSettings[CONSTANTS.JSON_MAPPING.BD_SETTING_STANDARD];
      }

      function getKeyValueTargetingPairs(bidderCode, custBidObj, bidReq) {
        if (!custBidObj) {
          return {};
        }

        var keyValues = {};
        var bidderSettings = pbjs.bidderSettings; // 1) set the keys from "standard" setting or from prebid defaults

        if (bidderSettings) {
          // initialize default if not set
          var standardSettings = getStandardBidderSettings(custBidObj.mediaType, bidderCode, bidReq);
          setKeys(keyValues, standardSettings, custBidObj); // 2) set keys from specific bidder setting override if they exist

          if (bidderCode && bidderSettings[bidderCode] && bidderSettings[bidderCode][CONSTANTS.JSON_MAPPING.ADSERVER_TARGETING]) {
            setKeys(keyValues, bidderSettings[bidderCode], custBidObj);
            custBidObj.sendStandardTargeting = bidderSettings[bidderCode].sendStandardTargeting;
          }
        } // set native key value targeting


        if (custBidObj['native']) {
          keyValues = _extends({}, keyValues, Object(__WEBPACK_IMPORTED_MODULE_3__native_js__["d"
          /* getNativeTargeting */
          ])(custBidObj, bidReq));
        }

        return keyValues;
      }

      function setKeys(keyValues, bidderSettings, custBidObj) {
        var targeting = bidderSettings[CONSTANTS.JSON_MAPPING.ADSERVER_TARGETING];
        custBidObj.size = custBidObj.getSize();

        utils._each(targeting, function (kvPair) {
          var key = kvPair.key;
          var value = kvPair.val;

          if (keyValues[key]) {
            utils.logWarn('The key: ' + key + ' is getting ovewritten');
          }

          if (utils.isFn(value)) {
            try {
              value = value(custBidObj);
            } catch (e) {
              utils.logError('bidmanager', 'ERROR', e);
            }
          }

          if ((typeof bidderSettings.suppressEmptyKeys !== 'undefined' && bidderSettings.suppressEmptyKeys === true || key === CONSTANTS.TARGETING_KEYS.DEAL) && ( // hb_deal is suppressed automatically if not set
          utils.isEmptyStr(value) || value === null || value === undefined)) {
            utils.logInfo("suppressing empty key '" + key + "' from adserver targeting");
          } else {
            keyValues[key] = value;
          }
        });

        return keyValues;
      }

      function adjustBids(bid) {
        var code = bid.bidderCode;
        var bidPriceAdjusted = bid.cpm;
        var bidCpmAdjustment;

        if (pbjs.bidderSettings) {
          if (code && pbjs.bidderSettings[code] && typeof pbjs.bidderSettings[code].bidCpmAdjustment === 'function') {
            bidCpmAdjustment = pbjs.bidderSettings[code].bidCpmAdjustment;
          } else if (pbjs.bidderSettings[CONSTANTS.JSON_MAPPING.BD_SETTING_STANDARD] && typeof pbjs.bidderSettings[CONSTANTS.JSON_MAPPING.BD_SETTING_STANDARD].bidCpmAdjustment === 'function') {
            bidCpmAdjustment = pbjs.bidderSettings[CONSTANTS.JSON_MAPPING.BD_SETTING_STANDARD].bidCpmAdjustment;
          }

          if (bidCpmAdjustment) {
            try {
              bidPriceAdjusted = bidCpmAdjustment(bid.cpm, _extends({}, bid));
            } catch (e) {
              utils.logError('Error during bid adjustment', 'bidmanager.js', e);
            }
          }
        }

        if (bidPriceAdjusted >= 0) {
          bid.cpm = bidPriceAdjusted;
        }
      }
      /**
       * groupByPlacement is a reduce function that converts an array of Bid objects
       * to an object with placement codes as keys, with each key representing an object
       * with an array of `Bid` objects for that placement
       * @returns {*} as { [adUnitCode]: { bids: [Bid, Bid, Bid] } }
       */


      function groupByPlacement(bidsByPlacement, bid) {
        if (!bidsByPlacement[bid.adUnitCode]) {
          bidsByPlacement[bid.adUnitCode] = {
            bids: []
          };
        }

        bidsByPlacement[bid.adUnitCode].bids.push(bid);
        return bidsByPlacement;
      }
      /**
       * Returns a list of bids that we haven't received a response yet where the bidder did not call done
       * @param {BidRequest[]} bidderRequests List of bids requested for auction instance
       * @param {Set} timelyBidders Set of bidders which responded in time
       *
       * @typedef {Object} TimedOutBid
       * @property {string} bidId The id representing the bid
       * @property {string} bidder The string name of the bidder
       * @property {string} adUnitCode The code used to uniquely identify the ad unit on the publisher's page
       * @property {string} auctionId The id representing the auction
       *
       * @return {Array<TimedOutBid>} List of bids that Prebid hasn't received a response for
       */


      function getTimedOutBids(bidderRequests, timelyBidders) {
        var timedOutBids = bidderRequests.map(function (bid) {
          return (bid.bids || []).filter(function (bid) {
            return !timelyBidders.has(bid.bidder);
          });
        }).reduce(__WEBPACK_IMPORTED_MODULE_0__utils_js__["flatten"], []).map(function (bid) {
          return {
            bidId: bid.bidId,
            bidder: bid.bidder,
            adUnitCode: bid.adUnitCode,
            auctionId: bid.auctionId
          };
        });
        return timedOutBids;
      }
      /***/

    },

    /***/
    43:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "a", function () {
        return getPriceBucketString;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "b", function () {
        return isValidPriceConfig;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_core_js_library_fn_array_find_js__ = __webpack_require__(12);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_core_js_library_fn_array_find_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_core_js_library_fn_array_find_js__);

      var utils = __webpack_require__(0);

      var _defaultPrecision = 2;
      var _lgPriceConfig = {
        'buckets': [{
          'max': 5,
          'increment': 0.5
        }]
      };
      var _mgPriceConfig = {
        'buckets': [{
          'max': 20,
          'increment': 0.1
        }]
      };
      var _hgPriceConfig = {
        'buckets': [{
          'max': 20,
          'increment': 0.01
        }]
      };
      var _densePriceConfig = {
        'buckets': [{
          'max': 3,
          'increment': 0.01
        }, {
          'max': 8,
          'increment': 0.05
        }, {
          'max': 20,
          'increment': 0.5
        }]
      };
      var _autoPriceConfig = {
        'buckets': [{
          'max': 5,
          'increment': 0.05
        }, {
          'max': 10,
          'increment': 0.1
        }, {
          'max': 20,
          'increment': 0.5
        }]
      };

      function getPriceBucketString(cpm, customConfig) {
        var granularityMultiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        var cpmFloat = parseFloat(cpm);

        if (isNaN(cpmFloat)) {
          cpmFloat = '';
        }

        return {
          low: cpmFloat === '' ? '' : getCpmStringValue(cpm, _lgPriceConfig, granularityMultiplier),
          med: cpmFloat === '' ? '' : getCpmStringValue(cpm, _mgPriceConfig, granularityMultiplier),
          high: cpmFloat === '' ? '' : getCpmStringValue(cpm, _hgPriceConfig, granularityMultiplier),
          auto: cpmFloat === '' ? '' : getCpmStringValue(cpm, _autoPriceConfig, granularityMultiplier),
          dense: cpmFloat === '' ? '' : getCpmStringValue(cpm, _densePriceConfig, granularityMultiplier),
          custom: cpmFloat === '' ? '' : getCpmStringValue(cpm, customConfig, granularityMultiplier)
        };
      }

      function getCpmStringValue(cpm, config, granularityMultiplier) {
        var cpmStr = '';

        if (!isValidPriceConfig(config)) {
          return cpmStr;
        }

        var cap = config.buckets.reduce(function (prev, curr) {
          if (prev.max > curr.max) {
            return prev;
          }

          return curr;
        }, {
          'max': 0
        });
        var bucketFloor = 0;

        var bucket = __WEBPACK_IMPORTED_MODULE_0_core_js_library_fn_array_find_js___default()(config.buckets, function (bucket) {
          if (cpm > cap.max * granularityMultiplier) {
            // cpm exceeds cap, just return the cap.
            var precision = bucket.precision;

            if (typeof precision === 'undefined') {
              precision = _defaultPrecision;
            }

            cpmStr = (bucket.max * granularityMultiplier).toFixed(precision);
          } else if (cpm <= bucket.max * granularityMultiplier && cpm >= bucketFloor * granularityMultiplier) {
            bucket.min = bucketFloor;
            return bucket;
          } else {
            bucketFloor = bucket.max;
          }
        });

        if (bucket) {
          cpmStr = getCpmTarget(cpm, bucket, granularityMultiplier);
        }

        return cpmStr;
      }

      function isValidPriceConfig(config) {
        if (utils.isEmpty(config) || !config.buckets || !Array.isArray(config.buckets)) {
          return false;
        }

        var isValid = true;
        config.buckets.forEach(function (bucket) {
          if (!bucket.max || !bucket.increment) {
            isValid = false;
          }
        });
        return isValid;
      }

      function getCpmTarget(cpm, bucket, granularityMultiplier) {
        var precision = typeof bucket.precision !== 'undefined' ? bucket.precision : _defaultPrecision;
        var increment = bucket.increment * granularityMultiplier;
        var bucketMin = bucket.min * granularityMultiplier; // start increments at the bucket min and then add bucket min back to arrive at the correct rounding
        // note - we're padding the values to avoid using decimals in the math prior to flooring
        // this is done as JS can return values slightly below the expected mark which would skew the price bucket target
        //   (eg 4.01 / 0.01 = 400.99999999999994)
        // min precison should be 2 to move decimal place over.

        var pow = Math.pow(10, precision + 2);
        var cpmToFloor = (cpm * pow - bucketMin * pow) / (increment * pow);
        var cpmTarget = Math.floor(cpmToFloor) * increment + bucketMin; // force to 10 decimal places to deal with imprecise decimal/binary conversions
        //    (for example 0.1 * 3 = 0.30000000000000004)

        cpmTarget = Number(cpmTarget.toFixed(10));
        return cpmTarget.toFixed(precision);
      }
      /***/

    },

    /***/
    44:
    /***/
    function _(module, exports) {
      module.exports = function (bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value: value
        };
      };
      /***/

    },

    /***/
    45:
    /***/
    function _(module, exports, __webpack_require__) {
      // 0 -> Array#forEach
      // 1 -> Array#map
      // 2 -> Array#filter
      // 3 -> Array#some
      // 4 -> Array#every
      // 5 -> Array#find
      // 6 -> Array#findIndex
      var ctx = __webpack_require__(27);

      var IObject = __webpack_require__(59);

      var toObject = __webpack_require__(46);

      var toLength = __webpack_require__(39);

      var asc = __webpack_require__(85);

      module.exports = function (TYPE, $create) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        var create = $create || asc;
        return function ($this, callbackfn, that) {
          var O = toObject($this);
          var self = IObject(O);
          var f = ctx(callbackfn, that, 3);
          var length = toLength(self.length);
          var index = 0;
          var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
          var val, res;

          for (; length > index; index++) {
            if (NO_HOLES || index in self) {
              val = self[index];
              res = f(val, index, O);

              if (TYPE) {
                if (IS_MAP) result[index] = res; // map
                else if (res) switch (TYPE) {
                    case 3:
                      return true;
                    // some

                    case 5:
                      return val;
                    // find

                    case 6:
                      return index;
                    // findIndex

                    case 2:
                      result.push(val);
                    // filter
                  } else if (IS_EVERY) return false; // every
              }
            }
          }

          return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
        };
      };
      /***/

    },

    /***/
    46:
    /***/
    function _(module, exports, __webpack_require__) {
      // 7.1.13 ToObject(argument)
      var defined = __webpack_require__(38);

      module.exports = function (it) {
        return Object(defined(it));
      };
      /***/

    },

    /***/
    47:
    /***/
    function _(module, exports) {
      // 7.1.4 ToInteger
      var ceil = Math.ceil;
      var floor = Math.floor;

      module.exports = function (it) {
        return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
      };
      /***/

    },

    /***/
    48:
    /***/
    function _(module, exports) {
      var id = 0;
      var px = Math.random();

      module.exports = function (key) {
        return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
      };
      /***/

    },

    /***/
    49:
    /***/
    function _(module, exports, __webpack_require__) {
      // to indexed object, toObject with fallback for non-array-like ES3 strings
      var IObject = __webpack_require__(59);

      var defined = __webpack_require__(38);

      module.exports = function (it) {
        return IObject(defined(it));
      };
      /***/

    },

    /***/
    5:
    /***/
    function _(module, exports) {
      module.exports = {
        "JSON_MAPPING": {
          "PL_CODE": "code",
          "PL_SIZE": "sizes",
          "PL_BIDS": "bids",
          "BD_BIDDER": "bidder",
          "BD_ID": "paramsd",
          "BD_PL_ID": "placementId",
          "ADSERVER_TARGETING": "adserverTargeting",
          "BD_SETTING_STANDARD": "standard"
        },
        "DEBUG_MODE": "pbjs_debug",
        "STATUS": {
          "GOOD": 1,
          "NO_BID": 2
        },
        "CB": {
          "TYPE": {
            "ALL_BIDS_BACK": "allRequestedBidsBack",
            "AD_UNIT_BIDS_BACK": "adUnitBidsBack",
            "BID_WON": "bidWon",
            "REQUEST_BIDS": "requestBids"
          }
        },
        "EVENTS": {
          "AUCTION_INIT": "auctionInit",
          "AUCTION_END": "auctionEnd",
          "BID_ADJUSTMENT": "bidAdjustment",
          "BID_TIMEOUT": "bidTimeout",
          "BID_REQUESTED": "bidRequested",
          "BID_RESPONSE": "bidResponse",
          "NO_BID": "noBid",
          "BID_WON": "bidWon",
          "BIDDER_DONE": "bidderDone",
          "SET_TARGETING": "setTargeting",
          "BEFORE_REQUEST_BIDS": "beforeRequestBids",
          "REQUEST_BIDS": "requestBids",
          "ADD_AD_UNITS": "addAdUnits",
          "AD_RENDER_FAILED": "adRenderFailed"
        },
        "AD_RENDER_FAILED_REASON": {
          "PREVENT_WRITING_ON_MAIN_DOCUMENT": "preventWritingOnMainDocuemnt",
          "NO_AD": "noAd",
          "EXCEPTION": "exception",
          "CANNOT_FIND_AD": "cannotFindAd",
          "MISSING_DOC_OR_ADID": "missingDocOrAdid"
        },
        "EVENT_ID_PATHS": {
          "bidWon": "adUnitCode"
        },
        "GRANULARITY_OPTIONS": {
          "LOW": "low",
          "MEDIUM": "medium",
          "HIGH": "high",
          "AUTO": "auto",
          "DENSE": "dense",
          "CUSTOM": "custom"
        },
        "TARGETING_KEYS": {
          "BIDDER": "hb_bidder",
          "AD_ID": "hb_adid",
          "PRICE_BUCKET": "hb_pb",
          "SIZE": "hb_size",
          "DEAL": "hb_deal",
          "SOURCE": "hb_source",
          "FORMAT": "hb_format",
          "UUID": "hb_uuid",
          "CACHE_ID": "hb_cache_id",
          "CACHE_HOST": "hb_cache_host"
        },
        "NATIVE_KEYS": {
          "title": "hb_native_title",
          "body": "hb_native_body",
          "body2": "hb_native_body2",
          "privacyLink": "hb_native_privacy",
          "privacyIcon": "hb_native_privicon",
          "sponsoredBy": "hb_native_brand",
          "image": "hb_native_image",
          "icon": "hb_native_icon",
          "clickUrl": "hb_native_linkurl",
          "displayUrl": "hb_native_displayurl",
          "cta": "hb_native_cta",
          "rating": "hb_native_rating",
          "address": "hb_native_address",
          "downloads": "hb_native_downloads",
          "likes": "hb_native_likes",
          "phone": "hb_native_phone",
          "price": "hb_native_price",
          "salePrice": "hb_native_saleprice"
        },
        "S2S": {
          "SRC": "s2s",
          "DEFAULT_ENDPOINT": "https://prebid.adnxs.com/pbs/v1/openrtb2/auction",
          "SYNCED_BIDDERS_KEY": "pbjsSyncs"
        },
        "BID_STATUS": {
          "BID_TARGETING_SET": "targetingSet",
          "RENDERED": "rendered"
        },
        "SUBMODULES_THAT_ALWAYS_REFRESH_ID": {
          "parrableId": true
        }
      };
      /***/
    },

    /***/
    50:
    /***/
    function _(module, exports, __webpack_require__) {
      var LIBRARY = __webpack_require__(61);

      var $export = __webpack_require__(15);

      var redefine = __webpack_require__(92);

      var hide = __webpack_require__(21);

      var Iterators = __webpack_require__(31);

      var $iterCreate = __webpack_require__(93);

      var setToStringTag = __webpack_require__(52);

      var getPrototypeOf = __webpack_require__(98);

      var ITERATOR = __webpack_require__(14)('iterator');

      var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`

      var FF_ITERATOR = '@@iterator';
      var KEYS = 'keys';
      var VALUES = 'values';

      var returnThis = function returnThis() {
        return this;
      };

      module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
        $iterCreate(Constructor, NAME, next);

        var getMethod = function getMethod(kind) {
          if (!BUGGY && kind in proto) return proto[kind];

          switch (kind) {
            case KEYS:
              return function keys() {
                return new Constructor(this, kind);
              };

            case VALUES:
              return function values() {
                return new Constructor(this, kind);
              };
          }

          return function entries() {
            return new Constructor(this, kind);
          };
        };

        var TAG = NAME + ' Iterator';
        var DEF_VALUES = DEFAULT == VALUES;
        var VALUES_BUG = false;
        var proto = Base.prototype;
        var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
        var $default = $native || getMethod(DEFAULT);
        var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
        var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
        var methods, key, IteratorPrototype; // Fix native

        if ($anyNative) {
          IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));

          if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
            // Set @@toStringTag to native iterators
            setToStringTag(IteratorPrototype, TAG, true); // fix for some old engines

            if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
          }
        } // fix Array#{values, @@iterator}.name in V8 / FF


        if (DEF_VALUES && $native && $native.name !== VALUES) {
          VALUES_BUG = true;

          $default = function values() {
            return $native.call(this);
          };
        } // Define iterator


        if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
          hide(proto, ITERATOR, $default);
        } // Plug for library


        Iterators[NAME] = $default;
        Iterators[TAG] = returnThis;

        if (DEFAULT) {
          methods = {
            values: DEF_VALUES ? $default : getMethod(VALUES),
            keys: IS_SET ? $default : getMethod(KEYS),
            entries: $entries
          };
          if (FORCED) for (key in methods) {
            if (!(key in proto)) redefine(proto, key, methods[key]);
          } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
        }

        return methods;
      };
      /***/

    },

    /***/
    51:
    /***/
    function _(module, exports, __webpack_require__) {
      var shared = __webpack_require__(60)('keys');

      var uid = __webpack_require__(48);

      module.exports = function (key) {
        return shared[key] || (shared[key] = uid(key));
      };
      /***/

    },

    /***/
    52:
    /***/
    function _(module, exports, __webpack_require__) {
      var def = __webpack_require__(20).f;

      var has = __webpack_require__(30);

      var TAG = __webpack_require__(14)('toStringTag');

      module.exports = function (it, tag, stat) {
        if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
          configurable: true,
          value: tag
        });
      };
      /***/

    },

    /***/
    53:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "a", function () {
        return adunitCounter;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(0);

      var adUnits = {};

      function ensureAdUnit(adunit, bidderCode) {
        var adUnit = adUnits[adunit] = adUnits[adunit] || {
          bidders: {}
        };

        if (bidderCode) {
          return adUnit.bidders[bidderCode] = adUnit.bidders[bidderCode] || {};
        }

        return adUnit;
      }

      function incrementAdUnitCount(adunit, counter, bidderCode) {
        var adUnit = ensureAdUnit(adunit, bidderCode);
        adUnit[counter] = (adUnit[counter] || 0) + 1;
        return adUnit[counter];
      }
      /**
       * Increments and returns current Adunit counter
       * @param {string} adunit id
       * @returns {number} current adunit count
       */


      function incrementRequestsCounter(adunit) {
        return incrementAdUnitCount(adunit, 'requestsCounter');
      }
      /**
       * Increments and returns current Adunit requests counter for a bidder
       * @param {string} adunit id
       * @param {string} bidderCode code
       * @returns {number} current adunit bidder requests count
       */


      function incrementBidderRequestsCounter(adunit, bidderCode) {
        return incrementAdUnitCount(adunit, 'requestsCounter', bidderCode);
      }
      /**
       * Increments and returns current Adunit wins counter for a bidder
       * @param {string} adunit id
       * @param {string} bidderCode code
       * @returns {number} current adunit bidder requests count
       */


      function incrementBidderWinsCounter(adunit, bidderCode) {
        return incrementAdUnitCount(adunit, 'winsCounter', bidderCode);
      }
      /**
       * Returns current Adunit counter
       * @param {string} adunit id
       * @returns {number} current adunit count
       */


      function getRequestsCounter(adunit) {
        return Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepAccess"])(adUnits, "".concat(adunit, ".requestsCounter")) || 0;
      }
      /**
       * Returns current Adunit requests counter for a specific bidder code
       * @param {string} adunit id
       * @param {string} bidder code
       * @returns {number} current adunit bidder requests count
       */


      function getBidderRequestsCounter(adunit, bidder) {
        return Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepAccess"])(adUnits, "".concat(adunit, ".bidders.").concat(bidder, ".requestsCounter")) || 0;
      }
      /**
       * Returns current Adunit requests counter for a specific bidder code
       * @param {string} adunit id
       * @param {string} bidder code
       * @returns {number} current adunit bidder requests count
       */


      function getBidderWinsCounter(adunit, bidder) {
        return Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["deepAccess"])(adUnits, "".concat(adunit, ".bidders.").concat(bidder, ".winsCounter")) || 0;
      }
      /**
       * A module which counts how many times an adunit was called
       * @module adunitCounter
       */


      var adunitCounter = {
        incrementRequestsCounter: incrementRequestsCounter,
        incrementBidderRequestsCounter: incrementBidderRequestsCounter,
        incrementBidderWinsCounter: incrementBidderWinsCounter,
        getRequestsCounter: getRequestsCounter,
        getBidderRequestsCounter: getBidderRequestsCounter,
        getBidderWinsCounter: getBidderWinsCounter
      };
      /***/
    },

    /***/
    54:
    /***/
    function _(module, exports, __webpack_require__) {
      __webpack_require__(170);

      module.exports = __webpack_require__(16).Array.findIndex;
      /***/
    },

    /***/
    55:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "adUnitSetupChecks", function () {
        return adUnitSetupChecks;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "checkAdUnitSetup", function () {
        return checkAdUnitSetup;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__prebidGlobal_js__ = __webpack_require__(18);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__secureCreatives_js__ = __webpack_require__(173);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__userSync_js__ = __webpack_require__(33);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__auctionManager_js__ = __webpack_require__(25);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6__targeting_js__ = __webpack_require__(35);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7__hook_js__ = __webpack_require__(13);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_8__debugging_js__ = __webpack_require__(174);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_includes_js__ = __webpack_require__(11);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_includes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_includes_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_10__adUnits_js__ = __webpack_require__(53);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_11__Renderer_js__ = __webpack_require__(10);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_12__bidfactory_js__ = __webpack_require__(24);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }
      /** @module pbjs */


      var pbjs = Object(__WEBPACK_IMPORTED_MODULE_0__prebidGlobal_js__["a"
      /* getGlobal */
      ])();

      var CONSTANTS = __webpack_require__(5);

      var utils = __webpack_require__(0);

      var adapterManager = __webpack_require__(7)["default"];

      var events = __webpack_require__(8);

      var triggerUserSyncs = __WEBPACK_IMPORTED_MODULE_3__userSync_js__["a"
      /* userSync */
      ].triggerUserSyncs;
      /* private variables */

      var _CONSTANTS$EVENTS = CONSTANTS.EVENTS,
          ADD_AD_UNITS = _CONSTANTS$EVENTS.ADD_AD_UNITS,
          BID_WON = _CONSTANTS$EVENTS.BID_WON,
          REQUEST_BIDS = _CONSTANTS$EVENTS.REQUEST_BIDS,
          SET_TARGETING = _CONSTANTS$EVENTS.SET_TARGETING,
          AD_RENDER_FAILED = _CONSTANTS$EVENTS.AD_RENDER_FAILED;
      var _CONSTANTS$AD_RENDER_ = CONSTANTS.AD_RENDER_FAILED_REASON,
          PREVENT_WRITING_ON_MAIN_DOCUMENT = _CONSTANTS$AD_RENDER_.PREVENT_WRITING_ON_MAIN_DOCUMENT,
          NO_AD = _CONSTANTS$AD_RENDER_.NO_AD,
          EXCEPTION = _CONSTANTS$AD_RENDER_.EXCEPTION,
          CANNOT_FIND_AD = _CONSTANTS$AD_RENDER_.CANNOT_FIND_AD,
          MISSING_DOC_OR_ADID = _CONSTANTS$AD_RENDER_.MISSING_DOC_OR_ADID;
      var eventValidators = {
        bidWon: checkDefinedPlacement
      }; // initialize existing debugging sessions if present

      Object(__WEBPACK_IMPORTED_MODULE_8__debugging_js__["a"
      /* sessionLoader */
      ])();
      /* Public vars */

      pbjs.bidderSettings = pbjs.bidderSettings || {}; // let the world know we are loaded

      pbjs.libLoaded = true; // version auto generated from build

      pbjs.version = "v3.13.0-pre";
      utils.logInfo("Prebid.js v3.13.0-pre loaded"); // create adUnit array

      pbjs.adUnits = pbjs.adUnits || []; // Allow publishers who enable user sync override to trigger their sync

      pbjs.triggerUserSyncs = triggerUserSyncs;

      function checkDefinedPlacement(id) {
        var adUnitCodes = __WEBPACK_IMPORTED_MODULE_5__auctionManager_js__["a"
        /* auctionManager */
        ].getBidsRequested().map(function (bidSet) {
          return bidSet.bids.map(function (bid) {
            return bid.adUnitCode;
          });
        }).reduce(__WEBPACK_IMPORTED_MODULE_1__utils_js__["flatten"]).filter(__WEBPACK_IMPORTED_MODULE_1__utils_js__["uniques"]);

        if (!utils.contains(adUnitCodes, id)) {
          utils.logError('The "' + id + '" placement is not defined.');
          return;
        }

        return true;
      }

      function setRenderSize(doc, width, height) {
        if (doc.defaultView && doc.defaultView.frameElement) {
          doc.defaultView.frameElement.width = width;
          doc.defaultView.frameElement.height = height;
        }
      }

      function validateSizes(sizes, targLength) {
        var cleanSizes = [];

        if (utils.isArray(sizes) && (targLength ? sizes.length === targLength : sizes.length > 0)) {
          // check if an array of arrays or array of numbers
          if (sizes.every(function (sz) {
            return Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["isArrayOfNums"])(sz, 2);
          })) {
            cleanSizes = sizes;
          } else if (Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["isArrayOfNums"])(sizes, 2)) {
            cleanSizes.push(sizes);
          }
        }

        return cleanSizes;
      }

      function validateBannerMediaType(adUnit) {
        var banner = adUnit.mediaTypes.banner;
        var bannerSizes = validateSizes(banner.sizes);

        if (bannerSizes.length > 0) {
          banner.sizes = bannerSizes; // Deprecation Warning: This property will be deprecated in next release in favor of adUnit.mediaTypes.banner.sizes

          adUnit.sizes = bannerSizes;
        } else {
          utils.logError('Detected a mediaTypes.banner object without a proper sizes field.  Please ensure the sizes are listed like: [[300, 250], ...].  Removing invalid mediaTypes.banner object from request.');
          delete adUnit.mediaTypes.banner;
        }
      }

      function validateVideoMediaType(adUnit) {
        var video = adUnit.mediaTypes.video;
        var tarPlayerSizeLen = typeof video.playerSize[0] === 'number' ? 2 : 1;
        var videoSizes = validateSizes(video.playerSize, tarPlayerSizeLen);

        if (videoSizes.length > 0) {
          if (tarPlayerSizeLen === 2) {
            utils.logInfo('Transforming video.playerSize from [640,480] to [[640,480]] so it\'s in the proper format.');
          }

          video.playerSize = videoSizes; // Deprecation Warning: This property will be deprecated in next release in favor of adUnit.mediaTypes.video.playerSize

          adUnit.sizes = videoSizes;
        } else {
          utils.logError('Detected incorrect configuration of mediaTypes.video.playerSize.  Please specify only one set of dimensions in a format like: [[640, 480]]. Removing invalid mediaTypes.video.playerSize property from request.');
          delete adUnit.mediaTypes.video.playerSize;
        }
      }

      function validateNativeMediaType(adUnit) {
        var _native = adUnit.mediaTypes["native"];

        if (_native.image && _native.image.sizes && !Array.isArray(_native.image.sizes)) {
          utils.logError('Please use an array of sizes for native.image.sizes field.  Removing invalid mediaTypes.native.image.sizes property from request.');
          delete adUnit.mediaTypes["native"].image.sizes;
        }

        if (_native.image && _native.image.aspect_ratios && !Array.isArray(_native.image.aspect_ratios)) {
          utils.logError('Please use an array of sizes for native.image.aspect_ratios field.  Removing invalid mediaTypes.native.image.aspect_ratios property from request.');
          delete adUnit.mediaTypes["native"].image.aspect_ratios;
        }

        if (_native.icon && _native.icon.sizes && !Array.isArray(_native.icon.sizes)) {
          utils.logError('Please use an array of sizes for native.icon.sizes field.  Removing invalid mediaTypes.native.icon.sizes property from request.');
          delete adUnit.mediaTypes["native"].icon.sizes;
        }
      }

      var adUnitSetupChecks = {
        validateBannerMediaType: validateBannerMediaType,
        validateVideoMediaType: validateVideoMediaType,
        validateNativeMediaType: validateNativeMediaType,
        validateSizes: validateSizes
      };
      var checkAdUnitSetup = Object(__WEBPACK_IMPORTED_MODULE_7__hook_js__["b"
      /* hook */
      ])('sync', function (adUnits) {
        return adUnits.filter(function (adUnit) {
          var mediaTypes = adUnit.mediaTypes;

          if (!mediaTypes || Object.keys(mediaTypes).length === 0) {
            utils.logError("Detected adUnit.code '".concat(adUnit.code, "' did not have a 'mediaTypes' object defined.  This is a required field for the auction, so this adUnit has been removed."));
            return false;
          }

          if (mediaTypes.banner) {
            validateBannerMediaType(adUnit);
          }

          if (mediaTypes.video) {
            var video = mediaTypes.video;

            if (video.playerSize) {
              validateVideoMediaType(adUnit);
            }
          }

          if (mediaTypes["native"]) {
            validateNativeMediaType(adUnit);
          }

          return true;
        });
      }, 'checkAdUnitSetup'); /// ///////////////////////////////
      //                              //
      //    Start Public APIs         //
      //                              //
      /// ///////////////////////////////

      /**
       * This function returns the query string targeting parameters available at this moment for a given ad unit. Note that some bidder's response may not have been received if you call this function too quickly after the requests are sent.
       * @param  {string} [adunitCode] adUnitCode to get the bid responses for
       * @alias module:pbjs.getAdserverTargetingForAdUnitCodeStr
       * @return {Array}  returnObj return bids array
       */

      pbjs.getAdserverTargetingForAdUnitCodeStr = function (adunitCode) {
        utils.logInfo("Invoking pbjs.getAdserverTargetingForAdUnitCodeStr", arguments); // call to retrieve bids array

        if (adunitCode) {
          var res = pbjs.getAdserverTargetingForAdUnitCode(adunitCode);
          return utils.transformAdServerTargetingObj(res);
        } else {
          utils.logMessage('Need to call getAdserverTargetingForAdUnitCodeStr with adunitCode');
        }
      };
      /**
       * This function returns the query string targeting parameters available at this moment for a given ad unit. Note that some bidder's response may not have been received if you call this function too quickly after the requests are sent.
       * @param adUnitCode {string} adUnitCode to get the bid responses for
       * @alias module:pbjs.getAdserverTargetingForAdUnitCode
       * @returns {Object}  returnObj return bids
       */


      pbjs.getAdserverTargetingForAdUnitCode = function (adUnitCode) {
        return pbjs.getAdserverTargeting(adUnitCode)[adUnitCode];
      };
      /**
       * returns all ad server targeting for all ad units
       * @return {Object} Map of adUnitCodes and targeting values []
       * @alias module:pbjs.getAdserverTargeting
       */


      pbjs.getAdserverTargeting = function (adUnitCode) {
        utils.logInfo("Invoking pbjs.getAdserverTargeting", arguments);
        return __WEBPACK_IMPORTED_MODULE_6__targeting_js__["a"
        /* targeting */
        ].getAllTargeting(adUnitCode);
      };

      function getBids(type) {
        var responses = __WEBPACK_IMPORTED_MODULE_5__auctionManager_js__["a"
        /* auctionManager */
        ][type]().filter(utils.bind.call(__WEBPACK_IMPORTED_MODULE_1__utils_js__["adUnitsFilter"], this, __WEBPACK_IMPORTED_MODULE_5__auctionManager_js__["a"
        /* auctionManager */
        ].getAdUnitCodes())); // find the last auction id to get responses for most recent auction only


        var currentAuctionId = __WEBPACK_IMPORTED_MODULE_5__auctionManager_js__["a"
        /* auctionManager */
        ].getLastAuctionId();

        return responses.map(function (bid) {
          return bid.adUnitCode;
        }).filter(__WEBPACK_IMPORTED_MODULE_1__utils_js__["uniques"]).map(function (adUnitCode) {
          return responses.filter(function (bid) {
            return bid.auctionId === currentAuctionId && bid.adUnitCode === adUnitCode;
          });
        }).filter(function (bids) {
          return bids && bids[0] && bids[0].adUnitCode;
        }).map(function (bids) {
          return _defineProperty({}, bids[0].adUnitCode, {
            bids: bids
          });
        }).reduce(function (a, b) {
          return _extends(a, b);
        }, {});
      }
      /**
       * This function returns the bids requests involved in an auction but not bid on
       * @alias module:pbjs.getNoBids
       * @return {Object}            map | object that contains the bidRequests
       */


      pbjs.getNoBids = function () {
        utils.logInfo("Invoking pbjs.getNoBids", arguments);
        return getBids('getNoBids');
      };
      /**
       * This function returns the bid responses at the given moment.
       * @alias module:pbjs.getBidResponses
       * @return {Object}            map | object that contains the bidResponses
       */


      pbjs.getBidResponses = function () {
        utils.logInfo("Invoking pbjs.getBidResponses", arguments);
        return getBids('getBidsReceived');
      };
      /**
       * Returns bidResponses for the specified adUnitCode
       * @param  {string} adUnitCode adUnitCode
       * @alias module:pbjs.getBidResponsesForAdUnitCode
       * @return {Object}            bidResponse object
       */


      pbjs.getBidResponsesForAdUnitCode = function (adUnitCode) {
        var bids = __WEBPACK_IMPORTED_MODULE_5__auctionManager_js__["a"
        /* auctionManager */
        ].getBidsReceived().filter(function (bid) {
          return bid.adUnitCode === adUnitCode;
        });

        return {
          bids: bids
        };
      };
      /**
       * Set query string targeting on one or more GPT ad units.
       * @param {(string|string[])} adUnit a single `adUnit.code` or multiple.
       * @param {function(object)} customSlotMatching gets a GoogleTag slot and returns a filter function for adUnitCode, so you can decide to match on either eg. return slot => { return adUnitCode => { return slot.getSlotElementId() === 'myFavoriteDivId'; } };
       * @alias module:pbjs.setTargetingForGPTAsync
       */


      pbjs.setTargetingForGPTAsync = function (adUnit, customSlotMatching) {
        utils.logInfo("Invoking pbjs.setTargetingForGPTAsync", arguments);

        if (!Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["isGptPubadsDefined"])()) {
          utils.logError('window.googletag is not defined on the page');
          return;
        } // get our ad unit codes


        var targetingSet = __WEBPACK_IMPORTED_MODULE_6__targeting_js__["a"
        /* targeting */
        ].getAllTargeting(adUnit); // first reset any old targeting


        __WEBPACK_IMPORTED_MODULE_6__targeting_js__["a"
        /* targeting */
        ].resetPresetTargeting(adUnit); // now set new targeting keys


        __WEBPACK_IMPORTED_MODULE_6__targeting_js__["a"
        /* targeting */
        ].setTargetingForGPT(targetingSet, customSlotMatching);

        Object.keys(targetingSet).forEach(function (adUnitCode) {
          Object.keys(targetingSet[adUnitCode]).forEach(function (targetingKey) {
            if (targetingKey === 'hb_adid') {
              __WEBPACK_IMPORTED_MODULE_5__auctionManager_js__["a"
              /* auctionManager */
              ].setStatusForBids(targetingSet[adUnitCode][targetingKey], CONSTANTS.BID_STATUS.BID_TARGETING_SET);
            }
          });
        }); // emit event

        events.emit(SET_TARGETING, targetingSet);
      };
      /**
       * Set query string targeting on all AST (AppNexus Seller Tag) ad units. Note that this function has to be called after all ad units on page are defined. For working example code, see [Using Prebid.js with AppNexus Publisher Ad Server](http://prebid.org/dev-docs/examples/use-prebid-with-appnexus-ad-server.html).
       * @param  {(string|string[])} adUnitCode adUnitCode or array of adUnitCodes
       * @alias module:pbjs.setTargetingForAst
       */


      pbjs.setTargetingForAst = function (adUnitCodes) {
        utils.logInfo("Invoking pbjs.setTargetingForAn", arguments);

        if (!__WEBPACK_IMPORTED_MODULE_6__targeting_js__["a"
        /* targeting */
        ].isApntagDefined()) {
          utils.logError('window.apntag is not defined on the page');
          return;
        }

        __WEBPACK_IMPORTED_MODULE_6__targeting_js__["a"
        /* targeting */
        ].setTargetingForAst(adUnitCodes); // emit event


        events.emit(SET_TARGETING, __WEBPACK_IMPORTED_MODULE_6__targeting_js__["a"
        /* targeting */
        ].getAllTargeting());
      };

      function emitAdRenderFail(_ref2) {
        var reason = _ref2.reason,
            message = _ref2.message,
            bid = _ref2.bid,
            id = _ref2.id;
        var data = {
          reason: reason,
          message: message
        };
        if (bid) data.bid = bid;
        if (id) data.adId = id;
        utils.logError(message);
        events.emit(AD_RENDER_FAILED, data);
      }
      /**
       * This function will render the ad (based on params) in the given iframe document passed through.
       * Note that doc SHOULD NOT be the parent document page as we can't doc.write() asynchronously
       * @param  {HTMLDocument} doc document
       * @param  {string} id bid id to locate the ad
       * @alias module:pbjs.renderAd
       */


      pbjs.renderAd = function (doc, id) {
        utils.logInfo("Invoking pbjs.renderAd", arguments);
        utils.logMessage('Calling renderAd with adId :' + id);

        if (doc && id) {
          try {
            // lookup ad by ad Id
            var bid = __WEBPACK_IMPORTED_MODULE_5__auctionManager_js__["a"
            /* auctionManager */
            ].findBidByAdId(id);

            if (bid) {
              // replace macros according to openRTB with price paid = bid.cpm
              bid.ad = utils.replaceAuctionPrice(bid.ad, bid.cpm);
              bid.adUrl = utils.replaceAuctionPrice(bid.adUrl, bid.cpm); // save winning bids

              __WEBPACK_IMPORTED_MODULE_5__auctionManager_js__["a"
              /* auctionManager */
              ].addWinningBid(bid); // emit 'bid won' event here


              events.emit(BID_WON, bid);
              var height = bid.height,
                  width = bid.width,
                  ad = bid.ad,
                  mediaType = bid.mediaType,
                  adUrl = bid.adUrl,
                  renderer = bid.renderer;
              var creativeComment = document.createComment("Creative ".concat(bid.creativeId, " served by ").concat(bid.bidder, " Prebid.js Header Bidding"));
              utils.insertElement(creativeComment, doc, 'body');

              if (Object(__WEBPACK_IMPORTED_MODULE_11__Renderer_js__["c"
              /* isRendererRequired */
              ])(renderer)) {
                Object(__WEBPACK_IMPORTED_MODULE_11__Renderer_js__["b"
                /* executeRenderer */
                ])(renderer, bid);
              } else if (doc === document && !utils.inIframe() || mediaType === 'video') {
                var message = "Error trying to write ad. Ad render call ad id ".concat(id, " was prevented from writing to the main document.");
                emitAdRenderFail({
                  reason: PREVENT_WRITING_ON_MAIN_DOCUMENT,
                  message: message,
                  bid: bid,
                  id: id
                });
              } else if (ad) {
                // will check if browser is firefox and below version 67, if so execute special doc.open()
                // for details see: https://github.com/prebid/Prebid.js/pull/3524
                // TODO remove this browser specific code at later date (when Firefox < 67 usage is mostly gone)
                if (navigator.userAgent && navigator.userAgent.toLowerCase().indexOf('firefox/') > -1) {
                  var firefoxVerRegx = /firefox\/([\d\.]+)/;
                  var firefoxVer = navigator.userAgent.toLowerCase().match(firefoxVerRegx)[1]; // grabs the text in the 1st matching group

                  if (firefoxVer && parseInt(firefoxVer, 10) < 67) {
                    doc.open('text/html', 'replace');
                  }
                }

                doc.write(ad);
                doc.close();
                setRenderSize(doc, width, height);
                utils.callBurl(bid);
              } else if (adUrl) {
                var iframe = utils.createInvisibleIframe();
                iframe.height = height;
                iframe.width = width;
                iframe.style.display = 'inline';
                iframe.style.overflow = 'hidden';
                iframe.src = adUrl;
                utils.insertElement(iframe, doc, 'body');
                setRenderSize(doc, width, height);
                utils.callBurl(bid);
              } else {
                var _message = "Error trying to write ad. No ad for bid response id: ".concat(id);

                emitAdRenderFail({
                  reason: NO_AD,
                  message: _message,
                  bid: bid,
                  id: id
                });
              }
            } else {
              var _message2 = "Error trying to write ad. Cannot find ad by given id : ".concat(id);

              emitAdRenderFail({
                reason: CANNOT_FIND_AD,
                message: _message2,
                id: id
              });
            }
          } catch (e) {
            var _message3 = "Error trying to write ad Id :".concat(id, " to the page:").concat(e.message);

            emitAdRenderFail({
              reason: EXCEPTION,
              message: _message3,
              id: id
            });
          }
        } else {
          var _message4 = "Error trying to write ad Id :".concat(id, " to the page. Missing document or adId");

          emitAdRenderFail({
            reason: MISSING_DOC_OR_ADID,
            message: _message4,
            id: id
          });
        }
      };
      /**
       * Remove adUnit from the $$PREBID_GLOBAL$$ configuration, if there are no addUnitCode(s) it will remove all
       * @param  {string| Array} adUnitCode the adUnitCode(s) to remove
       * @alias module:pbjs.removeAdUnit
       */


      pbjs.removeAdUnit = function (adUnitCode) {
        utils.logInfo("Invoking pbjs.removeAdUnit", arguments);

        if (!adUnitCode) {
          pbjs.adUnits = [];
          return;
        }

        var adUnitCodes;

        if (utils.isArray(adUnitCode)) {
          adUnitCodes = adUnitCode;
        } else {
          adUnitCodes = [adUnitCode];
        }

        adUnitCodes.forEach(function (adUnitCode) {
          for (var i = pbjs.adUnits.length - 1; i >= 0; i--) {
            if (pbjs.adUnits[i].code === adUnitCode) {
              pbjs.adUnits.splice(i, 1);
            }
          }
        });
      };
      /**
       * @param {Object} requestOptions
       * @param {function} requestOptions.bidsBackHandler
       * @param {number} requestOptions.timeout
       * @param {Array} requestOptions.adUnits
       * @param {Array} requestOptions.adUnitCodes
       * @param {Array} requestOptions.labels
       * @param {String} requestOptions.auctionId
       * @alias module:pbjs.requestBids
       */


      pbjs.requestBids = Object(__WEBPACK_IMPORTED_MODULE_7__hook_js__["b"
      /* hook */
      ])('async', function () {
        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            bidsBackHandler = _ref3.bidsBackHandler,
            timeout = _ref3.timeout,
            adUnits = _ref3.adUnits,
            adUnitCodes = _ref3.adUnitCodes,
            labels = _ref3.labels,
            auctionId = _ref3.auctionId;

        events.emit(REQUEST_BIDS);

        var cbTimeout = timeout || __WEBPACK_IMPORTED_MODULE_4__config_js__["b"
        /* config */
        ].getConfig('bidderTimeout');

        adUnits = adUnits || pbjs.adUnits;
        utils.logInfo("Invoking pbjs.requestBids", arguments);

        if (adUnitCodes && adUnitCodes.length) {
          // if specific adUnitCodes supplied filter adUnits for those codes
          adUnits = adUnits.filter(function (unit) {
            return __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_includes_js___default()(adUnitCodes, unit.code);
          });
        } else {
          // otherwise derive adUnitCodes from adUnits
          adUnitCodes = adUnits && adUnits.map(function (unit) {
            return unit.code;
          });
        }

        adUnits = checkAdUnitSetup(adUnits);
        /*
         * for a given adunit which supports a set of mediaTypes
         * and a given bidder which supports a set of mediaTypes
         * a bidder is eligible to participate on the adunit
         * if it supports at least one of the mediaTypes on the adunit
         */

        adUnits.forEach(function (adUnit) {
          // get the adunit's mediaTypes, defaulting to banner if mediaTypes isn't present
          var adUnitMediaTypes = Object.keys(adUnit.mediaTypes || {
            'banner': 'banner'
          }); // get the bidder's mediaTypes

          var allBidders = adUnit.bids.map(function (bid) {
            return bid.bidder;
          });
          var bidderRegistry = adapterManager.bidderRegistry;

          var s2sConfig = __WEBPACK_IMPORTED_MODULE_4__config_js__["b"
          /* config */
          ].getConfig('s2sConfig');

          var s2sBidders = s2sConfig && s2sConfig.bidders;
          var bidders = s2sBidders ? allBidders.filter(function (bidder) {
            return !__WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_includes_js___default()(s2sBidders, bidder);
          }) : allBidders;
          adUnit.transactionId = utils.generateUUID();
          bidders.forEach(function (bidder) {
            var adapter = bidderRegistry[bidder];
            var spec = adapter && adapter.getSpec && adapter.getSpec(); // banner is default if not specified in spec

            var bidderMediaTypes = spec && spec.supportedMediaTypes || ['banner']; // check if the bidder's mediaTypes are not in the adUnit's mediaTypes

            var bidderEligible = adUnitMediaTypes.some(function (type) {
              return __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_includes_js___default()(bidderMediaTypes, type);
            });

            if (!bidderEligible) {
              // drop the bidder from the ad unit if it's not compatible
              utils.logWarn(utils.unsupportedBidderMessage(adUnit, bidder));
              adUnit.bids = adUnit.bids.filter(function (bid) {
                return bid.bidder !== bidder;
              });
            } else {
              __WEBPACK_IMPORTED_MODULE_10__adUnits_js__["a"
              /* adunitCounter */
              ].incrementBidderRequestsCounter(adUnit.code, bidder);
            }
          });

          __WEBPACK_IMPORTED_MODULE_10__adUnits_js__["a"
          /* adunitCounter */
          ].incrementRequestsCounter(adUnit.code);
        });

        if (!adUnits || adUnits.length === 0) {
          utils.logMessage('No adUnits configured. No bids requested.');

          if (typeof bidsBackHandler === 'function') {
            // executeCallback, this will only be called in case of first request
            try {
              bidsBackHandler();
            } catch (e) {
              utils.logError('Error executing bidsBackHandler', null, e);
            }
          }

          return;
        }

        var auction = __WEBPACK_IMPORTED_MODULE_5__auctionManager_js__["a"
        /* auctionManager */
        ].createAuction({
          adUnits: adUnits,
          adUnitCodes: adUnitCodes,
          callback: bidsBackHandler,
          cbTimeout: cbTimeout,
          labels: labels,
          auctionId: auctionId
        });

        var adUnitsLen = adUnits.length;

        if (adUnitsLen > 15) {
          utils.logInfo("Current auction ".concat(auction.getAuctionId(), " contains ").concat(adUnitsLen, " adUnits."), adUnits);
        }

        adUnitCodes.forEach(function (code) {
          return __WEBPACK_IMPORTED_MODULE_6__targeting_js__["a"
          /* targeting */
          ].setLatestAuctionForAdUnit(code, auction.getAuctionId());
        });
        auction.callBids();
        return auction;
      });
      /**
       *
       * Add adunit(s)
       * @param {Array|Object} adUnitArr Array of adUnits or single adUnit Object.
       * @alias module:pbjs.addAdUnits
       */

      pbjs.addAdUnits = function (adUnitArr) {
        utils.logInfo("Invoking pbjs.addAdUnits", arguments);

        if (utils.isArray(adUnitArr)) {
          pbjs.adUnits.push.apply(pbjs.adUnits, adUnitArr);
        } else if (_typeof(adUnitArr) === 'object') {
          pbjs.adUnits.push(adUnitArr);
        } // emit event


        events.emit(ADD_AD_UNITS);
      };
      /**
       * @param {string} event the name of the event
       * @param {Function} handler a callback to set on event
       * @param {string} id an identifier in the context of the event
       * @alias module:pbjs.onEvent
       *
       * This API call allows you to register a callback to handle a Prebid.js event.
       * An optional `id` parameter provides more finely-grained event callback registration.
       * This makes it possible to register callback events for a specific item in the
       * event context. For example, `bidWon` events will accept an `id` for ad unit code.
       * `bidWon` callbacks registered with an ad unit code id will be called when a bid
       * for that ad unit code wins the auction. Without an `id` this method registers the
       * callback for every `bidWon` event.
       *
       * Currently `bidWon` is the only event that accepts an `id` parameter.
       */


      pbjs.onEvent = function (event, handler, id) {
        utils.logInfo("Invoking pbjs.onEvent", arguments);

        if (!utils.isFn(handler)) {
          utils.logError('The event handler provided is not a function and was not set on event "' + event + '".');
          return;
        }

        if (id && !eventValidators[event].call(null, id)) {
          utils.logError('The id provided is not valid for event "' + event + '" and no handler was set.');
          return;
        }

        events.on(event, handler, id);
      };
      /**
       * @param {string} event the name of the event
       * @param {Function} handler a callback to remove from the event
       * @param {string} id an identifier in the context of the event (see `$$PREBID_GLOBAL$$.onEvent`)
       * @alias module:pbjs.offEvent
       */


      pbjs.offEvent = function (event, handler, id) {
        utils.logInfo("Invoking pbjs.offEvent", arguments);

        if (id && !eventValidators[event].call(null, id)) {
          return;
        }

        events.off(event, handler, id);
      };
      /*
       * Wrapper to register bidderAdapter externally (adapterManager.registerBidAdapter())
       * @param  {Function} bidderAdaptor [description]
       * @param  {string} bidderCode [description]
       * @alias module:pbjs.registerBidAdapter
       */


      pbjs.registerBidAdapter = function (bidderAdaptor, bidderCode) {
        utils.logInfo("Invoking pbjs.registerBidAdapter", arguments);

        try {
          adapterManager.registerBidAdapter(bidderAdaptor(), bidderCode);
        } catch (e) {
          utils.logError('Error registering bidder adapter : ' + e.message);
        }
      };
      /**
       * Wrapper to register analyticsAdapter externally (adapterManager.registerAnalyticsAdapter())
       * @param  {Object} options [description]
       * @alias module:pbjs.registerAnalyticsAdapter
       */


      pbjs.registerAnalyticsAdapter = function (options) {
        utils.logInfo("Invoking pbjs.registerAnalyticsAdapter", arguments);

        try {
          adapterManager.registerAnalyticsAdapter(options);
        } catch (e) {
          utils.logError('Error registering analytics adapter : ' + e.message);
        }
      };
      /**
       * Wrapper to bidfactory.createBid()
       * @param  {string} statusCode [description]
       * @alias module:pbjs.createBid
       * @return {Object} bidResponse [description]
       */


      pbjs.createBid = function (statusCode) {
        utils.logInfo("Invoking pbjs.createBid", arguments);
        return Object(__WEBPACK_IMPORTED_MODULE_12__bidfactory_js__["a"
        /* createBid */
        ])(statusCode);
      };
      /**
       * Enable sending analytics data to the analytics provider of your
       * choice.
       *
       * For usage, see [Integrate with the Prebid Analytics
       * API](http://prebid.org/dev-docs/integrate-with-the-prebid-analytics-api.html).
       *
       * For a list of analytics adapters, see [Analytics for
       * Prebid](http://prebid.org/overview/analytics.html).
       * @param  {Object} config
       * @param {string} config.provider The name of the provider, e.g., `"ga"` for Google Analytics.
       * @param {Object} config.options The options for this particular analytics adapter.  This will likely vary between adapters.
       * @alias module:pbjs.enableAnalytics
       */


      pbjs.enableAnalytics = function (config) {
        if (config && !utils.isEmpty(config)) {
          utils.logInfo("Invoking pbjs.enableAnalytics for: ", config);
          adapterManager.enableAnalytics(config);
        } else {
          utils.logError("pbjs.enableAnalytics should be called with option {}");
        }
      };
      /**
       * @alias module:pbjs.aliasBidder
       */


      pbjs.aliasBidder = function (bidderCode, alias) {
        utils.logInfo("Invoking pbjs.aliasBidder", arguments);

        if (bidderCode && alias) {
          adapterManager.aliasBidAdapter(bidderCode, alias);
        } else {
          utils.logError('bidderCode and alias must be passed as arguments', "pbjs.aliasBidder");
        }
      };
      /**
       * The bid response object returned by an external bidder adapter during the auction.
       * @typedef {Object} AdapterBidResponse
       * @property {string} pbAg Auto granularity price bucket; CPM <= 5 ? increment = 0.05 : CPM > 5 && CPM <= 10 ? increment = 0.10 : CPM > 10 && CPM <= 20 ? increment = 0.50 : CPM > 20 ? priceCap = 20.00.  Example: `"0.80"`.
       * @property {string} pbCg Custom price bucket.  For example setup, see {@link setPriceGranularity}.  Example: `"0.84"`.
       * @property {string} pbDg Dense granularity price bucket; CPM <= 3 ? increment = 0.01 : CPM > 3 && CPM <= 8 ? increment = 0.05 : CPM > 8 && CPM <= 20 ? increment = 0.50 : CPM > 20? priceCap = 20.00.  Example: `"0.84"`.
       * @property {string} pbLg Low granularity price bucket; $0.50 increment, capped at $5, floored to two decimal places.  Example: `"0.50"`.
       * @property {string} pbMg Medium granularity price bucket; $0.10 increment, capped at $20, floored to two decimal places.  Example: `"0.80"`.
       * @property {string} pbHg High granularity price bucket; $0.01 increment, capped at $20, floored to two decimal places.  Example: `"0.84"`.
       *
       * @property {string} bidder The string name of the bidder.  This *may* be the same as the `bidderCode`.  For For a list of all bidders and their codes, see [Bidders' Params](http://prebid.org/dev-docs/bidders.html).
       * @property {string} bidderCode The unique string that identifies this bidder.  For a list of all bidders and their codes, see [Bidders' Params](http://prebid.org/dev-docs/bidders.html).
       *
       * @property {string} requestId The [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier) representing the bid request.
       * @property {number} requestTimestamp The time at which the bid request was sent out, expressed in milliseconds.
       * @property {number} responseTimestamp The time at which the bid response was received, expressed in milliseconds.
       * @property {number} timeToRespond How long it took for the bidder to respond with this bid, expressed in milliseconds.
       *
       * @property {string} size The size of the ad creative, expressed in `"AxB"` format, where A and B are numbers of pixels.  Example: `"320x50"`.
       * @property {string} width The width of the ad creative in pixels.  Example: `"320"`.
       * @property {string} height The height of the ad creative in pixels.  Example: `"50"`.
       *
       * @property {string} ad The actual ad creative content, often HTML with CSS, JavaScript, and/or links to additional content.  Example: `"<div id='beacon_-YQbipJtdxmMCgEPHExLhmqzEm' style='position: absolute; left: 0px; top: 0px; visibility: hidden;'><img src='http://aplus-...'/></div><iframe src=\"http://aax-us-east.amazon-adsystem.com/e/is/8dcfcd..." width=\"728\" height=\"90\" frameborder=\"0\" ...></iframe>",`.
       * @property {number} ad_id The ad ID of the creative, as understood by the bidder's system.  Used by the line item's [creative in the ad server](http://prebid.org/adops/send-all-bids-adops.html#step-3-add-a-creative).
       * @property {string} adUnitCode The code used to uniquely identify the ad unit on the publisher's page.
       *
       * @property {string} statusMessage The status of the bid.  Allowed values: `"Bid available"` or `"Bid returned empty or error response"`.
       * @property {number} cpm The exact bid price from the bidder, expressed to the thousandths place.  Example: `"0.849"`.
       *
       * @property {Object} adserverTargeting An object whose values represent the ad server's targeting on the bid.
       * @property {string} adserverTargeting.hb_adid The ad ID of the creative, as understood by the ad server.
       * @property {string} adserverTargeting.hb_pb The price paid to show the creative, as logged in the ad server.
       * @property {string} adserverTargeting.hb_bidder The winning bidder whose ad creative will be served by the ad server.
      */

      /**
       * Get all of the bids that have been rendered.  Useful for [troubleshooting your integration](http://prebid.org/dev-docs/prebid-troubleshooting-guide.html).
       * @return {Array<AdapterBidResponse>} A list of bids that have been rendered.
      */


      pbjs.getAllWinningBids = function () {
        return __WEBPACK_IMPORTED_MODULE_5__auctionManager_js__["a"
        /* auctionManager */
        ].getAllWinningBids();
      };
      /**
       * Get all of the bids that have won their respective auctions.
       * @return {Array<AdapterBidResponse>} A list of bids that have won their respective auctions.
       */


      pbjs.getAllPrebidWinningBids = function () {
        return __WEBPACK_IMPORTED_MODULE_5__auctionManager_js__["a"
        /* auctionManager */
        ].getBidsReceived().filter(function (bid) {
          return bid.status === CONSTANTS.BID_STATUS.BID_TARGETING_SET;
        });
      };
      /**
       * Get array of highest cpm bids for all adUnits, or highest cpm bid
       * object for the given adUnit
       * @param {string} adUnitCode - optional ad unit code
       * @alias module:pbjs.getHighestCpmBids
       * @return {Array} array containing highest cpm bid object(s)
       */


      pbjs.getHighestCpmBids = function (adUnitCode) {
        return __WEBPACK_IMPORTED_MODULE_6__targeting_js__["a"
        /* targeting */
        ].getWinningBids(adUnitCode);
      };
      /**
       * Mark the winning bid as used, should only be used in conjunction with video
       * @typedef {Object} MarkBidRequest
       * @property {string} adUnitCode The ad unit code
       * @property {string} adId The id representing the ad we want to mark
       *
       * @alias module:pbjs.markWinningBidAsUsed
      */


      pbjs.markWinningBidAsUsed = function (markBidRequest) {
        var bids = [];

        if (markBidRequest.adUnitCode && markBidRequest.adId) {
          bids = __WEBPACK_IMPORTED_MODULE_5__auctionManager_js__["a"
          /* auctionManager */
          ].getBidsReceived().filter(function (bid) {
            return bid.adId === markBidRequest.adId && bid.adUnitCode === markBidRequest.adUnitCode;
          });
        } else if (markBidRequest.adUnitCode) {
          bids = __WEBPACK_IMPORTED_MODULE_6__targeting_js__["a"
          /* targeting */
          ].getWinningBids(markBidRequest.adUnitCode);
        } else if (markBidRequest.adId) {
          bids = __WEBPACK_IMPORTED_MODULE_5__auctionManager_js__["a"
          /* auctionManager */
          ].getBidsReceived().filter(function (bid) {
            return bid.adId === markBidRequest.adId;
          });
        } else {
          utils.logWarn('Inproper usage of markWinningBidAsUsed. It\'ll need an adUnitCode and/or adId to function.');
        }

        if (bids.length > 0) {
          bids[0].status = CONSTANTS.BID_STATUS.RENDERED;
        }
      };
      /**
       * Get Prebid config options
       * @param {Object} options
       * @alias module:pbjs.getConfig
       */


      pbjs.getConfig = __WEBPACK_IMPORTED_MODULE_4__config_js__["b"
      /* config */
      ].getConfig;
      /**
       * Set Prebid config options.
       * (Added in version 0.27.0).
       *
       * `setConfig` is designed to allow for advanced configuration while
       * reducing the surface area of the public API.  For more information
       * about the move to `setConfig` (and the resulting deprecations of
       * some other public methods), see [the Prebid 1.0 public API
       * proposal](https://gist.github.com/mkendall07/51ee5f6b9f2df01a89162cf6de7fe5b6).
       *
       * #### Troubleshooting your configuration
       *
       * If you call `pbjs.setConfig` without an object, e.g.,
       *
       * `pbjs.setConfig('debug', 'true'))`
       *
       * then Prebid.js will print an error to the console that says:
       *
       * ```
       * ERROR: setConfig options must be an object
       * ```
       *
       * If you don't see that message, you can assume the config object is valid.
       *
       * @param {Object} options Global Prebid configuration object. Must be JSON - no JavaScript functions are allowed.
       * @param {string} options.bidderSequence The order in which bidders are called.  Example: `pbjs.setConfig({ bidderSequence: "fixed" })`.  Allowed values: `"fixed"` (order defined in `adUnit.bids` array on page), `"random"`.
       * @param {boolean} options.debug Turn debug logging on/off. Example: `pbjs.setConfig({ debug: true })`.
       * @param {string} options.priceGranularity The bid price granularity to use.  Example: `pbjs.setConfig({ priceGranularity: "medium" })`. Allowed values: `"low"` ($0.50), `"medium"` ($0.10), `"high"` ($0.01), `"auto"` (sliding scale), `"dense"` (like `"auto"`, with smaller increments at lower CPMs), or a custom price bucket object, e.g., `{ "buckets" : [{"min" : 0,"max" : 20,"increment" : 0.1,"cap" : true}]}`.
       * @param {boolean} options.enableSendAllBids Turn "send all bids" mode on/off.  Example: `pbjs.setConfig({ enableSendAllBids: true })`.
       * @param {number} options.bidderTimeout Set a global bidder timeout, in milliseconds.  Example: `pbjs.setConfig({ bidderTimeout: 3000 })`.  Note that it's still possible for a bid to get into the auction that responds after this timeout. This is due to how [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout) works in JS: it queues the callback in the event loop in an approximate location that should execute after this time but it is not guaranteed.  For more information about the asynchronous event loop and `setTimeout`, see [How JavaScript Timers Work](https://johnresig.com/blog/how-javascript-timers-work/).
       * @param {string} options.publisherDomain The publisher's domain where Prebid is running, for cross-domain iFrame communication.  Example: `pbjs.setConfig({ publisherDomain: "https://www.theverge.com" })`.
       * @param {Object} options.s2sConfig The configuration object for [server-to-server header bidding](http://prebid.org/dev-docs/get-started-with-prebid-server.html).  Example:
       * @alias module:pbjs.setConfig
       * ```
       * pbjs.setConfig({
       *     s2sConfig: {
       *         accountId: '1',
       *         enabled: true,
       *         bidders: ['appnexus', 'pubmatic'],
       *         timeout: 1000,
       *         adapter: 'prebidServer',
       *         endpoint: 'https://prebid.adnxs.com/pbs/v1/auction'
       *     }
       * })
       * ```
       */

      pbjs.setConfig = __WEBPACK_IMPORTED_MODULE_4__config_js__["b"
      /* config */
      ].setConfig;
      pbjs.setBidderConfig = __WEBPACK_IMPORTED_MODULE_4__config_js__["b"
      /* config */
      ].setBidderConfig;
      pbjs.que.push(function () {
        return Object(__WEBPACK_IMPORTED_MODULE_2__secureCreatives_js__["a"
        /* listenMessagesFromCreative */
        ])();
      });
      /**
       * This queue lets users load Prebid asynchronously, but run functions the same way regardless of whether it gets loaded
       * before or after their script executes. For example, given the code:
       *
       * <script src="url/to/Prebid.js" async></script>
       * <script>
       *   var pbjs = pbjs || {};
       *   pbjs.cmd = pbjs.cmd || [];
       *   pbjs.cmd.push(functionToExecuteOncePrebidLoads);
       * </script>
       *
       * If the page's script runs before prebid loads, then their function gets added to the queue, and executed
       * by prebid once it's done loading. If it runs after prebid loads, then this monkey-patch causes their
       * function to execute immediately.
       *
       * @memberof pbjs
       * @param  {function} command A function which takes no arguments. This is guaranteed to run exactly once, and only after
       *                            the Prebid script has been fully loaded.
       * @alias module:pbjs.cmd.push
       */

      pbjs.cmd.push = function (command) {
        if (typeof command === 'function') {
          try {
            command.call();
          } catch (e) {
            utils.logError('Error processing command :', e.message, e.stack);
          }
        } else {
          utils.logError("Commands written into pbjs.cmd.push must be wrapped in a function");
        }
      };

      pbjs.que.push = pbjs.cmd.push;

      function processQueue(queue) {
        queue.forEach(function (cmd) {
          if (typeof cmd.called === 'undefined') {
            try {
              cmd.call();
              cmd.called = true;
            } catch (e) {
              utils.logError('Error processing command :', 'prebid.js', e);
            }
          }
        });
      }
      /**
       * @alias module:pbjs.processQueue
       */


      pbjs.processQueue = function () {
        __WEBPACK_IMPORTED_MODULE_7__hook_js__["b"
        /* hook */
        ].ready();

        processQueue(pbjs.que);
        processQueue(pbjs.cmd);
      };
      /* harmony default export */


      __webpack_exports__["default"] = pbjs;
      /***/
    },

    /***/
    56:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */
      __webpack_exports__["a"] = registerVideoSupport;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__prebidGlobal_js__ = __webpack_require__(18);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__utils_js__ = __webpack_require__(0);

      var prebid = Object(__WEBPACK_IMPORTED_MODULE_0__prebidGlobal_js__["a"
      /* getGlobal */
      ])();
      /**
       * This file defines the plugin points in prebid-core for AdServer-specific functionality.
       *
       * Its main job is to expose functions for AdServer modules to append functionality to the Prebid public API.
       * For a given Ad Server with name "adServerName", these functions will only change the API in the
       * $$PREBID_GLOBAL$$.adServers[adServerName] namespace.
       */

      /**
       * @typedef {Object} CachedVideoBid
       *
       * @property {string} videoCacheId The ID which can be used to retrieve this video from prebid-server.
       *   This is the same ID given to the callback in the videoCache's store function.
       */

      /**
       * @function VideoAdUrlBuilder
       *
       * @param {CachedVideoBid} bid The winning Bid which the ad server should show, assuming it beats out
       *   the competition.
       *
       * @param {Object} options Options required by the Ad Server to make a valid AdServer URL.
       *   This object will have different properties depending on the specific ad server supported.
       *   For more information, see the docs inside the ad server module you're supporting.
       *
       * @return {string} A URL which can be passed into the Video player to play an ad.
       */

      /**
       * @typedef {Object} VideoSupport
       *
       * @function {VideoAdUrlBuilder} buildVideoAdUrl
       */

      /**
       * Enable video support for the Ad Server.
       *
       * @property {string} name The identifying name for this adserver.
       * @property {VideoSupport} videoSupport An object with the functions needed to support video in Prebid.
       */

      function registerVideoSupport(name, videoSupport) {
        prebid.adServers = prebid.adServers || {};
        prebid.adServers[name] = prebid.adServers[name] || {};
        Object.keys(videoSupport).forEach(function (key) {
          if (prebid.adServers[name][key]) {
            Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["logWarn"])("Attempting to add an already registered function property ".concat(key, " for AdServer ").concat(name, "."));
            return;
          }

          prebid.adServers[name][key] = videoSupport[key];
        });
      }
      /***/

    },

    /***/
    57:
    /***/
    function _(module, exports) {
      module.exports = function (it) {
        if (typeof it != 'function') throw TypeError(it + ' is not a function!');
        return it;
      };
      /***/

    },

    /***/
    58:
    /***/
    function _(module, exports, __webpack_require__) {
      var isObject = __webpack_require__(17);

      var document = __webpack_require__(19).document; // typeof document.createElement is 'object' in old IE


      var is = isObject(document) && isObject(document.createElement);

      module.exports = function (it) {
        return is ? document.createElement(it) : {};
      };
      /***/

    },

    /***/
    59:
    /***/
    function _(module, exports, __webpack_require__) {
      // fallback for non-array-like ES3 and non-enumerable old V8 strings
      var cof = __webpack_require__(37); // eslint-disable-next-line no-prototype-builtins


      module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
        return cof(it) == 'String' ? it.split('') : Object(it);
      };
      /***/
    },

    /***/
    60:
    /***/
    function _(module, exports, __webpack_require__) {
      var core = __webpack_require__(16);

      var global = __webpack_require__(19);

      var SHARED = '__core-js_shared__';
      var store = global[SHARED] || (global[SHARED] = {});
      (module.exports = function (key, value) {
        return store[key] || (store[key] = value !== undefined ? value : {});
      })('versions', []).push({
        version: core.version,
        mode: __webpack_require__(61) ? 'pure' : 'global',
        copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
      });
      /***/
    },

    /***/
    61:
    /***/
    function _(module, exports) {
      module.exports = true;
      /***/
    },

    /***/
    62:
    /***/
    function _(module, exports, __webpack_require__) {
      // false -> Array#indexOf
      // true  -> Array#includes
      var toIObject = __webpack_require__(49);

      var toLength = __webpack_require__(39);

      var toAbsoluteIndex = __webpack_require__(89);

      module.exports = function (IS_INCLUDES) {
        return function ($this, el, fromIndex) {
          var O = toIObject($this);
          var length = toLength(O.length);
          var index = toAbsoluteIndex(fromIndex, length);
          var value; // Array#includes uses SameValueZero equality algorithm
          // eslint-disable-next-line no-self-compare

          if (IS_INCLUDES && el != el) while (length > index) {
            value = O[index++]; // eslint-disable-next-line no-self-compare

            if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
          } else for (; length > index; index++) {
            if (IS_INCLUDES || index in O) {
              if (O[index] === el) return IS_INCLUDES || index || 0;
            }
          }
          return !IS_INCLUDES && -1;
        };
      };
      /***/

    },

    /***/
    63:
    /***/
    function _(module, exports, __webpack_require__) {
      __webpack_require__(90);

      __webpack_require__(64);

      __webpack_require__(99);

      __webpack_require__(101);

      __webpack_require__(105);

      __webpack_require__(108);

      __webpack_require__(110);

      module.exports = __webpack_require__(16).Set;
      /***/
    },

    /***/
    64:
    /***/
    function _(module, exports, __webpack_require__) {
      var $at = __webpack_require__(91)(true); // 21.1.3.27 String.prototype[@@iterator]()


      __webpack_require__(50)(String, 'String', function (iterated) {
        this._t = String(iterated); // target

        this._i = 0; // next index
        // 21.1.5.2.1 %StringIteratorPrototype%.next()
      }, function () {
        var O = this._t;
        var index = this._i;
        var point;
        if (index >= O.length) return {
          value: undefined,
          done: true
        };
        point = $at(O, index);
        this._i += point.length;
        return {
          value: point,
          done: false
        };
      });
      /***/

    },

    /***/
    65:
    /***/
    function _(module, exports, __webpack_require__) {
      // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
      var anObject = __webpack_require__(29);

      var dPs = __webpack_require__(94);

      var enumBugKeys = __webpack_require__(66);

      var IE_PROTO = __webpack_require__(51)('IE_PROTO');

      var Empty = function Empty() {
        /* empty */
      };

      var PROTOTYPE = 'prototype'; // Create object with fake `null` prototype: use iframe Object with cleared prototype

      var _createDict2 = function createDict() {
        // Thrash, waste and sodomy: IE GC bug
        var iframe = __webpack_require__(58)('iframe');

        var i = enumBugKeys.length;
        var lt = '<';
        var gt = '>';
        var iframeDocument;
        iframe.style.display = 'none';

        __webpack_require__(97).appendChild(iframe);

        iframe.src = 'javascript:'; // eslint-disable-line no-script-url
        // createDict = iframe.contentWindow.Object;
        // html.removeChild(iframe);

        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
        iframeDocument.close();
        _createDict2 = iframeDocument.F;

        while (i--) {
          delete _createDict2[PROTOTYPE][enumBugKeys[i]];
        }

        return _createDict2();
      };

      module.exports = Object.create || function create(O, Properties) {
        var result;

        if (O !== null) {
          Empty[PROTOTYPE] = anObject(O);
          result = new Empty();
          Empty[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

          result[IE_PROTO] = O;
        } else result = _createDict2();

        return Properties === undefined ? result : dPs(result, Properties);
      };
      /***/

    },

    /***/
    66:
    /***/
    function _(module, exports) {
      // IE 8- don't enum bug keys
      module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
      /***/
    },

    /***/
    67:
    /***/
    function _(module, exports) {
      module.exports = function (done, value) {
        return {
          value: value,
          done: !!done
        };
      };
      /***/

    },

    /***/
    68:
    /***/
    function _(module, exports, __webpack_require__) {
      var hide = __webpack_require__(21);

      module.exports = function (target, src, safe) {
        for (var key in src) {
          if (safe && target[key]) target[key] = src[key];else hide(target, key, src[key]);
        }

        return target;
      };
      /***/

    },

    /***/
    681:
    /***/
    function _(module, exports, __webpack_require__) {
      module.exports = __webpack_require__(55);
      /***/
    },

    /***/
    69:
    /***/
    function _(module, exports) {
      module.exports = function (it, Constructor, name, forbiddenField) {
        if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
          throw TypeError(name + ': incorrect invocation!');
        }

        return it;
      };
      /***/

    },

    /***/
    7:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "gdprDataHandler", function () {
        return gdprDataHandler;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "uspDataHandler", function () {
        return uspDataHandler;
      });
      /* harmony export (immutable) */


      __webpack_exports__["setS2STestingModule"] = setS2STestingModule;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__sizeMapping_js__ = __webpack_require__(78);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__native_js__ = __webpack_require__(23);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__adapters_bidderFactory_js__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__ajax_js__ = __webpack_require__(4);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6__hook_js__ = __webpack_require__(13);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js__ = __webpack_require__(11);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_8_core_js_library_fn_array_find_js__ = __webpack_require__(12);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_8_core_js_library_fn_array_find_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_core_js_library_fn_array_find_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_9__adUnits_js__ = __webpack_require__(53);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_10__refererDetection_js__ = __webpack_require__(32);

      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
      }

      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }

      function _iterableToArrayLimit(arr, i) {
        if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
          return;
        }

        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
      }

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }
      /** @module adaptermanger */


      var utils = __webpack_require__(0);

      var CONSTANTS = __webpack_require__(5);

      var events = __webpack_require__(8);

      var s2sTestingModule; // store s2sTesting module if it's loaded

      var adapterManager = {};

      var _bidderRegistry = adapterManager.bidderRegistry = {};

      var _aliasRegistry = adapterManager.aliasRegistry = {};

      var _s2sConfig = {};

      __WEBPACK_IMPORTED_MODULE_5__config_js__["b"
      /* config */
      ].getConfig('s2sConfig', function (config) {
        _s2sConfig = config.s2sConfig;
      });

      var _analyticsRegistry = {};
      /**
       * @typedef {object} LabelDescriptor
       * @property {boolean} labelAll describes whether or not this object expects all labels to match, or any label to match
       * @property {Array<string>} labels the labels listed on the bidder or adUnit
       * @property {Array<string>} activeLabels the labels specified as being active by requestBids
       */

      function getBids(_ref) {
        var bidderCode = _ref.bidderCode,
            auctionId = _ref.auctionId,
            bidderRequestId = _ref.bidderRequestId,
            adUnits = _ref.adUnits,
            labels = _ref.labels,
            src = _ref.src;
        return adUnits.reduce(function (result, adUnit) {
          var _resolveStatus = Object(__WEBPACK_IMPORTED_MODULE_1__sizeMapping_js__["b"
          /* resolveStatus */
          ])(Object(__WEBPACK_IMPORTED_MODULE_1__sizeMapping_js__["a"
          /* getLabels */
          ])(adUnit, labels), adUnit.mediaTypes, adUnit.sizes),
              active = _resolveStatus.active,
              filteredMediaTypes = _resolveStatus.mediaTypes,
              filterResults = _resolveStatus.filterResults;

          if (!active) {
            utils.logInfo("Size mapping disabled adUnit \"".concat(adUnit.code, "\""));
          } else if (filterResults) {
            utils.logInfo("Size mapping filtered adUnit \"".concat(adUnit.code, "\" banner sizes from "), filterResults.before, 'to ', filterResults.after);
          }

          if (active) {
            result.push(adUnit.bids.filter(function (bid) {
              return bid.bidder === bidderCode;
            }).reduce(function (bids, bid) {
              var nativeParams = adUnit.nativeParams || utils.deepAccess(adUnit, 'mediaTypes.native');

              if (nativeParams) {
                bid = _extends({}, bid, {
                  nativeParams: Object(__WEBPACK_IMPORTED_MODULE_2__native_js__["g"
                  /* processNativeAdUnitParams */
                  ])(nativeParams)
                });
              }

              bid = _extends({}, bid, Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["getDefinedParams"])(adUnit, ['fpd', 'mediaType', 'renderer', 'storedAuctionResponse']));

              var _resolveStatus2 = Object(__WEBPACK_IMPORTED_MODULE_1__sizeMapping_js__["b"
              /* resolveStatus */
              ])(Object(__WEBPACK_IMPORTED_MODULE_1__sizeMapping_js__["a"
              /* getLabels */
              ])(bid, labels), filteredMediaTypes),
                  active = _resolveStatus2.active,
                  mediaTypes = _resolveStatus2.mediaTypes,
                  filterResults = _resolveStatus2.filterResults;

              if (!active) {
                utils.logInfo("Size mapping deactivated adUnit \"".concat(adUnit.code, "\" bidder \"").concat(bid.bidder, "\""));
              } else if (filterResults) {
                utils.logInfo("Size mapping filtered adUnit \"".concat(adUnit.code, "\" bidder \"").concat(bid.bidder, "\" banner sizes from "), filterResults.before, 'to ', filterResults.after);
              }

              if (utils.isValidMediaTypes(mediaTypes)) {
                bid = _extends({}, bid, {
                  mediaTypes: mediaTypes
                });
              } else {
                utils.logError("mediaTypes is not correctly configured for adunit ".concat(adUnit.code));
              }

              if (active) {
                bids.push(_extends({}, bid, {
                  adUnitCode: adUnit.code,
                  transactionId: adUnit.transactionId,
                  sizes: utils.deepAccess(mediaTypes, 'banner.sizes') || utils.deepAccess(mediaTypes, 'video.playerSize') || [],
                  bidId: bid.bid_id || utils.getUniqueIdentifierStr(),
                  bidderRequestId: bidderRequestId,
                  auctionId: auctionId,
                  src: src,
                  bidRequestsCount: __WEBPACK_IMPORTED_MODULE_9__adUnits_js__["a"
                  /* adunitCounter */
                  ].getRequestsCounter(adUnit.code),
                  bidderRequestsCount: __WEBPACK_IMPORTED_MODULE_9__adUnits_js__["a"
                  /* adunitCounter */
                  ].getBidderRequestsCounter(adUnit.code, bid.bidder),
                  bidderWinsCount: __WEBPACK_IMPORTED_MODULE_9__adUnits_js__["a"
                  /* adunitCounter */
                  ].getBidderWinsCounter(adUnit.code, bid.bidder)
                }));
              }

              return bids;
            }, []));
          }

          return result;
        }, []).reduce(__WEBPACK_IMPORTED_MODULE_0__utils_js__["flatten"], []).filter(function (val) {
          return val !== '';
        });
      }

      var hookedGetBids = Object(__WEBPACK_IMPORTED_MODULE_6__hook_js__["b"
      /* hook */
      ])('sync', getBids, 'getBids');

      function getAdUnitCopyForPrebidServer(adUnits) {
        var adaptersServerSide = _s2sConfig.bidders;
        var adUnitsCopy = utils.deepClone(adUnits);
        adUnitsCopy.forEach(function (adUnit) {
          // filter out client side bids
          adUnit.bids = adUnit.bids.filter(function (bid) {
            return __WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default()(adaptersServerSide, bid.bidder) && (!doingS2STesting() || bid.finalSource !== s2sTestingModule.CLIENT);
          }).map(function (bid) {
            bid.bid_id = utils.getUniqueIdentifierStr();
            return bid;
          });
        }); // don't send empty requests

        adUnitsCopy = adUnitsCopy.filter(function (adUnit) {
          return adUnit.bids.length !== 0;
        });
        return adUnitsCopy;
      }

      function getAdUnitCopyForClientAdapters(adUnits) {
        var adUnitsClientCopy = utils.deepClone(adUnits); // filter out s2s bids

        adUnitsClientCopy.forEach(function (adUnit) {
          adUnit.bids = adUnit.bids.filter(function (bid) {
            return !doingS2STesting() || bid.finalSource !== s2sTestingModule.SERVER;
          });
        }); // don't send empty requests

        adUnitsClientCopy = adUnitsClientCopy.filter(function (adUnit) {
          return adUnit.bids.length !== 0;
        });
        return adUnitsClientCopy;
      }

      var gdprDataHandler = {
        consentData: null,
        setConsentData: function setConsentData(consentInfo) {
          gdprDataHandler.consentData = consentInfo;
        },
        getConsentData: function getConsentData() {
          return gdprDataHandler.consentData;
        }
      };
      var uspDataHandler = {
        consentData: null,
        setConsentData: function setConsentData(consentInfo) {
          uspDataHandler.consentData = consentInfo;
        },
        getConsentData: function getConsentData() {
          return uspDataHandler.consentData;
        }
      };
      adapterManager.makeBidRequests = Object(__WEBPACK_IMPORTED_MODULE_6__hook_js__["b"
      /* hook */
      ])('sync', function (adUnits, auctionStart, auctionId, cbTimeout, labels) {
        /**
         * emit and pass adunits for external modification
         * @see {@link https://github.com/prebid/Prebid.js/issues/4149|Issue}
         */
        events.emit(CONSTANTS.EVENTS.BEFORE_REQUEST_BIDS, adUnits);
        var bidRequests = [];
        var bidderCodes = Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["getBidderCodes"])(adUnits);

        if (__WEBPACK_IMPORTED_MODULE_5__config_js__["b"
        /* config */
        ].getConfig('bidderSequence') === __WEBPACK_IMPORTED_MODULE_5__config_js__["a"
        /* RANDOM */
        ]) {
          bidderCodes = Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["shuffle"])(bidderCodes);
        }

        var refererInfo = Object(__WEBPACK_IMPORTED_MODULE_10__refererDetection_js__["b"
        /* getRefererInfo */
        ])();
        var clientBidderCodes = bidderCodes;
        var clientTestAdapters = [];

        if (_s2sConfig.enabled) {
          // if s2sConfig.bidderControl testing is turned on
          if (doingS2STesting()) {
            // get all adapters doing client testing
            var bidderMap = s2sTestingModule.getSourceBidderMap(adUnits);
            clientTestAdapters = bidderMap[s2sTestingModule.CLIENT];
          } // these are called on the s2s adapter


          var adaptersServerSide = _s2sConfig.bidders; // don't call these client side (unless client request is needed for testing)

          clientBidderCodes = bidderCodes.filter(function (elm) {
            return !__WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default()(adaptersServerSide, elm) || __WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default()(clientTestAdapters, elm);
          });

          var adUnitsContainServerRequests = function adUnitsContainServerRequests(adUnits) {
            return Boolean(__WEBPACK_IMPORTED_MODULE_8_core_js_library_fn_array_find_js___default()(adUnits, function (adUnit) {
              return __WEBPACK_IMPORTED_MODULE_8_core_js_library_fn_array_find_js___default()(adUnit.bids, function (bid) {
                return (bid.bidSource || _s2sConfig.bidderControl && _s2sConfig.bidderControl[bid.bidder]) && bid.finalSource === s2sTestingModule.SERVER;
              });
            }));
          };

          if (isTestingServerOnly() && adUnitsContainServerRequests(adUnits)) {
            clientBidderCodes.length = 0;
          }

          var adUnitsS2SCopy = getAdUnitCopyForPrebidServer(adUnits);
          var tid = utils.generateUUID();
          adaptersServerSide.forEach(function (bidderCode) {
            var bidderRequestId = utils.getUniqueIdentifierStr();
            var bidderRequest = {
              bidderCode: bidderCode,
              auctionId: auctionId,
              bidderRequestId: bidderRequestId,
              tid: tid,
              bids: hookedGetBids({
                bidderCode: bidderCode,
                auctionId: auctionId,
                bidderRequestId: bidderRequestId,
                'adUnits': utils.deepClone(adUnitsS2SCopy),
                labels: labels,
                src: CONSTANTS.S2S.SRC
              }),
              auctionStart: auctionStart,
              timeout: _s2sConfig.timeout,
              src: CONSTANTS.S2S.SRC,
              refererInfo: refererInfo
            };

            if (bidderRequest.bids.length !== 0) {
              bidRequests.push(bidderRequest);
            }
          }); // update the s2sAdUnits object and remove all bids that didn't pass sizeConfig/label checks from getBids()
          // this is to keep consistency and only allow bids/adunits that passed the checks to go to pbs

          adUnitsS2SCopy.forEach(function (adUnitCopy) {
            var validBids = adUnitCopy.bids.filter(function (adUnitBid) {
              return __WEBPACK_IMPORTED_MODULE_8_core_js_library_fn_array_find_js___default()(bidRequests, function (request) {
                return __WEBPACK_IMPORTED_MODULE_8_core_js_library_fn_array_find_js___default()(request.bids, function (reqBid) {
                  return reqBid.bidId === adUnitBid.bid_id;
                });
              });
            });
            adUnitCopy.bids = validBids;
          });
          bidRequests.forEach(function (request) {
            request.adUnitsS2SCopy = adUnitsS2SCopy.filter(function (adUnitCopy) {
              return adUnitCopy.bids.length > 0;
            });
          });
        } // client adapters


        var adUnitsClientCopy = getAdUnitCopyForClientAdapters(adUnits);
        clientBidderCodes.forEach(function (bidderCode) {
          var bidderRequestId = utils.getUniqueIdentifierStr();
          var bidderRequest = {
            bidderCode: bidderCode,
            auctionId: auctionId,
            bidderRequestId: bidderRequestId,
            bids: hookedGetBids({
              bidderCode: bidderCode,
              auctionId: auctionId,
              bidderRequestId: bidderRequestId,
              'adUnits': utils.deepClone(adUnitsClientCopy),
              labels: labels,
              src: 'client'
            }),
            auctionStart: auctionStart,
            timeout: cbTimeout,
            refererInfo: refererInfo
          };
          var adapter = _bidderRegistry[bidderCode];

          if (!adapter) {
            utils.logError("Trying to make a request for bidder that does not exist: ".concat(bidderCode));
          }

          if (adapter && bidderRequest.bids && bidderRequest.bids.length !== 0) {
            bidRequests.push(bidderRequest);
          }
        });

        if (gdprDataHandler.getConsentData()) {
          bidRequests.forEach(function (bidRequest) {
            bidRequest['gdprConsent'] = gdprDataHandler.getConsentData();
          });
        }

        if (uspDataHandler.getConsentData()) {
          bidRequests.forEach(function (bidRequest) {
            bidRequest['uspConsent'] = uspDataHandler.getConsentData();
          });
        }

        return bidRequests;
      }, 'makeBidRequests');

      adapterManager.callBids = function (adUnits, bidRequests, addBidResponse, doneCb, requestCallbacks, requestBidsTimeout, onTimelyResponse) {
        if (!bidRequests.length) {
          utils.logWarn('callBids executed with no bidRequests.  Were they filtered by labels or sizing?');
          return;
        }

        var _bidRequests$reduce = bidRequests.reduce(function (partitions, bidRequest) {
          partitions[Number(typeof bidRequest.src !== 'undefined' && bidRequest.src === CONSTANTS.S2S.SRC)].push(bidRequest);
          return partitions;
        }, [[], []]),
            _bidRequests$reduce2 = _slicedToArray(_bidRequests$reduce, 2),
            clientBidRequests = _bidRequests$reduce2[0],
            serverBidRequests = _bidRequests$reduce2[1];

        if (serverBidRequests.length) {
          // s2s should get the same client side timeout as other client side requests.
          var s2sAjax = Object(__WEBPACK_IMPORTED_MODULE_4__ajax_js__["b"
          /* ajaxBuilder */
          ])(requestBidsTimeout, requestCallbacks ? {
            request: requestCallbacks.request.bind(null, 's2s'),
            done: requestCallbacks.done
          } : undefined);
          var adaptersServerSide = _s2sConfig.bidders;
          var s2sAdapter = _bidderRegistry[_s2sConfig.adapter];
          var tid = serverBidRequests[0].tid;
          var adUnitsS2SCopy = serverBidRequests[0].adUnitsS2SCopy;

          if (s2sAdapter) {
            var s2sBidRequest = {
              tid: tid,
              'ad_units': adUnitsS2SCopy
            };

            if (s2sBidRequest.ad_units.length) {
              var doneCbs = serverBidRequests.map(function (bidRequest) {
                bidRequest.start = Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["timestamp"])();
                return doneCb.bind(bidRequest);
              }); // only log adapters that actually have adUnit bids

              var allBidders = s2sBidRequest.ad_units.reduce(function (adapters, adUnit) {
                return adapters.concat((adUnit.bids || []).reduce(function (adapters, bid) {
                  return adapters.concat(bid.bidder);
                }, []));
              }, []);
              utils.logMessage("CALLING S2S HEADER BIDDERS ==== ".concat(adaptersServerSide.filter(function (adapter) {
                return __WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default()(allBidders, adapter);
              }).join(','))); // fire BID_REQUESTED event for each s2s bidRequest

              serverBidRequests.forEach(function (bidRequest) {
                events.emit(CONSTANTS.EVENTS.BID_REQUESTED, bidRequest);
              }); // make bid requests

              s2sAdapter.callBids(s2sBidRequest, serverBidRequests, function (adUnitCode, bid) {
                var bidderRequest = Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["getBidderRequest"])(serverBidRequests, bid.bidderCode, adUnitCode);

                if (bidderRequest) {
                  addBidResponse.call(bidderRequest, adUnitCode, bid);
                }
              }, function () {
                return doneCbs.forEach(function (done) {
                  return done();
                });
              }, s2sAjax);
            }
          } else {
            utils.logError('missing ' + _s2sConfig.adapter);
          }
        } // handle client adapter requests


        clientBidRequests.forEach(function (bidRequest) {
          bidRequest.start = Object(__WEBPACK_IMPORTED_MODULE_0__utils_js__["timestamp"])(); // TODO : Do we check for bid in pool from here and skip calling adapter again ?

          var adapter = _bidderRegistry[bidRequest.bidderCode];
          utils.logMessage("CALLING BIDDER ======= ".concat(bidRequest.bidderCode));
          events.emit(CONSTANTS.EVENTS.BID_REQUESTED, bidRequest);
          var ajax = Object(__WEBPACK_IMPORTED_MODULE_4__ajax_js__["b"
          /* ajaxBuilder */
          ])(requestBidsTimeout, requestCallbacks ? {
            request: requestCallbacks.request.bind(null, bidRequest.bidderCode),
            done: requestCallbacks.done
          } : undefined);

          __WEBPACK_IMPORTED_MODULE_5__config_js__["b"
          /* config */
          ].runWithBidder(bidRequest.bidderCode, __WEBPACK_IMPORTED_MODULE_0__utils_js__["bind"].call(adapter.callBids, adapter, bidRequest, addBidResponse.bind(bidRequest), doneCb.bind(bidRequest), ajax, onTimelyResponse, __WEBPACK_IMPORTED_MODULE_5__config_js__["b"
          /* config */
          ].callbackWithBidder(bidRequest.bidderCode)));
        });
      };

      function doingS2STesting() {
        return _s2sConfig && _s2sConfig.enabled && _s2sConfig.testing && s2sTestingModule;
      }

      function isTestingServerOnly() {
        return Boolean(doingS2STesting() && _s2sConfig.testServerOnly);
      }

      function getSupportedMediaTypes(bidderCode) {
        var result = [];
        if (__WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default()(adapterManager.videoAdapters, bidderCode)) result.push('video');
        if (__WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default()(__WEBPACK_IMPORTED_MODULE_2__native_js__["e"
        /* nativeAdapters */
        ], bidderCode)) result.push('native');
        return result;
      }

      adapterManager.videoAdapters = []; // added by adapterLoader for now

      adapterManager.registerBidAdapter = function (bidAdaptor, bidderCode) {
        var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
            _ref2$supportedMediaT = _ref2.supportedMediaTypes,
            supportedMediaTypes = _ref2$supportedMediaT === void 0 ? [] : _ref2$supportedMediaT;

        if (bidAdaptor && bidderCode) {
          if (typeof bidAdaptor.callBids === 'function') {
            _bidderRegistry[bidderCode] = bidAdaptor;

            if (__WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default()(supportedMediaTypes, 'video')) {
              adapterManager.videoAdapters.push(bidderCode);
            }

            if (__WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default()(supportedMediaTypes, 'native')) {
              __WEBPACK_IMPORTED_MODULE_2__native_js__["e"
              /* nativeAdapters */
              ].push(bidderCode);
            }
          } else {
            utils.logError('Bidder adaptor error for bidder code: ' + bidderCode + 'bidder must implement a callBids() function');
          }
        } else {
          utils.logError('bidAdaptor or bidderCode not specified');
        }
      };

      adapterManager.aliasBidAdapter = function (bidderCode, alias) {
        var existingAlias = _bidderRegistry[alias];

        if (typeof existingAlias === 'undefined') {
          var bidAdaptor = _bidderRegistry[bidderCode];

          if (typeof bidAdaptor === 'undefined') {
            // check if alias is part of s2sConfig and allow them to register if so (as base bidder may be s2s-only)
            var s2sConfig = __WEBPACK_IMPORTED_MODULE_5__config_js__["b"
            /* config */
            ].getConfig('s2sConfig');

            var s2sBidders = s2sConfig && s2sConfig.bidders;

            if (!(s2sBidders && __WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default()(s2sBidders, alias))) {
              utils.logError('bidderCode "' + bidderCode + '" is not an existing bidder.', 'adapterManager.aliasBidAdapter');
            } else {
              _aliasRegistry[alias] = bidderCode;
            }
          } else {
            try {
              var newAdapter;
              var supportedMediaTypes = getSupportedMediaTypes(bidderCode); // Have kept old code to support backward compatibilitiy.
              // Remove this if loop when all adapters are supporting bidderFactory. i.e When Prebid.js is 1.0

              if (bidAdaptor.constructor.prototype != Object.prototype) {
                newAdapter = new bidAdaptor.constructor();
                newAdapter.setBidderCode(alias);
              } else {
                var spec = bidAdaptor.getSpec();
                newAdapter = Object(__WEBPACK_IMPORTED_MODULE_3__adapters_bidderFactory_js__["newBidder"])(_extends({}, spec, {
                  code: alias
                }));
                _aliasRegistry[alias] = bidderCode;
              }

              adapterManager.registerBidAdapter(newAdapter, alias, {
                supportedMediaTypes: supportedMediaTypes
              });
            } catch (e) {
              utils.logError(bidderCode + ' bidder does not currently support aliasing.', 'adapterManager.aliasBidAdapter');
            }
          }
        } else {
          utils.logMessage('alias name "' + alias + '" has been already specified.');
        }
      };

      adapterManager.registerAnalyticsAdapter = function (_ref3) {
        var adapter = _ref3.adapter,
            code = _ref3.code;

        if (adapter && code) {
          if (typeof adapter.enableAnalytics === 'function') {
            adapter.code = code;
            _analyticsRegistry[code] = adapter;
          } else {
            utils.logError("Prebid Error: Analytics adaptor error for analytics \"".concat(code, "\"\n        analytics adapter must implement an enableAnalytics() function"));
          }
        } else {
          utils.logError('Prebid Error: analyticsAdapter or analyticsCode not specified');
        }
      };

      adapterManager.enableAnalytics = function (config) {
        if (!utils.isArray(config)) {
          config = [config];
        }

        utils._each(config, function (adapterConfig) {
          var adapter = _analyticsRegistry[adapterConfig.provider];

          if (adapter) {
            adapter.enableAnalytics(adapterConfig);
          } else {
            utils.logError("Prebid Error: no analytics adapter found in registry for\n        ".concat(adapterConfig.provider, "."));
          }
        });
      };

      adapterManager.getBidAdapter = function (bidder) {
        return _bidderRegistry[bidder];
      }; // the s2sTesting module is injected when it's loaded rather than being imported
      // importing it causes the packager to include it even when it's not explicitly included in the build


      function setS2STestingModule(module) {
        s2sTestingModule = module;
      }

      function tryCallBidderMethod(bidder, method, param) {
        try {
          var adapter = _bidderRegistry[bidder];
          var spec = adapter.getSpec();

          if (spec && spec[method] && typeof spec[method] === 'function') {
            utils.logInfo("Invoking ".concat(bidder, ".").concat(method));

            __WEBPACK_IMPORTED_MODULE_5__config_js__["b"
            /* config */
            ].runWithBidder(bidder, __WEBPACK_IMPORTED_MODULE_0__utils_js__["bind"].call(spec[method], spec, param));
          }
        } catch (e) {
          utils.logWarn("Error calling ".concat(method, " of ").concat(bidder));
        }
      }

      adapterManager.callTimedOutBidders = function (adUnits, timedOutBidders, cbTimeout) {
        timedOutBidders = timedOutBidders.map(function (timedOutBidder) {
          // Adding user configured params & timeout to timeout event data
          timedOutBidder.params = utils.getUserConfiguredParams(adUnits, timedOutBidder.adUnitCode, timedOutBidder.bidder);
          timedOutBidder.timeout = cbTimeout;
          return timedOutBidder;
        });
        timedOutBidders = utils.groupBy(timedOutBidders, 'bidder');
        Object.keys(timedOutBidders).forEach(function (bidder) {
          tryCallBidderMethod(bidder, 'onTimeout', timedOutBidders[bidder]);
        });
      };

      adapterManager.callBidWonBidder = function (bidder, bid, adUnits) {
        // Adding user configured params to bidWon event data
        bid.params = utils.getUserConfiguredParams(adUnits, bid.adUnitCode, bid.bidder);

        __WEBPACK_IMPORTED_MODULE_9__adUnits_js__["a"
        /* adunitCounter */
        ].incrementBidderWinsCounter(bid.adUnitCode, bid.bidder);

        tryCallBidderMethod(bidder, 'onBidWon', bid);
      };

      adapterManager.callSetTargetingBidder = function (bidder, bid) {
        tryCallBidderMethod(bidder, 'onSetTargeting', bid);
      };
      /* harmony default export */


      __webpack_exports__["default"] = adapterManager;
      /***/
    },

    /***/
    70:
    /***/
    function _(module, exports, __webpack_require__) {
      // call something on iterator step with safe closing on error
      var anObject = __webpack_require__(29);

      module.exports = function (iterator, fn, value, entries) {
        try {
          return entries ? fn(anObject(value)[0], value[1]) : fn(value); // 7.4.6 IteratorClose(iterator, completion)
        } catch (e) {
          var ret = iterator['return'];
          if (ret !== undefined) anObject(ret.call(iterator));
          throw e;
        }
      };
      /***/

    },

    /***/
    71:
    /***/
    function _(module, exports, __webpack_require__) {
      // check on default Array iterator
      var Iterators = __webpack_require__(31);

      var ITERATOR = __webpack_require__(14)('iterator');

      var ArrayProto = Array.prototype;

      module.exports = function (it) {
        return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
      };
      /***/

    },

    /***/
    72:
    /***/
    function _(module, exports, __webpack_require__) {
      var classof = __webpack_require__(73);

      var ITERATOR = __webpack_require__(14)('iterator');

      var Iterators = __webpack_require__(31);

      module.exports = __webpack_require__(16).getIteratorMethod = function (it) {
        if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
      };
      /***/

    },

    /***/
    73:
    /***/
    function _(module, exports, __webpack_require__) {
      // getting tag from 19.1.3.6 Object.prototype.toString()
      var cof = __webpack_require__(37);

      var TAG = __webpack_require__(14)('toStringTag'); // ES3 wrong here


      var ARG = cof(function () {
        return arguments;
      }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

      var tryGet = function tryGet(it, key) {
        try {
          return it[key];
        } catch (e) {
          /* empty */
        }
      };

      module.exports = function (it) {
        var O, T, B;
        return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
        : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T // builtinTag case
        : ARG ? cof(O) // ES3 arguments fallback
        : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
      };
      /***/

    },

    /***/
    74:
    /***/
    function _(module, exports, __webpack_require__) {
      var META = __webpack_require__(48)('meta');

      var isObject = __webpack_require__(17);

      var has = __webpack_require__(30);

      var setDesc = __webpack_require__(20).f;

      var id = 0;

      var isExtensible = Object.isExtensible || function () {
        return true;
      };

      var FREEZE = !__webpack_require__(36)(function () {
        return isExtensible(Object.preventExtensions({}));
      });

      var setMeta = function setMeta(it) {
        setDesc(it, META, {
          value: {
            i: 'O' + ++id,
            // object ID
            w: {} // weak collections IDs

          }
        });
      };

      var fastKey = function fastKey(it, create) {
        // return primitive with prefix
        if (!isObject(it)) return _typeof4(it) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

        if (!has(it, META)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return 'F'; // not necessary to add metadata

          if (!create) return 'E'; // add missing metadata

          setMeta(it); // return object ID
        }

        return it[META].i;
      };

      var getWeak = function getWeak(it, create) {
        if (!has(it, META)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return true; // not necessary to add metadata

          if (!create) return false; // add missing metadata

          setMeta(it); // return hash weak collections IDs
        }

        return it[META].w;
      }; // add metadata on freeze-family methods calling


      var onFreeze = function onFreeze(it) {
        if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
        return it;
      };

      var meta = module.exports = {
        KEY: META,
        NEED: false,
        fastKey: fastKey,
        getWeak: getWeak,
        onFreeze: onFreeze
      };
      /***/
    },

    /***/
    75:
    /***/
    function _(module, exports, __webpack_require__) {
      var isObject = __webpack_require__(17);

      module.exports = function (it, TYPE) {
        if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
        return it;
      };
      /***/

    },

    /***/
    76:
    /***/
    function _(module, exports, __webpack_require__) {
      __webpack_require__(64);

      __webpack_require__(112);

      module.exports = __webpack_require__(16).Array.from;
      /***/
    },

    /***/
    77:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */
      __webpack_exports__["a"] = Adapter;

      function Adapter(code) {
        var bidderCode = code;

        function setBidderCode(code) {
          bidderCode = code;
        }

        function getBidderCode() {
          return bidderCode;
        }

        function callBids() {}

        return {
          callBids: callBids,
          setBidderCode: setBidderCode,
          getBidderCode: getBidderCode
        };
      }
      /***/

    },

    /***/
    78:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* unused harmony export setSizeConfig */

      /* harmony export (immutable) */
      __webpack_exports__["a"] = getLabels;
      /* harmony export (immutable) */

      __webpack_exports__["c"] = sizeSupported;
      /* harmony export (immutable) */

      __webpack_exports__["b"] = resolveStatus;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_includes_js__ = __webpack_require__(11);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_includes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_includes_js__);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var sizeConfig = [];
      /**
       * @typedef {object} SizeConfig
       *
       * @property {string} [mediaQuery] A CSS media query string that will to be interpreted by window.matchMedia.  If the
       *  media query matches then the this config will be active and sizesSupported will filter bid and adUnit sizes.  If
       *  this property is not present then this SizeConfig will only be active if triggered manually by a call to
       *  pbjs.setConfig({labels:['label']) specifying one of the labels present on this SizeConfig.
       * @property {Array<Array>} sizesSupported The sizes to be accepted if this SizeConfig is enabled.
       * @property {Array<string>} labels The active labels to match this SizeConfig to an adUnits and/or bidders.
       */

      /**
       *
       * @param {Array<SizeConfig>} config
       */

      function setSizeConfig(config) {
        sizeConfig = config;
      }

      __WEBPACK_IMPORTED_MODULE_0__config_js__["b"
      /* config */
      ].getConfig('sizeConfig', function (config) {
        return setSizeConfig(config.sizeConfig);
      });
      /**
       * Returns object describing the status of labels on the adUnit or bidder along with labels passed into requestBids
       * @param bidOrAdUnit the bidder or adUnit to get label info on
       * @param activeLabels the labels passed to requestBids
       * @returns {LabelDescriptor}
       */


      function getLabels(bidOrAdUnit, activeLabels) {
        if (bidOrAdUnit.labelAll) {
          return {
            labelAll: true,
            labels: bidOrAdUnit.labelAll,
            activeLabels: activeLabels
          };
        }

        return {
          labelAll: false,
          labels: bidOrAdUnit.labelAny,
          activeLabels: activeLabels
        };
      }
      /**
       * Determines whether a single size is valid given configured sizes
       * @param {Array} size [width, height]
       * @param {Array<SizeConfig>} configs
       * @returns {boolean}
       */


      function sizeSupported(size) {
        var configs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : sizeConfig;
        var maps = evaluateSizeConfig(configs);

        if (!maps.shouldFilter) {
          return true;
        }

        return !!maps.sizesSupported[size];
      }
      /**
       * Resolves the unique set of the union of all sizes and labels that are active from a SizeConfig.mediaQuery match
       * @param {Array<string>} labels Labels specified on adUnit or bidder
       * @param {boolean} labelAll if true, all labels must match to be enabled
       * @param {Array<string>} activeLabels Labels passed in through requestBids
       * @param {object} mediaTypes A mediaTypes object describing the various media types (banner, video, native)
       * @param {Array<Array<number>>} sizes Sizes specified on adUnit (deprecated)
       * @param {Array<SizeConfig>} configs
       * @returns {{labels: Array<string>, sizes: Array<Array<number>>}}
       */


      function resolveStatus() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$labels = _ref.labels,
            labels = _ref$labels === void 0 ? [] : _ref$labels,
            _ref$labelAll = _ref.labelAll,
            labelAll = _ref$labelAll === void 0 ? false : _ref$labelAll,
            _ref$activeLabels = _ref.activeLabels,
            activeLabels = _ref$activeLabels === void 0 ? [] : _ref$activeLabels;

        var mediaTypes = arguments.length > 1 ? arguments[1] : undefined;
        var sizes = arguments.length > 2 ? arguments[2] : undefined;
        var configs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : sizeConfig;
        var maps = evaluateSizeConfig(configs);

        if (!Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["isPlainObject"])(mediaTypes)) {
          // add support for deprecated adUnit.sizes by creating correct banner mediaTypes if they don't already exist
          if (sizes) {
            mediaTypes = {
              banner: {
                sizes: sizes
              }
            };
          } else {
            mediaTypes = {};
          }
        } else {
          mediaTypes = Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["deepClone"])(mediaTypes);
        }

        var oldSizes = Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["deepAccess"])(mediaTypes, 'banner.sizes');

        if (maps.shouldFilter && oldSizes) {
          mediaTypes.banner.sizes = oldSizes.filter(function (size) {
            return maps.sizesSupported[size];
          });
        }

        var allMediaTypes = Object.keys(mediaTypes);
        var results = {
          active: allMediaTypes.every(function (type) {
            return type !== 'banner';
          }) || allMediaTypes.some(function (type) {
            return type === 'banner';
          }) && Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["deepAccess"])(mediaTypes, 'banner.sizes.length') > 0 && (labels.length === 0 || !labelAll && (labels.some(function (label) {
            return maps.labels[label];
          }) || labels.some(function (label) {
            return __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_includes_js___default()(activeLabels, label);
          })) || labelAll && labels.reduce(function (result, label) {
            return !result ? result : maps.labels[label] || __WEBPACK_IMPORTED_MODULE_2_core_js_library_fn_array_includes_js___default()(activeLabels, label);
          }, true)),
          mediaTypes: mediaTypes
        };

        if (oldSizes && oldSizes.length !== mediaTypes.banner.sizes.length) {
          results.filterResults = {
            before: oldSizes,
            after: mediaTypes.banner.sizes
          };
        }

        return results;
      }

      function evaluateSizeConfig(configs) {
        return configs.reduce(function (results, config) {
          if (_typeof(config) === 'object' && typeof config.mediaQuery === 'string') {
            var ruleMatch = false; // TODO: (Prebid - 4.0) Remove empty mediaQuery string check. Disallow empty mediaQuery in sizeConfig.
            // Refer: https://github.com/prebid/Prebid.js/pull/4691, https://github.com/prebid/Prebid.js/issues/4810 for more details.

            if (config.mediaQuery === '') {
              ruleMatch = true;
            } else {
              try {
                ruleMatch = Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["getWindowTop"])().matchMedia(config.mediaQuery).matches;
              } catch (e) {
                Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["logWarn"])('Unfriendly iFrame blocks sizeConfig from being correctly evaluated');
                ruleMatch = matchMedia(config.mediaQuery).matches;
              }
            }

            if (ruleMatch) {
              if (Array.isArray(config.sizesSupported)) {
                results.shouldFilter = true;
              }

              ['labels', 'sizesSupported'].forEach(function (type) {
                return (config[type] || []).forEach(function (thing) {
                  return results[type][thing] = true;
                });
              });
            }
          } else {
            Object(__WEBPACK_IMPORTED_MODULE_1__utils_js__["logWarn"])('sizeConfig rule missing required property "mediaQuery"');
          }

          return results;
        }, {
          labels: {},
          sizesSupported: {},
          shouldFilter: false
        });
      }
      /***/

    },

    /***/
    79:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */
      __webpack_exports__["b"] = store;
      /* harmony export (immutable) */

      __webpack_exports__["a"] = getCacheUrl;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__ajax_js__ = __webpack_require__(4);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__src_config_js__ = __webpack_require__(3);
      /**
       * This module interacts with the server used to cache video ad content to be restored later.
       * At a high level, the expected workflow goes like this:
       *
       *   - Request video ads from Bidders
       *   - Generate IDs for each valid bid, and cache the key/value pair on the server.
       *   - Return these IDs so that publishers can use them to fetch the bids later.
       *
       * This trickery helps integrate with ad servers, which set character limits on request params.
       */

      /**
       * @typedef {object} CacheableUrlBid
       * @property {string} vastUrl A URL which loads some valid VAST XML.
       */

      /**
       * @typedef {object} CacheablePayloadBid
       * @property {string} vastXml Some VAST XML which loads an ad in a video player.
       */

      /**
       * A CacheableBid describes the types which the videoCache can store.
       *
       * @typedef {CacheableUrlBid|CacheablePayloadBid} CacheableBid
       */

      /**
       * Function which wraps a URI that serves VAST XML, so that it can be loaded.
       *
       * @param {string} uri The URI where the VAST content can be found.
       * @param {string} impUrl An impression tracker URL for the delivery of the video ad
       * @return A VAST URL which loads XML from the given URI.
       */


      function wrapURI(uri, impUrl) {
        // Technically, this is vulnerable to cross-script injection by sketchy vastUrl bids.
        // We could make sure it's a valid URI... but since we're loading VAST XML from the
        // URL they provide anyway, that's probably not a big deal.
        var vastImp = impUrl ? "<![CDATA[".concat(impUrl, "]]>") : "";
        return "<VAST version=\"3.0\">\n    <Ad>\n      <Wrapper>\n        <AdSystem>prebid.org wrapper</AdSystem>\n        <VASTAdTagURI><![CDATA[".concat(uri, "]]></VASTAdTagURI>\n        <Impression>").concat(vastImp, "</Impression>\n        <Creatives></Creatives>\n      </Wrapper>\n    </Ad>\n  </VAST>");
      }
      /**
       * Wraps a bid in the format expected by the prebid-server endpoints, or returns null if
       * the bid can't be converted cleanly.
       *
       * @param {CacheableBid} bid
       */


      function toStorageRequest(bid) {
        var vastValue = bid.vastXml ? bid.vastXml : wrapURI(bid.vastUrl, bid.vastImpUrl);
        var payload = {
          type: 'xml',
          value: vastValue,
          ttlseconds: Number(bid.ttl)
        };

        if (__WEBPACK_IMPORTED_MODULE_1__src_config_js__["b"
        /* config */
        ].getConfig('cache.vasttrack')) {
          payload.bidder = bid.bidder;
          payload.bidid = bid.requestId;
        }

        if (typeof bid.customCacheKey === 'string' && bid.customCacheKey !== '') {
          payload.key = bid.customCacheKey;
        }

        return payload;
      }
      /**
       * A function which should be called with the results of the storage operation.
       *
       * @callback videoCacheStoreCallback
       *
       * @param {Error} [error] The error, if one occurred.
       * @param {?string[]} uuids An array of unique IDs. The array will have one element for each bid we were asked
       *   to store. It may include null elements if some of the bids were malformed, or an error occurred.
       *   Each non-null element in this array is a valid input into the retrieve function, which will fetch
       *   some VAST XML which can be used to render this bid's ad.
       */

      /**
       * A function which bridges the APIs between the videoCacheStoreCallback and our ajax function's API.
       *
       * @param {videoCacheStoreCallback} done A callback to the "store" function.
       * @return {Function} A callback which interprets the cache server's responses, and makes up the right
       *   arguments for our callback.
       */


      function shimStorageCallback(done) {
        return {
          success: function success(responseBody) {
            var ids;

            try {
              ids = JSON.parse(responseBody).responses;
            } catch (e) {
              done(e, []);
              return;
            }

            if (ids) {
              done(null, ids);
            } else {
              done(new Error("The cache server didn't respond with a responses property."), []);
            }
          },
          error: function error(statusText, responseBody) {
            done(new Error("Error storing video ad in the cache: ".concat(statusText, ": ").concat(JSON.stringify(responseBody))), []);
          }
        };
      }
      /**
       * If the given bid is for a Video ad, generate a unique ID and cache it somewhere server-side.
       *
       * @param {CacheableBid[]} bids A list of bid objects which should be cached.
       * @param {videoCacheStoreCallback} [done] An optional callback which should be executed after
       * the data has been stored in the cache.
       */


      function store(bids, done) {
        var requestData = {
          puts: bids.map(toStorageRequest)
        };
        Object(__WEBPACK_IMPORTED_MODULE_0__ajax_js__["a"
        /* ajax */
        ])(__WEBPACK_IMPORTED_MODULE_1__src_config_js__["b"
        /* config */
        ].getConfig('cache.url'), shimStorageCallback(done), JSON.stringify(requestData), {
          contentType: 'text/plain',
          withCredentials: true
        });
      }

      function getCacheUrl(id) {
        return "".concat(__WEBPACK_IMPORTED_MODULE_1__src_config_js__["b"
        /* config */
        ].getConfig('cache.url'), "?uuid=").concat(id);
      }
      /***/

    },

    /***/
    8:
    /***/
    function _(module, exports, __webpack_require__) {
      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }
      /**
       * events.js
       */


      var utils = __webpack_require__(0);

      var CONSTANTS = __webpack_require__(5);

      var slice = Array.prototype.slice;
      var push = Array.prototype.push; // define entire events
      // var allEvents = ['bidRequested','bidResponse','bidWon','bidTimeout'];

      var allEvents = utils._map(CONSTANTS.EVENTS, function (v) {
        return v;
      });

      var idPaths = CONSTANTS.EVENT_ID_PATHS; // keep a record of all events fired

      var eventsFired = [];

      module.exports = function () {
        var _handlers = {};
        var _public = {};
        /**
         *
         * @param {String} eventString  The name of the event.
         * @param {Array} args  The payload emitted with the event.
         * @private
         */

        function _dispatch(eventString, args) {
          utils.logMessage('Emitting event for: ' + eventString);
          var eventPayload = args[0] || {};
          var idPath = idPaths[eventString];
          var key = eventPayload[idPath];
          var event = _handlers[eventString] || {
            que: []
          };

          var eventKeys = utils._map(event, function (v, k) {
            return k;
          });

          var callbacks = []; // record the event:

          eventsFired.push({
            eventType: eventString,
            args: eventPayload,
            id: key
          });
          /** Push each specific callback to the `callbacks` array.
           * If the `event` map has a key that matches the value of the
           * event payload id path, e.g. `eventPayload[idPath]`, then apply
           * each function in the `que` array as an argument to push to the
           * `callbacks` array
           * */

          if (key && utils.contains(eventKeys, key)) {
            push.apply(callbacks, event[key].que);
          }
          /** Push each general callback to the `callbacks` array. */


          push.apply(callbacks, event.que);
          /** call each of the callbacks */

          utils._each(callbacks, function (fn) {
            if (!fn) return;

            try {
              fn.apply(null, args);
            } catch (e) {
              utils.logError('Error executing handler:', 'events.js', e);
            }
          });
        }

        function _checkAvailableEvent(event) {
          return utils.contains(allEvents, event);
        }

        _public.on = function (eventString, handler, id) {
          // check whether available event or not
          if (_checkAvailableEvent(eventString)) {
            var event = _handlers[eventString] || {
              que: []
            };

            if (id) {
              event[id] = event[id] || {
                que: []
              };
              event[id].que.push(handler);
            } else {
              event.que.push(handler);
            }

            _handlers[eventString] = event;
          } else {
            utils.logError('Wrong event name : ' + eventString + ' Valid event names :' + allEvents);
          }
        };

        _public.emit = function (event) {
          var args = slice.call(arguments, 1);

          _dispatch(event, args);
        };

        _public.off = function (eventString, handler, id) {
          var event = _handlers[eventString];

          if (utils.isEmpty(event) || utils.isEmpty(event.que) && utils.isEmpty(event[id])) {
            return;
          }

          if (id && (utils.isEmpty(event[id]) || utils.isEmpty(event[id].que))) {
            return;
          }

          if (id) {
            utils._each(event[id].que, function (_handler) {
              var que = event[id].que;

              if (_handler === handler) {
                que.splice(utils.indexOf.call(que, _handler), 1);
              }
            });
          } else {
            utils._each(event.que, function (_handler) {
              var que = event.que;

              if (_handler === handler) {
                que.splice(utils.indexOf.call(que, _handler), 1);
              }
            });
          }

          _handlers[eventString] = event;
        };

        _public.get = function () {
          return _handlers;
        };
        /**
         * This method can return a copy of all the events fired
         * @return {Array} array of events fired
         */


        _public.getEvents = function () {
          var arrayCopy = [];

          utils._each(eventsFired, function (value) {
            var newProp = _extends({}, value);

            arrayCopy.push(newProp);
          });

          return arrayCopy;
        };

        return _public;
      }();
      /***/

    },

    /***/
    82:
    /***/
    function _(module, exports, __webpack_require__) {
      // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
      var $export = __webpack_require__(15);

      var $find = __webpack_require__(45)(5);

      var KEY = 'find';
      var forced = true; // Shouldn't skip holes

      if (KEY in []) Array(1)[KEY](function () {
        forced = false;
      });
      $export($export.P + $export.F * forced, 'Array', {
        find: function find(callbackfn
        /* , that = undefined */
        ) {
          return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });

      __webpack_require__(40)(KEY);
      /***/

    },

    /***/
    83:
    /***/
    function _(module, exports, __webpack_require__) {
      module.exports = !__webpack_require__(22) && !__webpack_require__(36)(function () {
        return Object.defineProperty(__webpack_require__(58)('div'), 'a', {
          get: function get() {
            return 7;
          }
        }).a != 7;
      });
      /***/
    },

    /***/
    84:
    /***/
    function _(module, exports, __webpack_require__) {
      // 7.1.1 ToPrimitive(input [, PreferredType])
      var isObject = __webpack_require__(17); // instead of the ES6 spec version, we didn't implement @@toPrimitive case
      // and the second argument - flag - preferred type is a string


      module.exports = function (it, S) {
        if (!isObject(it)) return it;
        var fn, val;
        if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
        if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
        if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
        throw TypeError("Can't convert object to primitive value");
      };
      /***/

    },

    /***/
    85:
    /***/
    function _(module, exports, __webpack_require__) {
      // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
      var speciesConstructor = __webpack_require__(86);

      module.exports = function (original, length) {
        return new (speciesConstructor(original))(length);
      };
      /***/

    },

    /***/
    86:
    /***/
    function _(module, exports, __webpack_require__) {
      var isObject = __webpack_require__(17);

      var isArray = __webpack_require__(87);

      var SPECIES = __webpack_require__(14)('species');

      module.exports = function (original) {
        var C;

        if (isArray(original)) {
          C = original.constructor; // cross-realm fallback

          if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;

          if (isObject(C)) {
            C = C[SPECIES];
            if (C === null) C = undefined;
          }
        }

        return C === undefined ? Array : C;
      };
      /***/

    },

    /***/
    87:
    /***/
    function _(module, exports, __webpack_require__) {
      // 7.2.2 IsArray(argument)
      var cof = __webpack_require__(37);

      module.exports = Array.isArray || function isArray(arg) {
        return cof(arg) == 'Array';
      };
      /***/

    },

    /***/
    88:
    /***/
    function _(module, exports, __webpack_require__) {
      // https://github.com/tc39/Array.prototype.includes
      var $export = __webpack_require__(15);

      var $includes = __webpack_require__(62)(true);

      $export($export.P, 'Array', {
        includes: function includes(el
        /* , fromIndex = 0 */
        ) {
          return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
        }
      });

      __webpack_require__(40)('includes');
      /***/

    },

    /***/
    89:
    /***/
    function _(module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(47);

      var max = Math.max;
      var min = Math.min;

      module.exports = function (index, length) {
        index = toInteger(index);
        return index < 0 ? max(index + length, 0) : min(index, length);
      };
      /***/

    },

    /***/
    9:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */
      __webpack_exports__["d"] = parseQS;
      /* harmony export (immutable) */

      __webpack_exports__["b"] = formatQS;
      /* harmony export (immutable) */

      __webpack_exports__["c"] = parse;
      /* harmony export (immutable) */

      __webpack_exports__["a"] = format;

      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
      }

      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }

      function _iterableToArrayLimit(arr, i) {
        if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
          return;
        }

        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
      }

      function parseQS(query) {
        return !query ? {} : query.replace(/^\?/, '').split('&').reduce(function (acc, criteria) {
          var _criteria$split = criteria.split('='),
              _criteria$split2 = _slicedToArray(_criteria$split, 2),
              k = _criteria$split2[0],
              v = _criteria$split2[1];

          if (/\[\]$/.test(k)) {
            k = k.replace('[]', '');
            acc[k] = acc[k] || [];
            acc[k].push(v);
          } else {
            acc[k] = v || '';
          }

          return acc;
        }, {});
      }

      function formatQS(query) {
        return Object.keys(query).map(function (k) {
          return Array.isArray(query[k]) ? query[k].map(function (v) {
            return "".concat(k, "[]=").concat(v);
          }).join('&') : "".concat(k, "=").concat(query[k]);
        }).join('&');
      }

      function parse(url, options) {
        var parsed = document.createElement('a');

        if (options && 'noDecodeWholeURL' in options && options.noDecodeWholeURL) {
          parsed.href = url;
        } else {
          parsed.href = decodeURIComponent(url);
        } // in window.location 'search' is string, not object


        var qsAsString = options && 'decodeSearchAsString' in options && options.decodeSearchAsString;
        return {
          href: parsed.href,
          protocol: (parsed.protocol || '').replace(/:$/, ''),
          hostname: parsed.hostname,
          port: +parsed.port,
          pathname: parsed.pathname.replace(/^(?!\/)/, '/'),
          search: qsAsString ? parsed.search : parseQS(parsed.search || ''),
          hash: (parsed.hash || '').replace(/^#/, ''),
          host: parsed.host || window.location.host
        };
      }

      function format(obj) {
        return (obj.protocol || 'http') + '://' + (obj.host || obj.hostname + (obj.port ? ":".concat(obj.port) : '')) + (obj.pathname || '') + (obj.search ? "?".concat(formatQS(obj.search || '')) : '') + (obj.hash ? "#".concat(obj.hash) : '');
      }
      /***/

    },

    /***/
    90:
    /***/
    function _(module, exports) {
      /***/
    },

    /***/
    91:
    /***/
    function _(module, exports, __webpack_require__) {
      var toInteger = __webpack_require__(47);

      var defined = __webpack_require__(38); // true  -> String#at
      // false -> String#codePointAt


      module.exports = function (TO_STRING) {
        return function (that, pos) {
          var s = String(defined(that));
          var i = toInteger(pos);
          var l = s.length;
          var a, b;
          if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
          a = s.charCodeAt(i);
          return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
        };
      };
      /***/

    },

    /***/
    92:
    /***/
    function _(module, exports, __webpack_require__) {
      module.exports = __webpack_require__(21);
      /***/
    },

    /***/
    93:
    /***/
    function _(module, exports, __webpack_require__) {
      var create = __webpack_require__(65);

      var descriptor = __webpack_require__(44);

      var setToStringTag = __webpack_require__(52);

      var IteratorPrototype = {}; // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

      __webpack_require__(21)(IteratorPrototype, __webpack_require__(14)('iterator'), function () {
        return this;
      });

      module.exports = function (Constructor, NAME, next) {
        Constructor.prototype = create(IteratorPrototype, {
          next: descriptor(1, next)
        });
        setToStringTag(Constructor, NAME + ' Iterator');
      };
      /***/

    },

    /***/
    94:
    /***/
    function _(module, exports, __webpack_require__) {
      var dP = __webpack_require__(20);

      var anObject = __webpack_require__(29);

      var getKeys = __webpack_require__(95);

      module.exports = __webpack_require__(22) ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var keys = getKeys(Properties);
        var length = keys.length;
        var i = 0;
        var P;

        while (length > i) {
          dP.f(O, P = keys[i++], Properties[P]);
        }

        return O;
      };
      /***/
    },

    /***/
    95:
    /***/
    function _(module, exports, __webpack_require__) {
      // 19.1.2.14 / 15.2.3.14 Object.keys(O)
      var $keys = __webpack_require__(96);

      var enumBugKeys = __webpack_require__(66);

      module.exports = Object.keys || function keys(O) {
        return $keys(O, enumBugKeys);
      };
      /***/

    },

    /***/
    96:
    /***/
    function _(module, exports, __webpack_require__) {
      var has = __webpack_require__(30);

      var toIObject = __webpack_require__(49);

      var arrayIndexOf = __webpack_require__(62)(false);

      var IE_PROTO = __webpack_require__(51)('IE_PROTO');

      module.exports = function (object, names) {
        var O = toIObject(object);
        var i = 0;
        var result = [];
        var key;

        for (key in O) {
          if (key != IE_PROTO) has(O, key) && result.push(key);
        } // Don't enum bug & hidden keys


        while (names.length > i) {
          if (has(O, key = names[i++])) {
            ~arrayIndexOf(result, key) || result.push(key);
          }
        }

        return result;
      };
      /***/

    },

    /***/
    97:
    /***/
    function _(module, exports, __webpack_require__) {
      var document = __webpack_require__(19).document;

      module.exports = document && document.documentElement;
      /***/
    },

    /***/
    98:
    /***/
    function _(module, exports, __webpack_require__) {
      // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
      var has = __webpack_require__(30);

      var toObject = __webpack_require__(46);

      var IE_PROTO = __webpack_require__(51)('IE_PROTO');

      var ObjectProto = Object.prototype;

      module.exports = Object.getPrototypeOf || function (O) {
        O = toObject(O);
        if (has(O, IE_PROTO)) return O[IE_PROTO];

        if (typeof O.constructor == 'function' && O instanceof O.constructor) {
          return O.constructor.prototype;
        }

        return O instanceof Object ? ObjectProto : null;
      };
      /***/

    },

    /***/
    99:
    /***/
    function _(module, exports, __webpack_require__) {
      __webpack_require__(100);

      var global = __webpack_require__(19);

      var hide = __webpack_require__(21);

      var Iterators = __webpack_require__(31);

      var TO_STRING_TAG = __webpack_require__(14)('toStringTag');

      var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' + 'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' + 'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' + 'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' + 'TextTrackList,TouchList').split(',');

      for (var i = 0; i < DOMIterables.length; i++) {
        var NAME = DOMIterables[i];
        var Collection = global[NAME];
        var proto = Collection && Collection.prototype;
        if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
        Iterators[NAME] = Iterators.Array;
      }
      /***/

    }
    /******/

  });

  pbjsChunk([250], {
    /***/
    171:
    /***/
    function _(module, exports, __webpack_require__) {
      module.exports = __webpack_require__(172);
      /***/
    },

    /***/
    172:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (immutable) */

      __webpack_exports__["callPrebidCacheHook"] = callPrebidCacheHook;
      /* harmony export (immutable) */

      __webpack_exports__["checkAdUnitSetupHook"] = checkAdUnitSetupHook;
      /* harmony export (immutable) */

      __webpack_exports__["checkVideoBidSetupHook"] = checkVideoBidSetupHook;
      /* harmony export (immutable) */

      __webpack_exports__["adpodSetConfig"] = adpodSetConfig;
      /* harmony export (immutable) */

      __webpack_exports__["callPrebidCacheAfterAuction"] = callPrebidCacheAfterAuction;
      /* harmony export (immutable) */

      __webpack_exports__["sortByPricePerSecond"] = sortByPricePerSecond;
      /* harmony export (immutable) */

      __webpack_exports__["getTargeting"] = getTargeting;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__src_utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__src_auction_js__ = __webpack_require__(42);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__src_prebid_js__ = __webpack_require__(55);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__src_video_js__ = __webpack_require__(34);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__src_hook_js__ = __webpack_require__(13);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__src_videoCache_js__ = __webpack_require__(79);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6__src_config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7__src_mediaTypes_js__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_8_core_js_library_fn_set_js__ = __webpack_require__(63);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_8_core_js_library_fn_set_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_core_js_library_fn_set_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_find_js__ = __webpack_require__(12);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_find_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_find_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_10__src_auctionManager_js__ = __webpack_require__(25);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_11__src_constants_json__ = __webpack_require__(5);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_11__src_constants_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11__src_constants_json__);

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
      }

      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }

      function _iterableToArrayLimit(arr, i) {
        if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
          return;
        }

        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
      }

      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance");
      }

      function _iterableToArray(iter) {
        if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        }
      }
      /**
       * This module houses the functionality to evaluate and process adpod adunits/bids.  Specifically there are several hooked functions,
       * that either supplement the base function (ie to check something additional or unique to adpod objects) or to replace the base function
       * entirely when appropriate.
       *
       * Brief outline of each hook:
       * - `callPrebidCacheHook` - for any adpod bids, this function will temporarily hold them in a queue in order to send the bids to Prebid Cache in bulk
       * - `checkAdUnitSetupHook` - evaluates the adUnits to ensure that required fields for adpod adUnits are present.  Invalid adpod adUntis are removed from the array.
       * - `checkVideoBidSetupHook` - evaluates the adpod bid returned from an adaptor/bidder to ensure required fields are populated; also initializes duration bucket field.
       *
       * To initialize the module, there is an `initAdpodHooks()` function that should be imported and executed by a corresponding `...AdServerVideo`
       * module that designed to support adpod video type ads.  This import process allows this module to effectively act as a sub-module.
       */


      var from = __webpack_require__(76);

      var TARGETING_KEY_PB_CAT_DUR = 'hb_pb_cat_dur';
      var TARGETING_KEY_CACHE_ID = 'hb_cache_id';
      var queueTimeDelay = 50;
      var queueSizeLimit = 5;
      var bidCacheRegistry = createBidCacheRegistry();
      /**
       * Create a registry object that stores/manages bids while be held in queue for Prebid Cache.
       * @returns registry object with defined accessor functions
       */

      function createBidCacheRegistry() {
        var registry = {};

        function setupRegistrySlot(auctionId) {
          registry[auctionId] = {};
          registry[auctionId].bidStorage = new __WEBPACK_IMPORTED_MODULE_8_core_js_library_fn_set_js___default.a();
          registry[auctionId].queueDispatcher = createDispatcher(queueTimeDelay);
          registry[auctionId].initialCacheKey = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["generateUUID"]();
        }

        return {
          addBid: function addBid(bid) {
            // create parent level object based on auction ID (in case there are concurrent auctions running) to store objects for that auction
            if (!registry[bid.auctionId]) {
              setupRegistrySlot(bid.auctionId);
            }

            registry[bid.auctionId].bidStorage.add(bid);
          },
          removeBid: function removeBid(bid) {
            registry[bid.auctionId].bidStorage["delete"](bid);
          },
          getBids: function getBids(bid) {
            return registry[bid.auctionId] && registry[bid.auctionId].bidStorage.values();
          },
          getQueueDispatcher: function getQueueDispatcher(bid) {
            return registry[bid.auctionId] && registry[bid.auctionId].queueDispatcher;
          },
          setupInitialCacheKey: function setupInitialCacheKey(bid) {
            if (!registry[bid.auctionId]) {
              registry[bid.auctionId] = {};
              registry[bid.auctionId].initialCacheKey = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["generateUUID"]();
            }
          },
          getInitialCacheKey: function getInitialCacheKey(bid) {
            return registry[bid.auctionId] && registry[bid.auctionId].initialCacheKey;
          }
        };
      }
      /**
       * Creates a function that when called updates the bid queue and extends the running timer (when called subsequently).
       * Once the time threshold for the queue (defined by queueSizeLimit) is reached, the queue will be flushed by calling the `firePrebidCacheCall` function.
       * If there is a long enough time between calls (based on timeoutDration), the queue will automatically flush itself.
       * @param {Number} timeoutDuration number of milliseconds to pass before timer expires and current bid queue is flushed
       * @returns {Function}
       */


      function createDispatcher(timeoutDuration) {
        var timeout;
        var counter = 1;
        return function (auctionInstance, bidListArr, afterBidAdded, killQueue) {
          var context = this;

          var callbackFn = function callbackFn() {
            firePrebidCacheCall.call(context, auctionInstance, bidListArr, afterBidAdded);
          };

          clearTimeout(timeout);

          if (!killQueue) {
            // want to fire off the queue if either: size limit is reached or time has passed since last call to dispatcher
            if (counter === queueSizeLimit) {
              counter = 1;
              callbackFn();
            } else {
              counter++;
              timeout = setTimeout(callbackFn, timeoutDuration);
            }
          } else {
            counter = 1;
          }
        };
      }

      function getPricePartForAdpodKey(bid) {
        function getPriceGran(bid) {
          var granularity = Object(__WEBPACK_IMPORTED_MODULE_1__src_auction_js__["i"
          /* getPriceGranularity */
          ])(bid.mediaType);
          return Object(__WEBPACK_IMPORTED_MODULE_1__src_auction_js__["h"
          /* getPriceByGranularity */
          ])(granularity)(bid);
        }

        var pricePart;

        var prioritizeDeals = __WEBPACK_IMPORTED_MODULE_6__src_config_js__["b"
        /* config */
        ].getConfig('adpod.prioritizeDeals');

        var bidDealTier = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'video.dealTier');

        if (prioritizeDeals && bidDealTier) {
          var adpodDealCfg = __WEBPACK_IMPORTED_MODULE_6__src_config_js__["b"
          /* config */
          ].getConfig("adpod.dealTier.".concat(bid.bidderCode));

          if (adpodDealCfg) {
            if (bidDealTier >= adpodDealCfg.minDealTier) {
              pricePart = adpodDealCfg.prefix ? adpodDealCfg.prefix + bidDealTier : bidDealTier;
            } else {
              pricePart = getPriceGran(bid);
            }
          } else {
            // should still use deals or use CPM (priceGran)?
            pricePart = bidDealTier;
          }
        } else {
          pricePart = getPriceGran(bid);
        }

        return pricePart;
      }
      /**
       * This function reads certain fields from the bid to generate a specific key used for caching the bid in Prebid Cache
       * @param {Object} bid bid object to update
       * @param {Boolean} brandCategoryExclusion value read from setConfig; influences whether category is required or not
       */


      function attachPriceIndustryDurationKeyToBid(bid, brandCategoryExclusion) {
        var initialCacheKey = bidCacheRegistry.getInitialCacheKey(bid);

        var duration = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'video.durationBucket');

        var pricePart = getPricePartForAdpodKey(bid);
        var pcd;

        if (brandCategoryExclusion) {
          var category = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'meta.adServerCatId');

          pcd = "".concat(pricePart, "_").concat(category, "_").concat(duration, "s");
        } else {
          pcd = "".concat(pricePart, "_").concat(duration, "s");
        }

        if (!bid.adserverTargeting) {
          bid.adserverTargeting = {};
        }

        bid.adserverTargeting[TARGETING_KEY_PB_CAT_DUR] = pcd;
        bid.adserverTargeting[TARGETING_KEY_CACHE_ID] = initialCacheKey;
        bid.videoCacheKey = initialCacheKey;
        bid.customCacheKey = "".concat(pcd, "_").concat(initialCacheKey);
      }
      /**
       * Updates the running queue for the associated auction.
       * Does a check to ensure the auction is still running; if it's not - the previously running queue is killed.
       * @param {*} auctionInstance running context of the auction
       * @param {Object} bidResponse bid object being added to queue
       * @param {Function} afterBidAdded callback function used when Prebid Cache responds
       */


      function updateBidQueue(auctionInstance, bidResponse, afterBidAdded) {
        var bidListIter = bidCacheRegistry.getBids(bidResponse);

        if (bidListIter) {
          var bidListArr = from(bidListIter);
          var callDispatcher = bidCacheRegistry.getQueueDispatcher(bidResponse);
          var killQueue = !!(auctionInstance.getAuctionStatus() !== __WEBPACK_IMPORTED_MODULE_1__src_auction_js__["b"
          /* AUCTION_IN_PROGRESS */
          ]);
          callDispatcher(auctionInstance, bidListArr, afterBidAdded, killQueue);
        } else {
          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"]('Attempted to cache a bid from an unknown auction. Bid:', bidResponse);
        }
      }
      /**
       * Small helper function to remove bids from internal storage; normally b/c they're about to sent to Prebid Cache for processing.
       * @param {Array[Object]} bidResponses list of bids to remove
       */


      function removeBidsFromStorage(bidResponses) {
        for (var i = 0; i < bidResponses.length; i++) {
          bidCacheRegistry.removeBid(bidResponses[i]);
        }
      }
      /**
       * This function will send a list of bids to Prebid Cache.  It also removes the same bids from the internal bidCacheRegistry
       * to maintain which bids are in queue.
       * If the bids are successfully cached, they will be added to the respective auction.
       * @param {*} auctionInstance running context of the auction
       * @param {Array[Object]} bidList list of bid objects that need to be sent to Prebid Cache
       * @param {Function} afterBidAdded callback function used when Prebid Cache responds
       */


      function firePrebidCacheCall(auctionInstance, bidList, afterBidAdded) {
        // remove entries now so other incoming bids won't accidentally have a stale version of the list while PBC is processing the current submitted list
        removeBidsFromStorage(bidList);
        Object(__WEBPACK_IMPORTED_MODULE_5__src_videoCache_js__["b"
        /* store */
        ])(bidList, function (error, cacheIds) {
          if (error) {
            __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"]("Failed to save to the video cache: ".concat(error, ". Video bid(s) must be discarded."));

            for (var i = 0; i < bidList.length; i++) {
              Object(__WEBPACK_IMPORTED_MODULE_1__src_auction_js__["g"
              /* doCallbacksIfTimedout */
              ])(auctionInstance, bidList[i]);
            }
          } else {
            for (var _i = 0; _i < cacheIds.length; _i++) {
              // when uuid in response is empty string then the key already existed, so this bid wasn't cached
              if (cacheIds[_i].uuid !== '') {
                Object(__WEBPACK_IMPORTED_MODULE_1__src_auction_js__["d"
                /* addBidToAuction */
                ])(auctionInstance, bidList[_i]);
              } else {
                __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logInfo"]("Detected a bid was not cached because the custom key was already registered.  Attempted to use key: ".concat(bidList[_i].customCacheKey, ". Bid was: "), bidList[_i]);
              }

              afterBidAdded();
            }
          }
        });
      }
      /**
       * This is the main hook function to handle adpod bids; maintains the logic to temporarily hold bids in a queue in order to send bulk requests to Prebid Cache.
       * @param {Function} fn reference to original function (used by hook logic)
       * @param {*} auctionInstance running context of the auction
       * @param {Object} bidResponse incoming bid; if adpod, will be processed through hook function.  If not adpod, returns to original function.
       * @param {Function} afterBidAdded callback function used when Prebid Cache responds
       * @param {Object} bidderRequest copy of bid's associated bidderRequest object
       */


      function callPrebidCacheHook(fn, auctionInstance, bidResponse, afterBidAdded, bidderRequest) {
        var videoConfig = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bidderRequest, 'mediaTypes.video');

        if (videoConfig && videoConfig.context === __WEBPACK_IMPORTED_MODULE_7__src_mediaTypes_js__["a"
        /* ADPOD */
        ]) {
          var brandCategoryExclusion = __WEBPACK_IMPORTED_MODULE_6__src_config_js__["b"
          /* config */
          ].getConfig('adpod.brandCategoryExclusion');

          var adServerCatId = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bidResponse, 'meta.adServerCatId');

          if (!adServerCatId && brandCategoryExclusion) {
            __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"]('Detected a bid without meta.adServerCatId while setConfig({adpod.brandCategoryExclusion}) was enabled.  This bid has been rejected:', bidResponse);

            afterBidAdded();
          } else {
            if (__WEBPACK_IMPORTED_MODULE_6__src_config_js__["b"
            /* config */
            ].getConfig('adpod.deferCaching') === false) {
              bidCacheRegistry.addBid(bidResponse);
              attachPriceIndustryDurationKeyToBid(bidResponse, brandCategoryExclusion);
              updateBidQueue(auctionInstance, bidResponse, afterBidAdded);
            } else {
              // generate targeting keys for bid
              bidCacheRegistry.setupInitialCacheKey(bidResponse);
              attachPriceIndustryDurationKeyToBid(bidResponse, brandCategoryExclusion); // add bid to auction

              Object(__WEBPACK_IMPORTED_MODULE_1__src_auction_js__["d"
              /* addBidToAuction */
              ])(auctionInstance, bidResponse);
              afterBidAdded();
            }
          }
        } else {
          fn.call(this, auctionInstance, bidResponse, afterBidAdded, bidderRequest);
        }
      }
      /**
       * This hook function will review the adUnit setup and verify certain required values are present in any adpod adUnits.
       * If the fields are missing or incorrectly setup, the adUnit is removed from the list.
       * @param {Function} fn reference to original function (used by hook logic)
       * @param {Array[Object]} adUnits list of adUnits to be evaluated
       * @returns {Array[Object]} list of adUnits that passed the check
       */


      function checkAdUnitSetupHook(fn, adUnits) {
        var goodAdUnits = adUnits.filter(function (adUnit) {
          var mediaTypes = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](adUnit, 'mediaTypes');

          var videoConfig = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](mediaTypes, 'video');

          if (videoConfig && videoConfig.context === __WEBPACK_IMPORTED_MODULE_7__src_mediaTypes_js__["a"
          /* ADPOD */
          ]) {
            // run check to see if other mediaTypes are defined (ie multi-format); reject adUnit if so
            if (Object.keys(mediaTypes).length > 1) {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"]("Detected more than one mediaType in adUnitCode: ".concat(adUnit.code, " while attempting to define an 'adpod' video adUnit.  'adpod' adUnits cannot be mixed with other mediaTypes.  This adUnit will be removed from the auction."));

              return false;
            }

            var errMsg = "Detected missing or incorrectly setup fields for an adpod adUnit.  Please review the following fields of adUnitCode: ".concat(adUnit.code, ".  This adUnit will be removed from the auction.");
            var playerSize = !!(videoConfig.playerSize && (__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isArrayOfNums"](videoConfig.playerSize, 2) || __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isArray"](videoConfig.playerSize) && videoConfig.playerSize.every(function (sz) {
              return __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isArrayOfNums"](sz, 2);
            })) || videoConfig.sizeConfig);
            var adPodDurationSec = !!(videoConfig.adPodDurationSec && __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isNumber"](videoConfig.adPodDurationSec) && videoConfig.adPodDurationSec > 0);
            var durationRangeSec = !!(videoConfig.durationRangeSec && __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isArrayOfNums"](videoConfig.durationRangeSec) && videoConfig.durationRangeSec.every(function (range) {
              return range > 0;
            }));

            if (!playerSize || !adPodDurationSec || !durationRangeSec) {
              errMsg += !playerSize ? '\nmediaTypes.video.playerSize' : '';
              errMsg += !adPodDurationSec ? '\nmediaTypes.video.adPodDurationSec' : '';
              errMsg += !durationRangeSec ? '\nmediaTypes.video.durationRangeSec' : '';

              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"](errMsg);

              return false;
            }
          }

          return true;
        });
        adUnits = goodAdUnits;
        fn.call(this, adUnits);
      }
      /**
       * This check evaluates the incoming bid's `video.durationSeconds` field and tests it against specific logic depending on adUnit config.  Summary of logic below:
       * when adUnit.mediaTypes.video.requireExactDuration is true
       *  - only bids that exactly match those listed values are accepted (don't round at all).
       *  - populate the `bid.video.durationBucket` field with the matching duration value
       * when adUnit.mediaTypes.video.requireExactDuration is false
       *  - round the duration to the next highest specified duration value based on adunit.  If the duration is above a range within a set buffer, that bid falls down into that bucket.
       *      (eg if range was [5, 15, 30] -> 2s is rounded to 5s; 17s is rounded back to 15s; 18s is rounded up to 30s)
       *  - if the bid is above the range of the listed durations (and outside the buffer), reject the bid
       *  - set the rounded duration value in the `bid.video.durationBucket` field for accepted bids
       * @param {Object} bidderRequest copy of the bidderRequest object associated to bidResponse
       * @param {Object} bidResponse incoming bidResponse being evaluated by bidderFactory
       * @returns {boolean} return false if bid duration is deemed invalid as per adUnit configuration; return true if fine
      */


      function checkBidDuration(bidderRequest, bidResponse) {
        var buffer = 2;

        var bidDuration = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bidResponse, 'video.durationSeconds');

        var videoConfig = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bidderRequest, 'mediaTypes.video');

        var adUnitRanges = videoConfig.durationRangeSec;
        adUnitRanges.sort(function (a, b) {
          return a - b;
        }); // ensure the ranges are sorted in numeric order

        if (!videoConfig.requireExactDuration) {
          var max = Math.max.apply(Math, _toConsumableArray(adUnitRanges));

          if (bidDuration <= max + buffer) {
            var nextHighestRange = __WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_find_js___default()(adUnitRanges, function (range) {
              return range + buffer >= bidDuration;
            });

            bidResponse.video.durationBucket = nextHighestRange;
          } else {
            __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"]("Detected a bid with a duration value outside the accepted ranges specified in adUnit.mediaTypes.video.durationRangeSec.  Rejecting bid: ", bidResponse);

            return false;
          }
        } else {
          if (__WEBPACK_IMPORTED_MODULE_9_core_js_library_fn_array_find_js___default()(adUnitRanges, function (range) {
            return range === bidDuration;
          })) {
            bidResponse.video.durationBucket = bidDuration;
          } else {
            __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"]("Detected a bid with a duration value not part of the list of accepted ranges specified in adUnit.mediaTypes.video.durationRangeSec.  Exact match durations must be used for this adUnit. Rejecting bid: ", bidResponse);

            return false;
          }
        }

        return true;
      }
      /**
       * This hooked function evaluates an adpod bid and determines if the required fields are present.
       * If it's found to not be an adpod bid, it will return to original function via hook logic
       * @param {Function} fn reference to original function (used by hook logic)
       * @param {Object} bid incoming bid object
       * @param {Object} bidRequest bidRequest object of associated bid
       * @param {Object} videoMediaType copy of the `bidRequest.mediaTypes.video` object; used in original function
       * @param {String} context value of the `bidRequest.mediaTypes.video.context` field; used in original function
       * @returns {boolean} this return is only used for adpod bids
       */


      function checkVideoBidSetupHook(fn, bid, bidRequest, videoMediaType, context) {
        if (context === __WEBPACK_IMPORTED_MODULE_7__src_mediaTypes_js__["a"
        /* ADPOD */
        ]) {
          var result = true;

          var brandCategoryExclusion = __WEBPACK_IMPORTED_MODULE_6__src_config_js__["b"
          /* config */
          ].getConfig('adpod.brandCategoryExclusion');

          if (brandCategoryExclusion && !__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'meta.iabSubCatId')) {
            result = false;
          }

          if (__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'video')) {
            if (!__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'video.context') || bid.video.context !== __WEBPACK_IMPORTED_MODULE_7__src_mediaTypes_js__["a"
            /* ADPOD */
            ]) {
              result = false;
            }

            if (!__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'video.durationSeconds') || bid.video.durationSeconds <= 0) {
              result = false;
            } else {
              var isBidGood = checkBidDuration(bidRequest, bid);
              if (!isBidGood) result = false;
            }
          }

          if (!__WEBPACK_IMPORTED_MODULE_6__src_config_js__["b"
          /* config */
          ].getConfig('cache.url') && bid.vastXml && !bid.vastUrl) {
            __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]("\n        This bid contains only vastXml and will not work when a prebid cache url is not specified.\n        Try enabling prebid cache with pbjs.setConfig({ cache: {url: \"...\"} });\n      ");

            result = false;
          }

          fn.bail(result);
        } else {
          fn.call(this, bid, bidRequest, videoMediaType, context);
        }
      }
      /**
       * This function reads the (optional) settings for the adpod as set from the setConfig()
       * @param {Object} config contains the config settings for adpod module
       */


      function adpodSetConfig(config) {
        if (config.bidQueueTimeDelay !== undefined) {
          if (typeof config.bidQueueTimeDelay === 'number' && config.bidQueueTimeDelay > 0) {
            queueTimeDelay = config.bidQueueTimeDelay;
          } else {
            __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"]("Detected invalid value for adpod.bidQueueTimeDelay in setConfig; must be a positive number.  Using default: ".concat(queueTimeDelay));
          }
        }

        if (config.bidQueueSizeLimit !== undefined) {
          if (typeof config.bidQueueSizeLimit === 'number' && config.bidQueueSizeLimit > 0) {
            queueSizeLimit = config.bidQueueSizeLimit;
          } else {
            __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"]("Detected invalid value for adpod.bidQueueSizeLimit in setConfig; must be a positive number.  Using default: ".concat(queueSizeLimit));
          }
        }
      }

      __WEBPACK_IMPORTED_MODULE_6__src_config_js__["b"
      /* config */
      ].getConfig('adpod', function (config) {
        return adpodSetConfig(config.adpod);
      });
      /**
       * This function initializes the adpod module's hooks.  This is called by the corresponding adserver video module.
       */


      function initAdpodHooks() {
        Object(__WEBPACK_IMPORTED_MODULE_4__src_hook_js__["d"
        /* setupBeforeHookFnOnce */
        ])(__WEBPACK_IMPORTED_MODULE_1__src_auction_js__["f"
        /* callPrebidCache */
        ], callPrebidCacheHook);
        Object(__WEBPACK_IMPORTED_MODULE_4__src_hook_js__["d"
        /* setupBeforeHookFnOnce */
        ])(__WEBPACK_IMPORTED_MODULE_2__src_prebid_js__["checkAdUnitSetup"], checkAdUnitSetupHook);
        Object(__WEBPACK_IMPORTED_MODULE_4__src_hook_js__["d"
        /* setupBeforeHookFnOnce */
        ])(__WEBPACK_IMPORTED_MODULE_3__src_video_js__["c"
        /* checkVideoBidSetup */
        ], checkVideoBidSetupHook);
      }

      initAdpodHooks();
      /**
       *
       * @param {Array[Object]} bids list of 'winning' bids that need to be cached
       * @param {Function} callback send the cached bids (or error) back to adserverVideoModule for further processing
       }}
       */

      function callPrebidCacheAfterAuction(bids, callback) {
        // will call PBC here and execute cb param to initialize player code
        Object(__WEBPACK_IMPORTED_MODULE_5__src_videoCache_js__["b"
        /* store */
        ])(bids, function (error, cacheIds) {
          if (error) {
            callback(error, null);
          } else {
            var successfulCachedBids = [];

            for (var i = 0; i < cacheIds.length; i++) {
              if (cacheIds[i] !== '') {
                successfulCachedBids.push(bids[i]);
              }
            }

            callback(null, successfulCachedBids);
          }
        });
      }
      /**
       * Compare function to be used in sorting long-form bids. This will compare bids on price per second.
       * @param {Object} bid
       * @param {Object} bid
       */


      function sortByPricePerSecond(a, b) {
        if (a.adserverTargeting[__WEBPACK_IMPORTED_MODULE_11__src_constants_json___default.a.TARGETING_KEYS.PRICE_BUCKET] / a.video.durationBucket < b.adserverTargeting[__WEBPACK_IMPORTED_MODULE_11__src_constants_json___default.a.TARGETING_KEYS.PRICE_BUCKET] / b.video.durationBucket) {
          return 1;
        }

        if (a.adserverTargeting[__WEBPACK_IMPORTED_MODULE_11__src_constants_json___default.a.TARGETING_KEYS.PRICE_BUCKET] / a.video.durationBucket > b.adserverTargeting[__WEBPACK_IMPORTED_MODULE_11__src_constants_json___default.a.TARGETING_KEYS.PRICE_BUCKET] / b.video.durationBucket) {
          return -1;
        }

        return 0;
      }
      /**
       * This function returns targeting keyvalue pairs for long-form adserver modules. Freewheel and GAM are currently supporting Prebid long-form
       * @param {Object} options
       * @param {Array[string]} codes
       * @param {function} callback
       * @returns targeting kvs for adUnitCodes
       */


      function getTargeting() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            codes = _ref.codes,
            callback = _ref.callback;

        if (!callback) {
          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]('No callback function was defined in the getTargeting call.  Aborting getTargeting().');

          return;
        }

        codes = codes || [];
        var adPodAdUnits = getAdPodAdUnits(codes);

        var bidsReceived = __WEBPACK_IMPORTED_MODULE_10__src_auctionManager_js__["a"
        /* auctionManager */
        ].getBidsReceived();

        var competiveExclusionEnabled = __WEBPACK_IMPORTED_MODULE_6__src_config_js__["b"
        /* config */
        ].getConfig('adpod.brandCategoryExclusion');

        var deferCachingSetting = __WEBPACK_IMPORTED_MODULE_6__src_config_js__["b"
        /* config */
        ].getConfig('adpod.deferCaching');

        var deferCachingEnabled = typeof deferCachingSetting === 'boolean' ? deferCachingSetting : true;
        var bids = getBidsForAdpod(bidsReceived, adPodAdUnits);
        bids = competiveExclusionEnabled || deferCachingEnabled ? getExclusiveBids(bids) : bids;

        var prioritizeDeals = __WEBPACK_IMPORTED_MODULE_6__src_config_js__["b"
        /* config */
        ].getConfig('adpod.prioritizeDeals');

        if (prioritizeDeals) {
          var _bids$reduce = bids.reduce(function (partitions, bid) {
            var bidDealTier = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'video.dealTier');

            var minDealTier = __WEBPACK_IMPORTED_MODULE_6__src_config_js__["b"
            /* config */
            ].getConfig("adpod.dealTier.".concat(bid.bidderCode, ".minDealTier"));

            if (minDealTier && bidDealTier) {
              if (bidDealTier >= minDealTier) {
                partitions[1].push(bid);
              } else {
                partitions[0].push(bid);
              }
            } else if (bidDealTier) {
              partitions[1].push(bid);
            } else {
              partitions[0].push(bid);
            }

            return partitions;
          }, [[], []]),
              _bids$reduce2 = _slicedToArray(_bids$reduce, 2),
              otherBids = _bids$reduce2[0],
              highPriorityDealBids = _bids$reduce2[1];

          highPriorityDealBids.sort(sortByPricePerSecond);
          otherBids.sort(sortByPricePerSecond);
          bids = highPriorityDealBids.concat(otherBids);
        } else {
          bids.sort(sortByPricePerSecond);
        }

        var targeting = {};

        if (deferCachingEnabled === false) {
          adPodAdUnits.forEach(function (adUnit) {
            var adPodTargeting = [];

            var adPodDurationSeconds = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](adUnit, 'mediaTypes.video.adPodDurationSec');

            bids.filter(function (bid) {
              return bid.adUnitCode === adUnit.code;
            }).forEach(function (bid, index, arr) {
              if (bid.video.durationBucket <= adPodDurationSeconds) {
                adPodTargeting.push(_defineProperty({}, TARGETING_KEY_PB_CAT_DUR, bid.adserverTargeting[TARGETING_KEY_PB_CAT_DUR]));
                adPodDurationSeconds -= bid.video.durationBucket;
              }

              if (index === arr.length - 1 && adPodTargeting.length > 0) {
                adPodTargeting.push(_defineProperty({}, TARGETING_KEY_CACHE_ID, bid.adserverTargeting[TARGETING_KEY_CACHE_ID]));
              }
            });
            targeting[adUnit.code] = adPodTargeting;
          });
          callback(null, targeting);
        } else {
          var bidsToCache = [];
          adPodAdUnits.forEach(function (adUnit) {
            var adPodDurationSeconds = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](adUnit, 'mediaTypes.video.adPodDurationSec');

            bids.filter(function (bid) {
              return bid.adUnitCode === adUnit.code;
            }).forEach(function (bid) {
              if (bid.video.durationBucket <= adPodDurationSeconds) {
                bidsToCache.push(bid);
                adPodDurationSeconds -= bid.video.durationBucket;
              }
            });
          });
          callPrebidCacheAfterAuction(bidsToCache, function (error, bidsSuccessfullyCached) {
            if (error) {
              callback(error, null);
            } else {
              var groupedBids = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["groupBy"](bidsSuccessfullyCached, 'adUnitCode');

              Object.keys(groupedBids).forEach(function (adUnitCode) {
                var adPodTargeting = [];
                groupedBids[adUnitCode].forEach(function (bid, index, arr) {
                  adPodTargeting.push(_defineProperty({}, TARGETING_KEY_PB_CAT_DUR, bid.adserverTargeting[TARGETING_KEY_PB_CAT_DUR]));

                  if (index === arr.length - 1 && adPodTargeting.length > 0) {
                    adPodTargeting.push(_defineProperty({}, TARGETING_KEY_CACHE_ID, bid.adserverTargeting[TARGETING_KEY_CACHE_ID]));
                  }
                });
                targeting[adUnitCode] = adPodTargeting;
              });
              callback(null, targeting);
            }
          });
        }

        return targeting;
      }
      /**
       * This function returns the adunit of mediaType adpod
       * @param {Array} codes adUnitCodes
       * @returns {Array[Object]} adunits of mediaType adpod
       */


      function getAdPodAdUnits(codes) {
        return __WEBPACK_IMPORTED_MODULE_10__src_auctionManager_js__["a"
        /* auctionManager */
        ].getAdUnits().filter(function (adUnit) {
          return __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](adUnit, 'mediaTypes.video.context') === __WEBPACK_IMPORTED_MODULE_7__src_mediaTypes_js__["a"
          /* ADPOD */
          ];
        }).filter(function (adUnit) {
          return codes.length > 0 ? codes.indexOf(adUnit.code) != -1 : true;
        });
      }
      /**
       * This function removes bids of same category. It will be used when competitive exclusion is enabled.
       * @param {Array[Object]} bidsReceived
       * @returns {Array[Object]} unique category bids
       */


      function getExclusiveBids(bidsReceived) {
        var bids = bidsReceived.map(function (bid) {
          return _extends({}, bid, _defineProperty({}, TARGETING_KEY_PB_CAT_DUR, bid.adserverTargeting[TARGETING_KEY_PB_CAT_DUR]));
        });
        bids = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["groupBy"](bids, TARGETING_KEY_PB_CAT_DUR);
        var filteredBids = [];
        Object.keys(bids).forEach(function (targetingKey) {
          bids[targetingKey].sort(__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["compareOn"]('responseTimestamp'));
          filteredBids.push(bids[targetingKey][0]);
        });
        return filteredBids;
      }
      /**
       * This function returns bids for adpod adunits
       * @param {Array[Object]} bidsReceived
       * @param {Array[Object]} adPodAdUnits
       * @returns {Array[Object]} bids of mediaType adpod
       */


      function getBidsForAdpod(bidsReceived, adPodAdUnits) {
        var adUnitCodes = adPodAdUnits.map(function (adUnit) {
          return adUnit.code;
        });
        return bidsReceived.filter(function (bid) {
          return adUnitCodes.indexOf(bid.adUnitCode) != -1 && bid.video && bid.video.context === __WEBPACK_IMPORTED_MODULE_7__src_mediaTypes_js__["a"
          /* ADPOD */
          ];
        });
      }

      var sharedMethods = {
        TARGETING_KEY_PB_CAT_DUR: TARGETING_KEY_PB_CAT_DUR,
        TARGETING_KEY_CACHE_ID: TARGETING_KEY_CACHE_ID,
        'getTargeting': getTargeting
      };
      Object.freeze(sharedMethods);
      Object(__WEBPACK_IMPORTED_MODULE_4__src_hook_js__["c"
      /* module */
      ])('adpod', function shareAdpodUtilities() {
        if (!__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isPlainObject"](arguments.length <= 0 ? undefined : arguments[0])) {
          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]('Adpod module needs plain object to share methods with submodule');

          return;
        }

        function addMethods(object, func) {
          for (var name in func) {
            object[name] = func[name];
          }
        }

        addMethods(arguments.length <= 0 ? undefined : arguments[0], sharedMethods);
      });
      /***/
    }
  }, [171]);
  pbjsChunk([237], {
    /***/
    209:
    /***/
    function _(module, exports, __webpack_require__) {
      module.exports = __webpack_require__(210);
      /***/
    },

    /***/
    210:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "spec", function () {
        return spec;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__src_Renderer_js__ = __webpack_require__(10);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__src_utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__src_config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__src_adapters_bidderFactory_js__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__src_auctionManager_js__ = __webpack_require__(25);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_find_js__ = __webpack_require__(12);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_find_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_find_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js__ = __webpack_require__(11);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_8__src_video_js__ = __webpack_require__(34);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
      }

      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance");
      }

      function _iterableToArray(iter) {
        if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
      }

      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        }
      }

      var BIDDER_CODE = 'appnexus';
      var URL = 'https://ib.adnxs.com/ut/v3/prebid';
      var VIDEO_TARGETING = ['id', 'mimes', 'minduration', 'maxduration', 'startdelay', 'skippable', 'playback_method', 'frameworks'];
      var USER_PARAMS = ['age', 'externalUid', 'segments', 'gender', 'dnt', 'language'];
      var APP_DEVICE_PARAMS = ['geo', 'device_id']; // appid is collected separately

      var DEBUG_PARAMS = ['enabled', 'dongle', 'member_id', 'debug_timeout'];
      var NATIVE_MAPPING = {
        body: 'description',
        body2: 'desc2',
        cta: 'ctatext',
        image: {
          serverName: 'main_image',
          requiredParams: {
            required: true
          }
        },
        icon: {
          serverName: 'icon',
          requiredParams: {
            required: true
          }
        },
        sponsoredBy: 'sponsored_by',
        privacyLink: 'privacy_link',
        salePrice: 'saleprice',
        displayUrl: 'displayurl'
      };
      var SOURCE = 'pbjs';
      var MAX_IMPS_PER_REQUEST = 15;
      var mappingFileUrl = 'https://acdn.adnxs.com/prebid/appnexus-mapping/mappings.json';
      var SCRIPT_TAG_START = '<script';
      var VIEWABILITY_URL_START = /\/\/cdn\.adnxs\.com\/v/;
      var VIEWABILITY_FILE_NAME = 'trk.js';
      var spec = {
        code: BIDDER_CODE,
        aliases: ['appnexusAst', 'brealtime', 'emxdigital', 'pagescience', 'defymedia', 'gourmetads', 'matomy', 'featureforward', 'oftmedia', 'districtm', 'adasta'],
        supportedMediaTypes: [__WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["b"
        /* BANNER */
        ], __WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["d"
        /* VIDEO */
        ], __WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["c"
        /* NATIVE */
        ]],

        /**
         * Determines whether or not the given bid request is valid.
         *
         * @param {object} bid The bid to validate.
         * @return boolean True if this is a valid bid, and false otherwise.
         */
        isBidRequestValid: function isBidRequestValid(bid) {
          return !!(bid.params.placementId || bid.params.member && bid.params.invCode);
        },

        /**
         * Make a server request from the list of BidRequests.
         *
         * @param {BidRequest[]} bidRequests A non-empty list of bid requests which should be sent to the Server.
         * @return ServerRequest Info describing the request to the server.
         */
        buildRequests: function buildRequests(bidRequests, bidderRequest) {
          var tags = bidRequests.map(bidToTag);

          var userObjBid = __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_find_js___default()(bidRequests, hasUserInfo);

          var userObj = {};

          if (__WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
          /* config */
          ].getConfig('coppa') === true) {
            userObj = {
              'coppa': true
            };
          }

          if (userObjBid) {
            Object.keys(userObjBid.params.user).filter(function (param) {
              return __WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default()(USER_PARAMS, param);
            }).forEach(function (param) {
              return userObj[param] = userObjBid.params.user[param];
            });
          }

          var appDeviceObjBid = __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_find_js___default()(bidRequests, hasAppDeviceInfo);

          var appDeviceObj;

          if (appDeviceObjBid && appDeviceObjBid.params && appDeviceObjBid.params.app) {
            appDeviceObj = {};
            Object.keys(appDeviceObjBid.params.app).filter(function (param) {
              return __WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default()(APP_DEVICE_PARAMS, param);
            }).forEach(function (param) {
              return appDeviceObj[param] = appDeviceObjBid.params.app[param];
            });
          }

          var appIdObjBid = __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_find_js___default()(bidRequests, hasAppId);

          var appIdObj;

          if (appIdObjBid && appIdObjBid.params && appDeviceObjBid.params.app && appDeviceObjBid.params.app.id) {
            appIdObj = {
              appid: appIdObjBid.params.app.id
            };
          }

          var debugObj = {};
          var debugObjParams = {};
          var debugCookieName = 'apn_prebid_debug';
          var debugCookie = __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["getCookie"](debugCookieName) || null;

          if (debugCookie) {
            try {
              debugObj = JSON.parse(debugCookie);
            } catch (e) {
              __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["logError"]('AppNexus Debug Auction Cookie Error:\n\n' + e);
            }
          } else {
            var debugBidRequest = __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_find_js___default()(bidRequests, hasDebug);

            if (debugBidRequest && debugBidRequest.debug) {
              debugObj = debugBidRequest.debug;
            }
          }

          if (debugObj && debugObj.enabled) {
            Object.keys(debugObj).filter(function (param) {
              return __WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default()(DEBUG_PARAMS, param);
            }).forEach(function (param) {
              debugObjParams[param] = debugObj[param];
            });
          }

          var memberIdBid = __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_find_js___default()(bidRequests, hasMemberId);

          var member = memberIdBid ? parseInt(memberIdBid.params.member, 10) : 0;
          var schain = bidRequests[0].schain;
          var payload = {
            tags: _toConsumableArray(tags),
            user: userObj,
            sdk: {
              source: SOURCE,
              version: "3.13.0-pre"
            },
            schain: schain
          };

          if (member > 0) {
            payload.member_id = member;
          }

          if (appDeviceObjBid) {
            payload.device = appDeviceObj;
          }

          if (appIdObjBid) {
            payload.app = appIdObj;
          }

          if (__WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
          /* config */
          ].getConfig('adpod.brandCategoryExclusion')) {
            payload.brand_category_uniqueness = true;
          }

          if (debugObjParams.enabled) {
            payload.debug = debugObjParams;

            __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["logInfo"]('AppNexus Debug Auction Settings:\n\n' + JSON.stringify(debugObjParams, null, 4));
          }

          if (bidderRequest && bidderRequest.gdprConsent) {
            // note - objects for impbus use underscore instead of camelCase
            payload.gdpr_consent = {
              consent_string: bidderRequest.gdprConsent.consentString,
              consent_required: bidderRequest.gdprConsent.gdprApplies
            };
          }

          if (bidderRequest && bidderRequest.uspConsent) {
            payload.us_privacy = bidderRequest.uspConsent;
          }

          if (bidderRequest && bidderRequest.refererInfo) {
            var refererinfo = {
              rd_ref: encodeURIComponent(bidderRequest.refererInfo.referer),
              rd_top: bidderRequest.refererInfo.reachedTop,
              rd_ifs: bidderRequest.refererInfo.numIframes,
              rd_stk: bidderRequest.refererInfo.stack.map(function (url) {
                return encodeURIComponent(url);
              }).join(',')
            };
            payload.referrer_detection = refererinfo;
          }

          var hasAdPodBid = __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_find_js___default()(bidRequests, hasAdPod);

          if (hasAdPodBid) {
            bidRequests.filter(hasAdPod).forEach(function (adPodBid) {
              var adPodTags = createAdPodRequest(tags, adPodBid); // don't need the original adpod placement because it's in adPodTags

              var nonPodTags = payload.tags.filter(function (tag) {
                return tag.uuid !== adPodBid.bidId;
              });
              payload.tags = [].concat(_toConsumableArray(nonPodTags), _toConsumableArray(adPodTags));
            });
          }

          var criteoId = __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["deepAccess"](bidRequests[0], "userId.criteoId");

          if (criteoId) {
            var tpuids = [];
            tpuids.push({
              'provider': 'criteo',
              'user_id': criteoId
            });
            payload.tpuids = tpuids;
          }

          var request = formatRequest(payload, bidderRequest);
          return request;
        },

        /**
         * Unpack the response from the server into a list of bids.
         *
         * @param {*} serverResponse A successful response from the server.
         * @return {Bid[]} An array of bids which were nested inside the server.
         */
        interpretResponse: function interpretResponse(serverResponse, _ref) {
          var _this = this;

          var bidderRequest = _ref.bidderRequest;
          serverResponse = serverResponse.body;
          var bids = [];

          if (!serverResponse || serverResponse.error) {
            var errorMessage = "in response for ".concat(bidderRequest.bidderCode, " adapter");

            if (serverResponse && serverResponse.error) {
              errorMessage += ": ".concat(serverResponse.error);
            }

            __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["logError"](errorMessage);

            return bids;
          }

          if (serverResponse.tags) {
            serverResponse.tags.forEach(function (serverBid) {
              var rtbBid = getRtbBid(serverBid);

              if (rtbBid) {
                if (rtbBid.cpm !== 0 && __WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default()(_this.supportedMediaTypes, rtbBid.ad_type)) {
                  var bid = newBid(serverBid, rtbBid, bidderRequest);
                  bid.mediaType = parseMediaType(rtbBid);
                  bids.push(bid);
                }
              }
            });
          }

          if (serverResponse.debug && serverResponse.debug.debug_info) {
            var debugHeader = 'AppNexus Debug Auction for Prebid\n\n';
            var debugText = debugHeader + serverResponse.debug.debug_info;
            debugText = debugText.replace(/(<td>|<th>)/gm, '\t') // Tables
            .replace(/(<\/td>|<\/th>)/gm, '\n') // Tables
            .replace(/^<br>/gm, '') // Remove leading <br>
            .replace(/(<br>\n|<br>)/gm, '\n') // <br>
            .replace(/<h1>(.*)<\/h1>/gm, '\n\n===== $1 =====\n\n') // Header H1
            .replace(/<h[2-6]>(.*)<\/h[2-6]>/gm, '\n\n*** $1 ***\n\n') // Headers
            .replace(/(<([^>]+)>)/igm, ''); // Remove any other tags

            __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["logMessage"]('https://console.appnexus.com/docs/understanding-the-debug-auction');

            __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["logMessage"](debugText);
          }

          return bids;
        },

        /**
         * @typedef {Object} mappingFileInfo
         * @property {string} url  mapping file json url
         * @property {number} refreshInDays prebid stores mapping data in localstorage so you can return in how many days you want to update value stored in localstorage.
         * @property {string} localStorageKey unique key to store your mapping json in localstorage
         */

        /**
         * Returns mapping file info. This info will be used by bidderFactory to preload mapping file and store data in local storage
         * @returns {mappingFileInfo}
         */
        getMappingFileInfo: function getMappingFileInfo() {
          return {
            url: mappingFileUrl,
            refreshInDays: 7
          };
        },
        getUserSyncs: function getUserSyncs(syncOptions) {
          if (syncOptions.iframeEnabled) {
            return [{
              type: 'iframe',
              url: 'https://acdn.adnxs.com/ib/static/usersync/v3/async_usersync.html'
            }];
          }
        },
        transformBidParams: function transformBidParams(params, isOpenRtb) {
          params = __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["convertTypes"]({
            'member': 'string',
            'invCode': 'string',
            'placementId': 'number',
            'keywords': __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["transformBidderParamKeywords"]
          }, params);

          if (isOpenRtb) {
            params.use_pmt_rule = typeof params.usePaymentRule === 'boolean' ? params.usePaymentRule : false;

            if (params.usePaymentRule) {
              delete params.usePaymentRule;
            }

            if (isPopulatedArray(params.keywords)) {
              params.keywords.forEach(deleteValues);
            }

            Object.keys(params).forEach(function (paramKey) {
              var convertedKey = __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["convertCamelToUnderscore"](paramKey);

              if (convertedKey !== paramKey) {
                params[convertedKey] = params[paramKey];
                delete params[paramKey];
              }
            });
          }

          return params;
        },

        /**
         * Add element selector to javascript tracker to improve native viewability
         * @param {Bid} bid
         */
        onBidWon: function onBidWon(bid) {
          if (bid["native"]) {
            reloadViewabilityScriptWithCorrectParameters(bid);
          }
        }
      };

      function isPopulatedArray(arr) {
        return !!(__WEBPACK_IMPORTED_MODULE_1__src_utils_js__["isArray"](arr) && arr.length > 0);
      }

      function deleteValues(keyPairObj) {
        if (isPopulatedArray(keyPairObj.value) && keyPairObj.value[0] === '') {
          delete keyPairObj.value;
        }
      }

      function reloadViewabilityScriptWithCorrectParameters(bid) {
        var viewJsPayload = getAppnexusViewabilityScriptFromJsTrackers(bid["native"].javascriptTrackers);

        if (viewJsPayload) {
          var prebidParams = 'pbjs_adid=' + bid.adId + ';pbjs_auc=' + bid.adUnitCode;
          var jsTrackerSrc = getViewabilityScriptUrlFromPayload(viewJsPayload);
          var newJsTrackerSrc = jsTrackerSrc.replace('dom_id=%native_dom_id%', prebidParams); // find iframe containing script tag

          var frameArray = document.getElementsByTagName('iframe'); // boolean var to modify only one script. That way if there are muliple scripts,
          // they won't all point to the same creative.

          var modifiedAScript = false; // first, loop on all ifames

          for (var i = 0; i < frameArray.length && !modifiedAScript; i++) {
            var currentFrame = frameArray[i];

            try {
              // IE-compatible, see https://stackoverflow.com/a/3999191/2112089
              var nestedDoc = currentFrame.contentDocument || currentFrame.contentWindow.document;

              if (nestedDoc) {
                // if the doc is present, we look for our jstracker
                var scriptArray = nestedDoc.getElementsByTagName('script');

                for (var j = 0; j < scriptArray.length && !modifiedAScript; j++) {
                  var currentScript = scriptArray[j];

                  if (currentScript.getAttribute('data-src') == jsTrackerSrc) {
                    currentScript.setAttribute('src', newJsTrackerSrc);
                    currentScript.setAttribute('data-src', '');

                    if (currentScript.removeAttribute) {
                      currentScript.removeAttribute('data-src');
                    }

                    modifiedAScript = true;
                  }
                }
              }
            } catch (exception) {
              // trying to access a cross-domain iframe raises a SecurityError
              // this is expected and ignored
              if (!(exception instanceof DOMException && exception.name === 'SecurityError')) {
                // all other cases are raised again to be treated by the calling function
                throw exception;
              }
            }
          }
        }
      }

      function strIsAppnexusViewabilityScript(str) {
        var regexMatchUrlStart = str.match(VIEWABILITY_URL_START);
        var viewUrlStartInStr = regexMatchUrlStart != null && regexMatchUrlStart.length >= 1;
        var regexMatchFileName = str.match(VIEWABILITY_FILE_NAME);
        var fileNameInStr = regexMatchFileName != null && regexMatchFileName.length >= 1;
        return str.startsWith(SCRIPT_TAG_START) && fileNameInStr && viewUrlStartInStr;
      }

      function getAppnexusViewabilityScriptFromJsTrackers(jsTrackerArray) {
        var viewJsPayload;

        if (__WEBPACK_IMPORTED_MODULE_1__src_utils_js__["isStr"](jsTrackerArray) && strIsAppnexusViewabilityScript(jsTrackerArray)) {
          viewJsPayload = jsTrackerArray;
        } else if (__WEBPACK_IMPORTED_MODULE_1__src_utils_js__["isArray"](jsTrackerArray)) {
          for (var i = 0; i < jsTrackerArray.length; i++) {
            var currentJsTracker = jsTrackerArray[i];

            if (strIsAppnexusViewabilityScript(currentJsTracker)) {
              viewJsPayload = currentJsTracker;
            }
          }
        }

        return viewJsPayload;
      }

      function getViewabilityScriptUrlFromPayload(viewJsPayload) {
        // extracting the content of the src attribute
        // -> substring between src=" and "
        var indexOfFirstQuote = viewJsPayload.indexOf('src="') + 5; // offset of 5: the length of 'src=' + 1

        var indexOfSecondQuote = viewJsPayload.indexOf('"', indexOfFirstQuote);
        var jsTrackerSrc = viewJsPayload.substring(indexOfFirstQuote, indexOfSecondQuote);
        return jsTrackerSrc;
      }

      function formatRequest(payload, bidderRequest) {
        var request = [];

        if (payload.tags.length > MAX_IMPS_PER_REQUEST) {
          var clonedPayload = __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["deepClone"](payload);

          __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["chunk"](payload.tags, MAX_IMPS_PER_REQUEST).forEach(function (tags) {
            clonedPayload.tags = tags;
            var payloadString = JSON.stringify(clonedPayload);
            request.push({
              method: 'POST',
              url: URL,
              data: payloadString,
              bidderRequest: bidderRequest
            });
          });
        } else {
          var payloadString = JSON.stringify(payload);
          request = {
            method: 'POST',
            url: URL,
            data: payloadString,
            bidderRequest: bidderRequest
          };
        }

        return request;
      }

      function newRenderer(adUnitCode, rtbBid) {
        var rendererOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        var renderer = __WEBPACK_IMPORTED_MODULE_0__src_Renderer_js__["a"
        /* Renderer */
        ].install({
          id: rtbBid.renderer_id,
          url: rtbBid.renderer_url,
          config: rendererOptions,
          loaded: false,
          adUnitCode: adUnitCode
        });

        try {
          renderer.setRender(outstreamRender);
        } catch (err) {
          __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["logWarn"]('Prebid Error calling setRender on renderer', err);
        }

        renderer.setEventHandlers({
          impression: function impression() {
            return __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["logMessage"]('AppNexus outstream video impression event');
          },
          loaded: function loaded() {
            return __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["logMessage"]('AppNexus outstream video loaded event');
          },
          ended: function ended() {
            __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["logMessage"]('AppNexus outstream renderer video event');

            document.querySelector("#".concat(adUnitCode)).style.display = 'none';
          }
        });
        return renderer;
      }
      /**
       * Unpack the Server's Bid into a Prebid-compatible one.
       * @param serverBid
       * @param rtbBid
       * @param bidderRequest
       * @return Bid
       */


      function newBid(serverBid, rtbBid, bidderRequest) {
        var bidRequest = __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["getBidRequest"](serverBid.uuid, [bidderRequest]);

        var bid = {
          requestId: serverBid.uuid,
          cpm: rtbBid.cpm,
          creativeId: rtbBid.creative_id,
          dealId: rtbBid.deal_id,
          currency: 'USD',
          netRevenue: true,
          ttl: 300,
          adUnitCode: bidRequest.adUnitCode,
          appnexus: {
            buyerMemberId: rtbBid.buyer_member_id,
            dealPriority: rtbBid.deal_priority,
            dealCode: rtbBid.deal_code
          }
        };

        if (rtbBid.advertiser_id) {
          bid.meta = _extends({}, bid.meta, {
            advertiserId: rtbBid.advertiser_id
          });
        }

        if (rtbBid.rtb.video) {
          // shared video properties used for all 3 contexts
          _extends(bid, {
            width: rtbBid.rtb.video.player_width,
            height: rtbBid.rtb.video.player_height,
            vastImpUrl: rtbBid.notify_url,
            ttl: 3600
          });

          var videoContext = __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["deepAccess"](bidRequest, 'mediaTypes.video.context');

          switch (videoContext) {
            case __WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["a"
            /* ADPOD */
            ]:
              var iabSubCatId = Object(__WEBPACK_IMPORTED_MODULE_3__src_adapters_bidderFactory_js__["getIabSubCategory"])(bidRequest.bidder, rtbBid.brand_category_id);
              bid.meta = _extends({}, bid.meta, {
                iabSubCatId: iabSubCatId
              });
              var dealTier = rtbBid.deal_priority;
              bid.video = {
                context: __WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["a"
                /* ADPOD */
                ],
                durationSeconds: Math.floor(rtbBid.rtb.video.duration_ms / 1000),
                dealTier: dealTier
              };
              bid.vastUrl = rtbBid.rtb.video.asset_url;
              break;

            case __WEBPACK_IMPORTED_MODULE_8__src_video_js__["b"
            /* OUTSTREAM */
            ]:
              bid.adResponse = serverBid;
              bid.adResponse.ad = bid.adResponse.ads[0];
              bid.adResponse.ad.video = bid.adResponse.ad.rtb.video;
              bid.vastXml = rtbBid.rtb.video.content;

              if (rtbBid.renderer_url) {
                var videoBid = __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_find_js___default()(bidderRequest.bids, function (bid) {
                  return bid.bidId === serverBid.uuid;
                });

                var rendererOptions = __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["deepAccess"](videoBid, 'renderer.options');

                bid.renderer = newRenderer(bid.adUnitCode, rtbBid, rendererOptions);
              }

              break;

            case __WEBPACK_IMPORTED_MODULE_8__src_video_js__["a"
            /* INSTREAM */
            ]:
              bid.vastUrl = rtbBid.notify_url + '&redir=' + encodeURIComponent(rtbBid.rtb.video.asset_url);
              break;
          }
        } else if (rtbBid.rtb[__WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["c"
        /* NATIVE */
        ]]) {
          var nativeAd = rtbBid.rtb[__WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["c"
          /* NATIVE */
          ]]; // setting up the jsTracker:
          // we put it as a data-src attribute so that the tracker isn't called
          // until we have the adId (see onBidWon)

          var jsTrackerDisarmed = rtbBid.viewability.config.replace('src=', 'data-src=');
          var jsTrackers = nativeAd.javascript_trackers;

          if (jsTrackers == undefined) {
            jsTrackers = jsTrackerDisarmed;
          } else if (__WEBPACK_IMPORTED_MODULE_1__src_utils_js__["isStr"](jsTrackers)) {
            jsTrackers = [jsTrackers, jsTrackerDisarmed];
          } else {
            jsTrackers.push(jsTrackerDisarmed);
          }

          bid[__WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["c"
          /* NATIVE */
          ]] = {
            title: nativeAd.title,
            body: nativeAd.desc,
            body2: nativeAd.desc2,
            cta: nativeAd.ctatext,
            rating: nativeAd.rating,
            sponsoredBy: nativeAd.sponsored,
            privacyLink: nativeAd.privacy_link,
            address: nativeAd.address,
            downloads: nativeAd.downloads,
            likes: nativeAd.likes,
            phone: nativeAd.phone,
            price: nativeAd.price,
            salePrice: nativeAd.saleprice,
            clickUrl: nativeAd.link.url,
            displayUrl: nativeAd.displayurl,
            clickTrackers: nativeAd.link.click_trackers,
            impressionTrackers: nativeAd.impression_trackers,
            javascriptTrackers: jsTrackers
          };

          if (nativeAd.main_img) {
            bid['native'].image = {
              url: nativeAd.main_img.url,
              height: nativeAd.main_img.height,
              width: nativeAd.main_img.width
            };
          }

          if (nativeAd.icon) {
            bid['native'].icon = {
              url: nativeAd.icon.url,
              height: nativeAd.icon.height,
              width: nativeAd.icon.width
            };
          }
        } else {
          _extends(bid, {
            width: rtbBid.rtb.banner.width,
            height: rtbBid.rtb.banner.height,
            ad: rtbBid.rtb.banner.content
          });

          try {
            var url = rtbBid.rtb.trackers[0].impression_urls[0];

            var tracker = __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["createTrackPixelHtml"](url);

            bid.ad += tracker;
          } catch (error) {
            __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["logError"]('Error appending tracking pixel', error);
          }
        }

        return bid;
      }

      function bidToTag(bid) {
        var tag = {};
        tag.sizes = transformSizes(bid.sizes);
        tag.primary_size = tag.sizes[0];
        tag.ad_types = [];
        tag.uuid = bid.bidId;

        if (bid.params.placementId) {
          tag.id = parseInt(bid.params.placementId, 10);
        } else {
          tag.code = bid.params.invCode;
        }

        tag.allow_smaller_sizes = bid.params.allowSmallerSizes || false;
        tag.use_pmt_rule = bid.params.usePaymentRule || false;
        tag.prebid = true;
        tag.disable_psa = true;

        if (bid.params.reserve) {
          tag.reserve = bid.params.reserve;
        }

        if (bid.params.position) {
          tag.position = {
            'above': 1,
            'below': 2
          }[bid.params.position] || 0;
        }

        if (bid.params.trafficSourceCode) {
          tag.traffic_source_code = bid.params.trafficSourceCode;
        }

        if (bid.params.privateSizes) {
          tag.private_sizes = transformSizes(bid.params.privateSizes);
        }

        if (bid.params.supplyType) {
          tag.supply_type = bid.params.supplyType;
        }

        if (bid.params.pubClick) {
          tag.pubclick = bid.params.pubClick;
        }

        if (bid.params.extInvCode) {
          tag.ext_inv_code = bid.params.extInvCode;
        }

        if (bid.params.externalImpId) {
          tag.external_imp_id = bid.params.externalImpId;
        }

        if (!__WEBPACK_IMPORTED_MODULE_1__src_utils_js__["isEmpty"](bid.params.keywords)) {
          var keywords = __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["transformBidderParamKeywords"](bid.params.keywords);

          if (keywords.length > 0) {
            keywords.forEach(deleteValues);
          }

          tag.keywords = keywords;
        }

        if (bid.mediaType === __WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["c"
        /* NATIVE */
        ] || __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["deepAccess"](bid, "mediaTypes.".concat(__WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["c"
        /* NATIVE */
        ]))) {
          tag.ad_types.push(__WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["c"
          /* NATIVE */
          ]);

          if (tag.sizes.length === 0) {
            tag.sizes = transformSizes([1, 1]);
          }

          if (bid.nativeParams) {
            var nativeRequest = buildNativeRequest(bid.nativeParams);
            tag[__WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["c"
            /* NATIVE */
            ]] = {
              layouts: [nativeRequest]
            };
          }
        }

        var videoMediaType = __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["deepAccess"](bid, "mediaTypes.".concat(__WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["d"
        /* VIDEO */
        ]));

        var context = __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["deepAccess"](bid, 'mediaTypes.video.context');

        if (videoMediaType && context === 'adpod') {
          tag.hb_source = 7;
        } else {
          tag.hb_source = 1;
        }

        if (bid.mediaType === __WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["d"
        /* VIDEO */
        ] || videoMediaType) {
          tag.ad_types.push(__WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["d"
          /* VIDEO */
          ]);
        } // instream gets vastUrl, outstream gets vastXml


        if (bid.mediaType === __WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["d"
        /* VIDEO */
        ] || videoMediaType && context !== 'outstream') {
          tag.require_asset_url = true;
        }

        if (bid.params.video) {
          tag.video = {}; // place any valid video params on the tag

          Object.keys(bid.params.video).filter(function (param) {
            return __WEBPACK_IMPORTED_MODULE_7_core_js_library_fn_array_includes_js___default()(VIDEO_TARGETING, param);
          }).forEach(function (param) {
            return tag.video[param] = bid.params.video[param];
          });
        }

        if (bid.renderer) {
          tag.video = _extends({}, tag.video, {
            custom_renderer_present: true
          });
        }

        var adUnit = __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_find_js___default()(__WEBPACK_IMPORTED_MODULE_5__src_auctionManager_js__["a"
        /* auctionManager */
        ].getAdUnits(), function (au) {
          return bid.transactionId === au.transactionId;
        });

        if (adUnit && adUnit.mediaTypes && adUnit.mediaTypes.banner) {
          tag.ad_types.push(__WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["b"
          /* BANNER */
          ]);
        }

        if (tag.ad_types.length === 0) {
          delete tag.ad_types;
        }

        return tag;
      }
      /* Turn bid request sizes into ut-compatible format */


      function transformSizes(requestSizes) {
        var sizes = [];
        var sizeObj = {};

        if (__WEBPACK_IMPORTED_MODULE_1__src_utils_js__["isArray"](requestSizes) && requestSizes.length === 2 && !__WEBPACK_IMPORTED_MODULE_1__src_utils_js__["isArray"](requestSizes[0])) {
          sizeObj.width = parseInt(requestSizes[0], 10);
          sizeObj.height = parseInt(requestSizes[1], 10);
          sizes.push(sizeObj);
        } else if (_typeof(requestSizes) === 'object') {
          for (var i = 0; i < requestSizes.length; i++) {
            var size = requestSizes[i];
            sizeObj = {};
            sizeObj.width = parseInt(size[0], 10);
            sizeObj.height = parseInt(size[1], 10);
            sizes.push(sizeObj);
          }
        }

        return sizes;
      }

      function hasUserInfo(bid) {
        return !!bid.params.user;
      }

      function hasMemberId(bid) {
        return !!parseInt(bid.params.member, 10);
      }

      function hasAppDeviceInfo(bid) {
        if (bid.params) {
          return !!bid.params.app;
        }
      }

      function hasAppId(bid) {
        if (bid.params && bid.params.app) {
          return !!bid.params.app.id;
        }

        return !!bid.params.app;
      }

      function hasDebug(bid) {
        return !!bid.debug;
      }

      function hasAdPod(bid) {
        return bid.mediaTypes && bid.mediaTypes.video && bid.mediaTypes.video.context === __WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["a"
        /* ADPOD */
        ];
      }
      /**
       * Expand an adpod placement into a set of request objects according to the
       * total adpod duration and the range of duration seconds. Sets minduration/
       * maxduration video property according to requireExactDuration configuration
       */


      function createAdPodRequest(tags, adPodBid) {
        var _adPodBid$mediaTypes$ = adPodBid.mediaTypes.video,
            durationRangeSec = _adPodBid$mediaTypes$.durationRangeSec,
            requireExactDuration = _adPodBid$mediaTypes$.requireExactDuration;
        var numberOfPlacements = getAdPodPlacementNumber(adPodBid.mediaTypes.video);

        var maxDuration = __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["getMaxValueFromArray"](durationRangeSec);

        var tagToDuplicate = tags.filter(function (tag) {
          return tag.uuid === adPodBid.bidId;
        });

        var request = __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["fill"].apply(__WEBPACK_IMPORTED_MODULE_1__src_utils_js__, _toConsumableArray(tagToDuplicate).concat([numberOfPlacements]));

        if (requireExactDuration) {
          var divider = Math.ceil(numberOfPlacements / durationRangeSec.length);

          var chunked = __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["chunk"](request, divider); // each configured duration is set as min/maxduration for a subset of requests


          durationRangeSec.forEach(function (duration, index) {
            chunked[index].map(function (tag) {
              setVideoProperty(tag, 'minduration', duration);
              setVideoProperty(tag, 'maxduration', duration);
            });
          });
        } else {
          // all maxdurations should be the same
          request.map(function (tag) {
            return setVideoProperty(tag, 'maxduration', maxDuration);
          });
        }

        return request;
      }

      function getAdPodPlacementNumber(videoParams) {
        var adPodDurationSec = videoParams.adPodDurationSec,
            durationRangeSec = videoParams.durationRangeSec,
            requireExactDuration = videoParams.requireExactDuration;

        var minAllowedDuration = __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["getMinValueFromArray"](durationRangeSec);

        var numberOfPlacements = Math.floor(adPodDurationSec / minAllowedDuration);
        return requireExactDuration ? Math.max(numberOfPlacements, durationRangeSec.length) : numberOfPlacements;
      }

      function setVideoProperty(tag, key, value) {
        if (__WEBPACK_IMPORTED_MODULE_1__src_utils_js__["isEmpty"](tag.video)) {
          tag.video = {};
        }

        tag.video[key] = value;
      }

      function getRtbBid(tag) {
        return tag && tag.ads && tag.ads.length && __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_find_js___default()(tag.ads, function (ad) {
          return ad.rtb;
        });
      }

      function buildNativeRequest(params) {
        var request = {}; // map standard prebid native asset identifier to /ut parameters
        // e.g., tag specifies `body` but /ut only knows `description`.
        // mapping may be in form {tag: '<server name>'} or
        // {tag: {serverName: '<server name>', requiredParams: {...}}}

        Object.keys(params).forEach(function (key) {
          // check if one of the <server name> forms is used, otherwise
          // a mapping wasn't specified so pass the key straight through
          var requestKey = NATIVE_MAPPING[key] && NATIVE_MAPPING[key].serverName || NATIVE_MAPPING[key] || key; // required params are always passed on request

          var requiredParams = NATIVE_MAPPING[key] && NATIVE_MAPPING[key].requiredParams;
          request[requestKey] = _extends({}, requiredParams, params[key]); // convert the sizes of image/icon assets to proper format (if needed)

          var isImageAsset = !!(requestKey === NATIVE_MAPPING.image.serverName || requestKey === NATIVE_MAPPING.icon.serverName);

          if (isImageAsset && request[requestKey].sizes) {
            var sizes = request[requestKey].sizes;

            if (__WEBPACK_IMPORTED_MODULE_1__src_utils_js__["isArrayOfNums"](sizes) || __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["isArray"](sizes) && sizes.length > 0 && sizes.every(function (sz) {
              return __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["isArrayOfNums"](sz);
            })) {
              request[requestKey].sizes = transformSizes(request[requestKey].sizes);
            }
          }

          if (requestKey === NATIVE_MAPPING.privacyLink) {
            request.privacy_supported = true;
          }
        });
        return request;
      }

      function outstreamRender(bid) {
        // push to render queue because ANOutstreamVideo may not be loaded yet
        bid.renderer.push(function () {
          window.ANOutstreamVideo.renderAd({
            tagId: bid.adResponse.tag_id,
            sizes: [bid.getSize().split('x')],
            targetId: bid.adUnitCode,
            // target div id to render video
            uuid: bid.adResponse.uuid,
            adResponse: bid.adResponse,
            rendererOptions: bid.renderer.getConfig()
          }, handleOutstreamRendererEvents.bind(null, bid));
        });
      }

      function handleOutstreamRendererEvents(bid, id, eventName) {
        bid.renderer.handleVideoEvent({
          id: id,
          eventName: eventName
        });
      }

      function parseMediaType(rtbBid) {
        var adType = rtbBid.ad_type;

        if (adType === __WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["d"
        /* VIDEO */
        ]) {
          return __WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["d"
          /* VIDEO */
          ];
        } else if (adType === __WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["c"
        /* NATIVE */
        ]) {
          return __WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["c"
          /* NATIVE */
          ];
        } else {
          return __WEBPACK_IMPORTED_MODULE_4__src_mediaTypes_js__["b"
          /* BANNER */
          ];
        }
      }

      Object(__WEBPACK_IMPORTED_MODULE_3__src_adapters_bidderFactory_js__["registerBidder"])(spec);
      /***/
    }
  }, [209]);
  pbjsChunk([218], {
    /***/
    249:
    /***/
    function _(module, exports, __webpack_require__) {
      module.exports = __webpack_require__(250);
      /***/
    },

    /***/
    250:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "registerAdserver", function () {
        return registerAdserver;
      });
      /* harmony export (immutable) */


      __webpack_exports__["getAdserverCategoryHook"] = getAdserverCategoryHook;
      /* harmony export (immutable) */

      __webpack_exports__["initTranslation"] = initTranslation;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__src_config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__src_hook_js__ = __webpack_require__(13);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__src_ajax_js__ = __webpack_require__(4);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__src_utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__src_auction_js__ = __webpack_require__(42);
      /**
       * This module translates iab category to freewheel industry using translation mapping file
       * Publisher can set translation file by using setConfig method
       *
       * Example:
       * config.setConfig({
       *    'brandCategoryTranslation': {
       *      'translationFile': 'http://sample.com'
       *    }
       * });
       * If publisher has not defined translation file than prebid will use default prebid translation file provided here //cdn.jsdelivr.net/gh/prebid/category-mapping-file@1/freewheel-mapping.json
       */


      var DEFAULT_TRANSLATION_FILE_URL = 'https://cdn.jsdelivr.net/gh/prebid/category-mapping-file@1/freewheel-mapping.json';
      var DEFAULT_IAB_TO_FW_MAPPING_KEY = 'iabToFwMappingkey';
      var DEFAULT_IAB_TO_FW_MAPPING_KEY_PUB = 'iabToFwMappingkeyPub';
      var refreshInDays = 1;
      var registerAdserver = Object(__WEBPACK_IMPORTED_MODULE_1__src_hook_js__["b"
      /* hook */
      ])('async', function (adServer) {
        var url;

        if (adServer === 'freewheel') {
          url = DEFAULT_TRANSLATION_FILE_URL;
          initTranslation(url, DEFAULT_IAB_TO_FW_MAPPING_KEY);
        }
      }, 'registerAdserver');
      registerAdserver();

      function getAdserverCategoryHook(fn, adUnitCode, bid) {
        if (!bid) {
          return fn.call(this, adUnitCode); // if no bid, call original and let it display warnings
        }

        if (!__WEBPACK_IMPORTED_MODULE_0__src_config_js__["b"
        /* config */
        ].getConfig('adpod.brandCategoryExclusion')) {
          return fn.call(this, adUnitCode, bid);
        }

        var localStorageKey = __WEBPACK_IMPORTED_MODULE_0__src_config_js__["b"
        /* config */
        ].getConfig('brandCategoryTranslation.translationFile') ? DEFAULT_IAB_TO_FW_MAPPING_KEY_PUB : DEFAULT_IAB_TO_FW_MAPPING_KEY;

        if (bid.meta && !bid.meta.adServerCatId) {
          var mapping = Object(__WEBPACK_IMPORTED_MODULE_3__src_utils_js__["getDataFromLocalStorage"])(localStorageKey);

          if (mapping) {
            try {
              mapping = JSON.parse(mapping);
            } catch (error) {
              Object(__WEBPACK_IMPORTED_MODULE_3__src_utils_js__["logError"])('Failed to parse translation mapping file');
            }

            if (bid.meta.iabSubCatId && mapping['mapping'] && mapping['mapping'][bid.meta.iabSubCatId]) {
              bid.meta.adServerCatId = mapping['mapping'][bid.meta.iabSubCatId]['id'];
            } else {
              // This bid will be automatically ignored by adpod module as adServerCatId was not found
              bid.meta.adServerCatId = undefined;
            }
          } else {
            Object(__WEBPACK_IMPORTED_MODULE_3__src_utils_js__["logError"])('Translation mapping data not found in local storage');
          }
        }

        fn.call(this, adUnitCode, bid);
      }

      function initTranslation(url, localStorageKey) {
        Object(__WEBPACK_IMPORTED_MODULE_1__src_hook_js__["d"
        /* setupBeforeHookFnOnce */
        ])(__WEBPACK_IMPORTED_MODULE_4__src_auction_js__["c"
        /* addBidResponse */
        ], getAdserverCategoryHook, 50);
        var mappingData = Object(__WEBPACK_IMPORTED_MODULE_3__src_utils_js__["getDataFromLocalStorage"])(localStorageKey);

        if (!mappingData || Object(__WEBPACK_IMPORTED_MODULE_3__src_utils_js__["timestamp"])() < mappingData.lastUpdated + refreshInDays * 24 * 60 * 60 * 1000) {
          Object(__WEBPACK_IMPORTED_MODULE_2__src_ajax_js__["a"
          /* ajax */
          ])(url, {
            success: function success(response) {
              try {
                response = JSON.parse(response);
                response['lastUpdated'] = Object(__WEBPACK_IMPORTED_MODULE_3__src_utils_js__["timestamp"])();
                Object(__WEBPACK_IMPORTED_MODULE_3__src_utils_js__["setDataInLocalStorage"])(localStorageKey, JSON.stringify(response));
              } catch (error) {
                Object(__WEBPACK_IMPORTED_MODULE_3__src_utils_js__["logError"])('Failed to parse translation mapping file');
              }
            },
            error: function error() {
              Object(__WEBPACK_IMPORTED_MODULE_3__src_utils_js__["logError"])('Failed to load brand category translation file.');
            }
          });
        }
      }

      function setConfig(config) {
        if (config.translationFile) {
          // if publisher has defined the translation file, preload that file here
          initTranslation(config.translationFile, DEFAULT_IAB_TO_FW_MAPPING_KEY_PUB);
        }
      }

      __WEBPACK_IMPORTED_MODULE_0__src_config_js__["b"
      /* config */
      ].getConfig('brandCategoryTranslation', function (config) {
        return setConfig(config.brandCategoryTranslation);
      });
      /***/

    }
  }, [249]);
  pbjsChunk([209], {
    /***/
    267:
    /***/
    function _(module, exports, __webpack_require__) {
      module.exports = __webpack_require__(268);
      /***/
    },

    /***/
    268:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "userCMP", function () {
        return userCMP;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "consentTimeout", function () {
        return consentTimeout;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "allowAuction", function () {
        return allowAuction;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "gdprScope", function () {
        return gdprScope;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "staticConsentData", function () {
        return staticConsentData;
      });
      /* harmony export (immutable) */


      __webpack_exports__["requestBidsHook"] = requestBidsHook;
      /* harmony export (immutable) */

      __webpack_exports__["resetConsentData"] = resetConsentData;
      /* harmony export (immutable) */

      __webpack_exports__["setConsentConfig"] = setConsentConfig;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__src_utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__src_config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__src_adapterManager_js__ = __webpack_require__(7);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_includes_js__ = __webpack_require__(11);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_includes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_includes_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4_core_js_library_fn_string_includes_js__ = __webpack_require__(269);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4_core_js_library_fn_string_includes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_core_js_library_fn_string_includes_js__);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }
      /**
       * This module adds GDPR consentManagement support to prebid.js.  It interacts with
       * supported CMPs (Consent Management Platforms) to grab the user's consent information
       * and make it available for any GDPR supported adapters to read/pass this information to
       * their system.
       */


      var DEFAULT_CMP = 'iab';
      var DEFAULT_CONSENT_TIMEOUT = 10000;
      var DEFAULT_ALLOW_AUCTION_WO_CONSENT = true;
      var userCMP;
      var consentTimeout;
      var allowAuction;
      var gdprScope;
      var staticConsentData;
      var cmpVersion = 0;
      var consentData;
      var addedConsentHook = false; // add new CMPs here, with their dedicated lookup function

      var cmpCallMap = {
        'iab': lookupIabConsent,
        'static': lookupStaticConsentData
      };
      /**
       * This function reads the consent string from the config to obtain the consent information of the user.
       * @param {function(string)} cmpSuccess acts as a success callback when the value is read from config; pass along consentObject (string) from CMP
       * @param {function(string)} cmpError acts as an error callback while interacting with the config string; pass along an error message (string)
       * @param {object} hookConfig contains module related variables (see comment in requestBidsHook function)
       */

      function lookupStaticConsentData(cmpSuccess, cmpError, hookConfig) {
        cmpSuccess(staticConsentData, hookConfig);
      }
      /**
       * This function handles interacting with an IAB compliant CMP to obtain the consent information of the user.
       * Given the async nature of the CMP's API, we pass in acting success/error callback functions to exit this function
       * based on the appropriate result.
       * @param {function(string)} cmpSuccess acts as a success callback when CMP returns a value; pass along consentObject (string) from CMP
       * @param {function(string)} cmpError acts as an error callback while interacting with CMP; pass along an error message (string)
       * @param {object} hookConfig contains module related variables (see comment in requestBidsHook function)
       */


      function lookupIabConsent(cmpSuccess, cmpError, hookConfig) {
        function findCMP() {
          var f = window;
          var cmpFrame;
          var cmpFunction;

          while (!cmpFrame) {
            try {
              if (typeof f.__tcfapi === 'function' || typeof f.__cmp === 'function') {
                if (typeof f.__tcfapi === 'function') {
                  cmpVersion = 2;
                  cmpFunction = f.__tcfapi;
                } else {
                  cmpVersion = 1;
                  cmpFunction = f.__cmp;
                }

                cmpFrame = f;
                break;
              }
            } catch (e) {} // need separate try/catch blocks due to the exception errors thrown when trying to check for a frame that doesn't exist in 3rd party env


            try {
              if (f.frames['__tcfapiLocator']) {
                cmpVersion = 2;
                cmpFrame = f;
                break;
              }
            } catch (e) {}

            try {
              if (f.frames['__cmpLocator']) {
                cmpVersion = 1;
                cmpFrame = f;
                break;
              }
            } catch (e) {}

            if (f === window.top) break;
            f = f.parent;
          }

          return {
            cmpFrame: cmpFrame,
            cmpFunction: cmpFunction
          };
        }

        function v2CmpResponseCallback(tcfData, success) {
          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logInfo"]('Received a response from CMP', tcfData);

          if (success) {
            if (tcfData.eventStatus === 'tcloaded' || tcfData.eventStatus === 'useractioncomplete') {
              cmpSuccess(tcfData, hookConfig);
            } else if (tcfData.eventStatus === 'cmpuishown' && tcfData.tcString.length > 0 && tcfData.purposeOneTreatment === true) {
              cmpSuccess(tcfData, hookConfig);
            }
          } else {
            cmpError('CMP unable to register callback function.  Please check CMP setup.', hookConfig);
          }
        }

        function handleV1CmpResponseCallbacks() {
          var cmpResponse = {};

          function afterEach() {
            if (cmpResponse.getConsentData && cmpResponse.getVendorConsents) {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logInfo"]('Received all requested responses from CMP', cmpResponse);

              cmpSuccess(cmpResponse, hookConfig);
            }
          }

          return {
            consentDataCallback: function consentDataCallback(consentResponse) {
              cmpResponse.getConsentData = consentResponse;
              afterEach();
            },
            vendorConsentsCallback: function vendorConsentsCallback(consentResponse) {
              cmpResponse.getVendorConsents = consentResponse;
              afterEach();
            }
          };
        }

        var v1CallbackHandler = handleV1CmpResponseCallbacks();
        var cmpCallbacks = {};

        var _findCMP = findCMP(),
            cmpFrame = _findCMP.cmpFrame,
            cmpFunction = _findCMP.cmpFunction;

        if (!cmpFrame) {
          return cmpError('CMP not found.', hookConfig);
        } // to collect the consent information from the user, we perform two calls to the CMP in parallel:
        // first to collect the user's consent choices represented in an encoded string (via getConsentData)
        // second to collect the user's full unparsed consent information (via getVendorConsents)
        // the following code also determines where the CMP is located and uses the proper workflow to communicate with it:
        // check to see if CMP is found on the same window level as prebid and call it directly if so
        // check to see if prebid is in a safeframe (with CMP support)
        // else assume prebid may be inside an iframe and use the IAB CMP locator code to see if CMP's located in a higher parent window. this works in cross domain iframes
        // if the CMP is not found, the iframe function will call the cmpError exit callback to abort the rest of the CMP workflow


        if (__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isFn"](cmpFunction)) {
          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logInfo"]('Detected CMP API is directly accessible, calling it now...');

          if (cmpVersion === 1) {
            cmpFunction('getConsentData', null, v1CallbackHandler.consentDataCallback);
            cmpFunction('getVendorConsents', null, v1CallbackHandler.vendorConsentsCallback);
          } else if (cmpVersion === 2) {
            cmpFunction('addEventListener', cmpVersion, v2CmpResponseCallback);
          }
        } else if (cmpVersion === 1 && inASafeFrame() && typeof window.$sf.ext.cmp === 'function') {
          // this safeframe workflow is only supported with TCF v1 spec; the v2 recommends to use the iframe postMessage route instead (even if you are in a safeframe).
          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logInfo"]('Detected Prebid.js is encased in a SafeFrame and CMP is registered, calling it now...');

          callCmpWhileInSafeFrame('getConsentData', v1CallbackHandler.consentDataCallback);
          callCmpWhileInSafeFrame('getVendorConsents', v1CallbackHandler.vendorConsentsCallback);
        } else {
          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logInfo"]('Detected CMP is outside the current iframe where Prebid.js is located, calling it now...');

          if (cmpVersion === 1) {
            callCmpWhileInIframe('getConsentData', cmpFrame, v1CallbackHandler.consentDataCallback);
            callCmpWhileInIframe('getVendorConsents', cmpFrame, v1CallbackHandler.vendorConsentsCallback);
          } else if (cmpVersion === 2) {
            callCmpWhileInIframe('addEventListener', cmpFrame, v2CmpResponseCallback);
          }
        }

        function inASafeFrame() {
          return !!(window.$sf && window.$sf.ext);
        }

        function callCmpWhileInSafeFrame(commandName, callback) {
          function sfCallback(msgName, data) {
            if (msgName === 'cmpReturn') {
              var responseObj = commandName === 'getConsentData' ? data.vendorConsentData : data.vendorConsents;
              callback(responseObj);
            }
          } // find sizes from adUnits object


          var adUnits = hookConfig.adUnits;
          var width = 1;
          var height = 1;

          if (Array.isArray(adUnits) && adUnits.length > 0) {
            var sizes = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["getAdUnitSizes"](adUnits[0]);

            width = sizes[0][0];
            height = sizes[0][1];
          }

          window.$sf.ext.register(width, height, sfCallback);
          window.$sf.ext.cmp(commandName);
        }

        function callCmpWhileInIframe(commandName, cmpFrame, moduleCallback) {
          var apiName = cmpVersion === 2 ? '__tcfapi' : '__cmp';
          /* Setup up a __cmp function to do the postMessage and stash the callback.
            This function behaves (from the caller's perspective identicially to the in-frame __cmp call */

          window[apiName] = function (cmd, arg, callback) {
            var callId = Math.random() + '';
            var callName = "".concat(apiName, "Call");

            var msg = _defineProperty({}, callName, {
              command: cmd,
              parameter: arg,
              callId: callId
            });

            if (cmpVersion !== 1) msg[callName].version = cmpVersion;
            cmpCallbacks[callId] = callback;
            cmpFrame.postMessage(msg, '*');
          };
          /** when we get the return message, call the stashed callback */


          window.addEventListener('message', readPostMessageResponse, false); // call CMP

          window[apiName](commandName, null, moduleCallback);

          function readPostMessageResponse(event) {
            var cmpDataPkgName = "".concat(apiName, "Return");
            var json = typeof event.data === 'string' && __WEBPACK_IMPORTED_MODULE_4_core_js_library_fn_string_includes_js___default()(event.data, cmpDataPkgName) ? JSON.parse(event.data) : event.data;

            if (json[cmpDataPkgName] && json[cmpDataPkgName].callId) {
              var payload = json[cmpDataPkgName]; // TODO - clean up this logic (move listeners?); we have duplicate messages responses because 2 eventlisteners are active from the 2 cmp requests running in parallel

              if (typeof cmpCallbacks[payload.callId] !== 'undefined') {
                cmpCallbacks[payload.callId](payload.returnValue, payload.success);
              }
            }
          }
        }
      }
      /**
       * If consentManagement module is enabled (ie included in setConfig), this hook function will attempt to fetch the
       * user's encoded consent string from the supported CMP.  Once obtained, the module will store this
       * data as part of a gdprConsent object which gets transferred to adapterManager's gdprDataHandler object.
       * This information is later added into the bidRequest object for any supported adapters to read/pass along to their system.
       * @param {object} reqBidsConfigObj required; This is the same param that's used in pbjs.requestBids.
       * @param {function} fn required; The next function in the chain, used by hook.js
       */


      function requestBidsHook(fn, reqBidsConfigObj) {
        // preserves all module related variables for the current auction instance (used primiarily for concurrent auctions)
        var hookConfig = {
          context: this,
          args: [reqBidsConfigObj],
          nextFn: fn,
          adUnits: reqBidsConfigObj.adUnits || pbjs.adUnits,
          bidsBackHandler: reqBidsConfigObj.bidsBackHandler,
          haveExited: false,
          timer: null
        }; // in case we already have consent (eg during bid refresh)

        if (consentData) {
          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logInfo"]('User consent information already known.  Pulling internally stored information...');

          return exitModule(null, hookConfig);
        }

        if (!__WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_includes_js___default()(Object.keys(cmpCallMap), userCMP)) {
          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"]("CMP framework (".concat(userCMP, ") is not a supported framework.  Aborting consentManagement module and resuming auction."));

          return hookConfig.nextFn.apply(hookConfig.context, hookConfig.args);
        }

        cmpCallMap[userCMP].call(this, processCmpData, cmpFailed, hookConfig); // only let this code run if module is still active (ie if the callbacks used by CMPs haven't already finished)

        if (!hookConfig.haveExited) {
          if (consentTimeout === 0) {
            processCmpData(undefined, hookConfig);
          } else {
            hookConfig.timer = setTimeout(cmpTimedOut.bind(null, hookConfig), consentTimeout);
          }
        }
      }
      /**
       * This function checks the consent data provided by CMP to ensure it's in an expected state.
       * If it's bad, we exit the module depending on config settings.
       * If it's good, then we store the value and exits the module.
       * @param {object} consentObject required; object returned by CMP that contains user's consent choices
       * @param {object} hookConfig contains module related variables (see comment in requestBidsHook function)
       */


      function processCmpData(consentObject, hookConfig) {
        function checkV1Data(consentObject) {
          var gdprApplies = consentObject && consentObject.getConsentData && consentObject.getConsentData.gdprApplies;
          return !!(typeof gdprApplies !== 'boolean' || gdprApplies === true && !(__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isStr"](consentObject.getConsentData.consentData) && __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isPlainObject"](consentObject.getVendorConsents) && Object.keys(consentObject.getVendorConsents).length > 1));
        }

        function checkV2Data() {
          var gdprApplies = consentObject && consentObject.gdprApplies;
          var tcString = consentObject && consentObject.tcString;
          return !!(typeof gdprApplies !== 'boolean' || gdprApplies === true && !__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isStr"](tcString));
        } // do extra things for static config


        if (userCMP === 'static') {
          cmpVersion = consentObject.getConsentData ? 1 : consentObject.getTCData ? 2 : 0; // remove extra layer in static v2 data object so it matches normal v2 CMP object for processing step

          if (cmpVersion === 2) {
            consentObject = consentObject.getTCData;
          }
        } // determine which set of checks to run based on cmpVersion


        var checkFn = cmpVersion === 1 ? checkV1Data : cmpVersion === 2 ? checkV2Data : null;

        if (__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isFn"](checkFn)) {
          if (checkFn(consentObject)) {
            cmpFailed("CMP returned unexpected value during lookup process.", hookConfig, consentObject);
          } else {
            clearTimeout(hookConfig.timer);
            storeConsentData(consentObject);
            exitModule(null, hookConfig);
          }
        } else {
          cmpFailed('Unable to derive CMP version to process data.  Consent object does not conform to TCF v1 or v2 specs.', hookConfig, consentObject);
        }
      }
      /**
       * General timeout callback when interacting with CMP takes too long.
       */


      function cmpTimedOut(hookConfig) {
        cmpFailed('CMP workflow exceeded timeout threshold.', hookConfig);
      }
      /**
       * This function contains the controlled steps to perform when there's a problem with CMP.
       * @param {string} errMsg required; should be a short descriptive message for why the failure/issue happened.
       * @param {object} hookConfig contains module related variables (see comment in requestBidsHook function)
       * @param {object} extraArgs contains additional data that's passed along in the error/warning messages for easier debugging
      */


      function cmpFailed(errMsg, hookConfig, extraArgs) {
        clearTimeout(hookConfig.timer); // still set the consentData to undefined when there is a problem as per config options

        if (allowAuction) {
          storeConsentData(undefined);
        }

        exitModule(errMsg, hookConfig, extraArgs);
      }
      /**
       * Stores CMP data locally in module and then invokes gdprDataHandler.setConsentData() to make information available in adaptermanger.js for later in the auction
       * @param {object} cmpConsentObject required; an object representing user's consent choices (can be undefined in certain use-cases for this function only)
       */


      function storeConsentData(cmpConsentObject) {
        if (cmpVersion === 1) {
          consentData = {
            consentString: cmpConsentObject ? cmpConsentObject.getConsentData.consentData : undefined,
            vendorData: cmpConsentObject ? cmpConsentObject.getVendorConsents : undefined,
            gdprApplies: cmpConsentObject ? cmpConsentObject.getConsentData.gdprApplies : gdprScope
          };
        } else {
          consentData = {
            consentString: cmpConsentObject ? cmpConsentObject.tcString : undefined,
            vendorData: cmpConsentObject || undefined,
            gdprApplies: cmpConsentObject ? cmpConsentObject.gdprApplies : gdprScope
          };
        }

        consentData.apiVersion = cmpVersion;

        __WEBPACK_IMPORTED_MODULE_2__src_adapterManager_js__["gdprDataHandler"].setConsentData(consentData);
      }
      /**
       * This function handles the exit logic for the module.
       * While there are several paths in the module's logic to call this function, we only allow 1 of the 3 potential exits to happen before suppressing others.
       *
       * We prevent multiple exits to avoid conflicting messages in the console depending on certain scenarios.
       * One scenario could be auction was canceled due to timeout with CMP being reached.
       * While the timeout is the accepted exit and runs first, the CMP's callback still tries to process the user's data (which normally leads to a good exit).
       * In this case, the good exit will be suppressed since we already decided to cancel the auction.
       *
       * Three exit paths are:
       * 1. good exit where auction runs (CMP data is processed normally).
       * 2. bad exit but auction still continues (warning message is logged, CMP data is undefined and still passed along).
       * 3. bad exit with auction canceled (error message is logged).
       * @param {string} errMsg optional; only to be used when there was a 'bad' exit.  String is a descriptive message for the failure/issue encountered.
       * @param {object} hookConfig contains module related variables (see comment in requestBidsHook function)
       * @param {object} extraArgs contains additional data that's passed along in the error/warning messages for easier debugging
       */


      function exitModule(errMsg, hookConfig, extraArgs) {
        if (hookConfig.haveExited === false) {
          hookConfig.haveExited = true;
          var context = hookConfig.context;
          var args = hookConfig.args;
          var nextFn = hookConfig.nextFn;

          if (errMsg) {
            if (allowAuction) {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"](errMsg + ' Resuming auction without consent data as per consentManagement config.', extraArgs);

              nextFn.apply(context, args);
            } else {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"](errMsg + ' Canceling auction as per consentManagement config.', extraArgs);

              if (typeof hookConfig.bidsBackHandler === 'function') {
                hookConfig.bidsBackHandler();
              } else {
                __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]('Error executing bidsBackHandler');
              }
            }
          } else {
            nextFn.apply(context, args);
          }
        }
      }
      /**
       * Simply resets the module's consentData variable back to undefined, mainly for testing purposes
       */


      function resetConsentData() {
        consentData = undefined;
        userCMP = undefined;
        cmpVersion = 0;

        __WEBPACK_IMPORTED_MODULE_2__src_adapterManager_js__["gdprDataHandler"].setConsentData(null);
      }
      /**
       * A configuration function that initializes some module variables, as well as add a hook into the requestBids function
       * @param {{cmp:string, timeout:number, allowAuctionWithoutConsent:boolean, defaultGdprScope:boolean}} config required; consentManagement module config settings; cmp (string), timeout (int), allowAuctionWithoutConsent (boolean)
       */


      function setConsentConfig(config) {
        // if `config.gdpr` or `config.usp` exist, assume new config format.
        // else for backward compatability, just use `config`
        config = config.gdpr || config.usp ? config.gdpr : config;

        if (!config || _typeof(config) !== 'object') {
          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"]('consentManagement config not defined, exiting consent manager');

          return;
        }

        if (__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isStr"](config.cmpApi)) {
          userCMP = config.cmpApi;
        } else {
          userCMP = DEFAULT_CMP;

          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logInfo"]("consentManagement config did not specify cmp.  Using system default setting (".concat(DEFAULT_CMP, ")."));
        }

        if (__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isNumber"](config.timeout)) {
          consentTimeout = config.timeout;
        } else {
          consentTimeout = DEFAULT_CONSENT_TIMEOUT;

          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logInfo"]("consentManagement config did not specify timeout.  Using system default setting (".concat(DEFAULT_CONSENT_TIMEOUT, ")."));
        }

        if (typeof config.allowAuctionWithoutConsent === 'boolean') {
          allowAuction = config.allowAuctionWithoutConsent;
        } else {
          allowAuction = DEFAULT_ALLOW_AUCTION_WO_CONSENT;

          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logInfo"]("consentManagement config did not specify allowAuctionWithoutConsent.  Using system default setting (".concat(DEFAULT_ALLOW_AUCTION_WO_CONSENT, ")."));
        } // if true, then gdprApplies should be set to true


        gdprScope = config.defaultGdprScope === true;

        __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logInfo"]('consentManagement module has been activated...');

        if (userCMP === 'static') {
          if (__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isPlainObject"](config.consentData)) {
            staticConsentData = config.consentData;
            consentTimeout = 0;
          } else {
            __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]("consentManagement config with cmpApi: 'static' did not specify consentData. No consents will be available to adapters.");
          }
        }

        if (!addedConsentHook) {
          pbjs.requestBids.before(requestBidsHook, 50);
        }

        addedConsentHook = true;
      }

      __WEBPACK_IMPORTED_MODULE_1__src_config_js__["b"
      /* config */
      ].getConfig('consentManagement', function (config) {
        return setConsentConfig(config.consentManagement);
      });
      /***/

    }
  }, [267]);
  pbjsChunk([0], {
    /***/
    284:
    /***/
    function _(module, exports, __webpack_require__) {
      module.exports = __webpack_require__(285);
      /***/
    },

    /***/
    285:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "ADAPTER_VERSION", function () {
        return ADAPTER_VERSION;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "PROFILE_ID_PUBLISHERTAG", function () {
        return PROFILE_ID_PUBLISHERTAG;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "spec", function () {
        return spec;
      });
      /* harmony export (immutable) */


      __webpack_exports__["tryGetCriteoFastBid"] = tryGetCriteoFastBid;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__src_adloader_js__ = __webpack_require__(28);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__src_adapters_bidderFactory_js__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__src_config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__src_url_js__ = __webpack_require__(9);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__src_utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_find_js__ = __webpack_require__(12);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_find_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_find_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7_criteo_direct_rsa_validate_build_verify_js__ = __webpack_require__(286);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7_criteo_direct_rsa_validate_build_verify_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_criteo_direct_rsa_validate_build_verify_js__);

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      var ADAPTER_VERSION = 26;
      var BIDDER_CODE = 'criteo';
      var CDB_ENDPOINT = 'https://bidder.criteo.com/cdb';
      var CRITEO_VENDOR_ID = 91;
      var PROFILE_ID_INLINE = 207;
      var PROFILE_ID_PUBLISHERTAG = 185; // Unminified source code can be found in: https://github.com/Prebid-org/prebid-js-external-js-criteo/blob/master/dist/prod.js

      var PUBLISHER_TAG_URL = 'https://static.criteo.net/js/ld/publishertag.prebid.js';
      var FAST_BID_PUBKEY_E = 65537;
      var FAST_BID_PUBKEY_N = 'ztQYwCE5BU7T9CDM5he6rKoabstXRmkzx54zFPZkWbK530dwtLBDeaWBMxHBUT55CYyboR/EZ4efghPi3CoNGfGWezpjko9P6p2EwGArtHEeS4slhu/SpSIFMjG6fdrpRoNuIAMhq1Z+Pr/+HOd1pThFKeGFr2/NhtAg+TXAzaU=';
      /** @type {BidderSpec} */

      var spec = {
        code: BIDDER_CODE,
        supportedMediaTypes: [__WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["b"
        /* BANNER */
        ], __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["d"
        /* VIDEO */
        ], __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["c"
        /* NATIVE */
        ]],

        /**
         * @param {object} bid
         * @return {boolean}
         */
        isBidRequestValid: function isBidRequestValid(bid) {
          // either one of zoneId or networkId should be set
          if (!(bid && bid.params && (bid.params.zoneId || bid.params.networkId))) {
            return false;
          } // video media types requires some mandatory params


          if (hasVideoMediaType(bid)) {
            if (!hasValidVideoMediaType(bid)) {
              return false;
            }
          }

          return true;
        },

        /**
         * @param {BidRequest[]} bidRequests
         * @param {*} bidderRequest
         * @return {ServerRequest}
         */
        buildRequests: function buildRequests(bidRequests, bidderRequest) {
          var url;
          var data;

          _extends(bidderRequest, {
            ceh: __WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
            /* config */
            ].getConfig('criteo.ceh')
          }); // If publisher tag not already loaded try to get it from fast bid


          if (!publisherTagAvailable()) {
            window.Criteo = window.Criteo || {};
            window.Criteo.usePrebidEvents = false;
            tryGetCriteoFastBid(); // Reload the PublisherTag after the timeout to ensure FastBid is up-to-date and tracking done properly

            setTimeout(function () {
              Object(__WEBPACK_IMPORTED_MODULE_0__src_adloader_js__["a"
              /* loadExternalScript */
              ])(PUBLISHER_TAG_URL, BIDDER_CODE);
            }, bidderRequest.timeout);
          }

          if (publisherTagAvailable()) {
            // eslint-disable-next-line no-undef
            var adapter = new Criteo.PubTag.Adapters.Prebid(PROFILE_ID_PUBLISHERTAG, ADAPTER_VERSION, bidRequests, bidderRequest, "3.13.0-pre");

            var enableSendAllBids = __WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
            /* config */
            ].getConfig('enableSendAllBids');

            if (adapter.setEnableSendAllBids && typeof adapter.setEnableSendAllBids === 'function' && typeof enableSendAllBids === 'boolean') {
              adapter.setEnableSendAllBids(enableSendAllBids);
            }

            url = adapter.buildCdbUrl();
            data = adapter.buildCdbRequest();
          } else {
            var context = buildContext(bidRequests, bidderRequest);
            url = buildCdbUrl(context);
            data = buildCdbRequest(context, bidRequests, bidderRequest);
          }

          if (data) {
            return {
              method: 'POST',
              url: url,
              data: data,
              bidRequests: bidRequests
            };
          }
        },

        /**
         * @param {*} response
         * @param {ServerRequest} request
         * @return {Bid[]}
         */
        interpretResponse: function interpretResponse(response, request) {
          var body = response.body || response;

          if (publisherTagAvailable()) {
            // eslint-disable-next-line no-undef
            var adapter = Criteo.PubTag.Adapters.Prebid.GetAdapter(request);

            if (adapter) {
              return adapter.interpretResponse(body, request);
            }
          }

          var bids = [];

          if (body && body.slots && __WEBPACK_IMPORTED_MODULE_5__src_utils_js__["isArray"](body.slots)) {
            body.slots.forEach(function (slot) {
              var bidRequest = __WEBPACK_IMPORTED_MODULE_6_core_js_library_fn_array_find_js___default()(request.bidRequests, function (b) {
                return b.adUnitCode === slot.impid && (!b.params.zoneId || parseInt(b.params.zoneId) === slot.zoneid);
              });

              var bidId = bidRequest.bidId;
              var bid = {
                requestId: bidId,
                adId: slot.bidId || __WEBPACK_IMPORTED_MODULE_5__src_utils_js__["getUniqueIdentifierStr"](),
                cpm: slot.cpm,
                currency: slot.currency,
                netRevenue: true,
                ttl: slot.ttl || 60,
                creativeId: bidId,
                width: slot.width,
                height: slot.height,
                dealId: slot.dealCode
              };

              if (slot["native"]) {
                if (bidRequest.params.nativeCallback) {
                  bid.ad = createNativeAd(bidId, slot["native"], bidRequest.params.nativeCallback);
                } else if (__WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
                /* config */
                ].getConfig('enableSendAllBids') === true) {
                  return;
                } else {
                  bid["native"] = createPrebidNativeAd(slot["native"]);
                  bid.mediaType = __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["c"
                  /* NATIVE */
                  ];
                }
              } else if (slot.video) {
                bid.vastUrl = slot.displayurl;
                bid.mediaType = __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["d"
                /* VIDEO */
                ];
              } else {
                bid.ad = slot.creative;
              }

              bids.push(bid);
            });
          }

          return bids;
        },

        /**
         * @param {TimedOutBid} timeoutData
         */
        onTimeout: function onTimeout(timeoutData) {
          if (publisherTagAvailable()) {
            // eslint-disable-next-line no-undef
            var adapter = Criteo.PubTag.Adapters.Prebid.GetAdapter(timeoutData.auctionId);
            adapter.handleBidTimeout();
          }
        },

        /**
         * @param {Bid} bid
         */
        onBidWon: function onBidWon(bid) {
          if (publisherTagAvailable()) {
            // eslint-disable-next-line no-undef
            var adapter = Criteo.PubTag.Adapters.Prebid.GetAdapter(bid.auctionId);
            adapter.handleBidWon(bid);
          }
        },

        /**
         * @param {Bid} bid
         */
        onSetTargeting: function onSetTargeting(bid) {
          if (publisherTagAvailable()) {
            // eslint-disable-next-line no-undef
            var adapter = Criteo.PubTag.Adapters.Prebid.GetAdapter(bid.auctionId);
            adapter.handleSetTargeting(bid);
          }
        }
      };
      /**
       * @return {boolean}
       */

      function publisherTagAvailable() {
        // eslint-disable-next-line no-undef
        return typeof Criteo !== 'undefined' && Criteo.PubTag && Criteo.PubTag.Adapters && Criteo.PubTag.Adapters.Prebid;
      }
      /**
       * @param {BidRequest[]} bidRequests
       * @param bidderRequest
       */


      function buildContext(bidRequests, bidderRequest) {
        var referrer = '';

        if (bidderRequest && bidderRequest.refererInfo) {
          referrer = bidderRequest.refererInfo.referer;
        }

        var queryString = Object(__WEBPACK_IMPORTED_MODULE_4__src_url_js__["c"
        /* parse */
        ])(referrer).search;
        var context = {
          url: referrer,
          debug: queryString['pbt_debug'] === '1',
          noLog: queryString['pbt_nolog'] === '1',
          amp: false
        };
        bidRequests.forEach(function (bidRequest) {
          if (bidRequest.params.integrationMode === 'amp') {
            context.amp = true;
          }
        });
        return context;
      }
      /**
       * @param {CriteoContext} context
       * @return {string}
       */


      function buildCdbUrl(context) {
        var url = CDB_ENDPOINT;
        url += '?profileId=' + PROFILE_ID_INLINE;
        url += '&av=' + String(ADAPTER_VERSION);
        url += '&wv=' + encodeURIComponent("3.13.0-pre");
        url += '&cb=' + String(Math.floor(Math.random() * 99999999999));

        if (context.amp) {
          url += '&im=1';
        }

        if (context.debug) {
          url += '&debug=1';
        }

        if (context.noLog) {
          url += '&nolog=1';
        }

        return url;
      }
      /**
       * @param {CriteoContext} context
       * @param {BidRequest[]} bidRequests
       * @return {*}
       */


      function buildCdbRequest(context, bidRequests, bidderRequest) {
        var networkId;
        var request = {
          publisher: {
            url: context.url
          },
          slots: bidRequests.map(function (bidRequest) {
            networkId = bidRequest.params.networkId || networkId;
            var slot = {
              impid: bidRequest.adUnitCode,
              transactionid: bidRequest.transactionId,
              auctionId: bidRequest.auctionId,
              sizes: getBannerSizes(bidRequest)
            };

            if (bidRequest.params.zoneId) {
              slot.zoneid = bidRequest.params.zoneId;
            }

            if (bidRequest.params.publisherSubId) {
              slot.publishersubid = bidRequest.params.publisherSubId;
            }

            if (bidRequest.params.nativeCallback || __WEBPACK_IMPORTED_MODULE_5__src_utils_js__["deepAccess"](bidRequest, "mediaTypes.".concat(__WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["c"
            /* NATIVE */
            ]))) {
              slot["native"] = true;
            }

            if (hasVideoMediaType(bidRequest)) {
              var video = {
                playersizes: getVideoSizes(bidRequest),
                mimes: bidRequest.mediaTypes.video.mimes,
                protocols: bidRequest.mediaTypes.video.protocols,
                maxduration: bidRequest.mediaTypes.video.maxduration,
                api: bidRequest.mediaTypes.video.api
              };
              video.skip = bidRequest.params.video.skip;
              video.placement = bidRequest.params.video.placement;
              video.minduration = bidRequest.params.video.minduration;
              video.playbackmethod = bidRequest.params.video.playbackmethod;
              video.startdelay = bidRequest.params.video.startdelay;
              slot.video = video;
            }

            return slot;
          })
        };

        if (networkId) {
          request.publisher.networkid = networkId;
        }

        request.user = {};

        if (bidderRequest && bidderRequest.ceh) {
          request.user.ceh = bidderRequest.ceh;
        }

        if (bidderRequest && bidderRequest.gdprConsent) {
          request.gdprConsent = {};

          if (typeof bidderRequest.gdprConsent.gdprApplies !== 'undefined') {
            request.gdprConsent.gdprApplies = !!bidderRequest.gdprConsent.gdprApplies;
          }

          if (bidderRequest.gdprConsent.vendorData && bidderRequest.gdprConsent.vendorData.vendorConsents && typeof bidderRequest.gdprConsent.vendorData.vendorConsents[CRITEO_VENDOR_ID.toString(10)] !== 'undefined') {
            request.gdprConsent.consentGiven = !!bidderRequest.gdprConsent.vendorData.vendorConsents[CRITEO_VENDOR_ID.toString(10)];
          }

          if (typeof bidderRequest.gdprConsent.consentString !== 'undefined') {
            request.gdprConsent.consentData = bidderRequest.gdprConsent.consentString;
          }
        }

        if (bidderRequest && bidderRequest.uspConsent) {
          request.user.uspIab = bidderRequest.uspConsent;
        }

        return request;
      }

      function getVideoSizes(bidRequest) {
        return parseSizes(__WEBPACK_IMPORTED_MODULE_5__src_utils_js__["deepAccess"](bidRequest, 'mediaTypes.video.playerSize'));
      }

      function getBannerSizes(bidRequest) {
        return parseSizes(__WEBPACK_IMPORTED_MODULE_5__src_utils_js__["deepAccess"](bidRequest, 'mediaTypes.banner.sizes') || bidRequest.sizes);
      }

      function parseSize(size) {
        return size[0] + 'x' + size[1];
      }

      function parseSizes(sizes) {
        if (Array.isArray(sizes[0])) {
          // is there several sizes ? (ie. [[728,90],[200,300]])
          return sizes.map(function (size) {
            return parseSize(size);
          });
        }

        return [parseSize(sizes)]; // or a single one ? (ie. [728,90])
      }

      function hasVideoMediaType(bidRequest) {
        if (__WEBPACK_IMPORTED_MODULE_5__src_utils_js__["deepAccess"](bidRequest, 'params.video') === undefined) {
          return false;
        }

        return __WEBPACK_IMPORTED_MODULE_5__src_utils_js__["deepAccess"](bidRequest, 'mediaTypes.video') !== undefined;
      }

      function hasValidVideoMediaType(bidRequest) {
        var isValid = true;
        var requiredMediaTypesParams = ['mimes', 'playerSize', 'maxduration', 'protocols', 'api'];
        requiredMediaTypesParams.forEach(function (param) {
          if (__WEBPACK_IMPORTED_MODULE_5__src_utils_js__["deepAccess"](bidRequest, 'mediaTypes.video.' + param) === undefined) {
            isValid = false;

            __WEBPACK_IMPORTED_MODULE_5__src_utils_js__["logError"]('Criteo Bid Adapter: mediaTypes.video.' + param + ' is required');
          }
        });
        var requiredParams = ['skip', 'placement', 'playbackmethod'];
        requiredParams.forEach(function (param) {
          if (__WEBPACK_IMPORTED_MODULE_5__src_utils_js__["deepAccess"](bidRequest, 'params.video.' + param) === undefined) {
            isValid = false;

            __WEBPACK_IMPORTED_MODULE_5__src_utils_js__["logError"]('Criteo Bid Adapter: params.video.' + param + ' is required');
          }
        });

        if (isValid) {
          // We do not support long form for now, also we have to check that context & placement are consistent
          if (bidRequest.mediaTypes.video.context == 'instream' && bidRequest.params.video.placement === 1) {
            return true;
          } else if (bidRequest.mediaTypes.video.context == 'outstream' && bidRequest.params.video.placement !== 1) {
            return true;
          }
        }

        return false;
      }
      /**
       * Create prebid compatible native ad with native payload
       * @param {*} payload
       * @returns prebid native ad assets
       */


      function createPrebidNativeAd(payload) {
        return {
          title: payload.products[0].title,
          body: payload.products[0].description,
          sponsoredBy: payload.advertiser.description,
          icon: payload.advertiser.logo,
          image: payload.products[0].image,
          clickUrl: payload.products[0].click_url,
          privacyLink: payload.privacy.optout_click_url,
          privacyIcon: payload.privacy.optout_image_url,
          cta: payload.products[0].call_to_action,
          price: payload.products[0].price,
          impressionTrackers: payload.impression_pixels.map(function (pix) {
            return pix.url;
          })
        };
      }
      /**
       * @param {string} id
       * @param {*} payload
       * @param {*} callback
       * @return {string}
       */


      function createNativeAd(id, payload, callback) {
        // Store the callback and payload in a global object to be later accessed from the creative
        var slotsName = 'criteo_prebid_native_slots';
        window[slotsName] = window[slotsName] || {};
        window[slotsName][id] = {
          callback: callback,
          payload: payload
        }; // The creative is in an iframe so we have to get the callback and payload
        // from the parent window (doesn't work with safeframes)

        return "\n<script type=\"text/javascript\">\nfor (var i = 0; i < 10; ++i) {\n var slots = window.parent.".concat(slotsName, ";\n  if(!slots){continue;}\n  var responseSlot = slots[\"").concat(id, "\"];\n  responseSlot.callback(responseSlot.payload);\n  break;\n}\n</script>");
      }

      function tryGetCriteoFastBid() {
        try {
          var fastBidStorageKey = 'criteo_fast_bid';
          var hashPrefix = '// Hash: ';

          var fastBidFromStorage = __WEBPACK_IMPORTED_MODULE_5__src_utils_js__["getDataFromLocalStorage"](fastBidStorageKey);

          if (fastBidFromStorage !== null) {
            // The value stored must contain the file's encrypted hash as first line
            var firstLineEndPosition = fastBidFromStorage.indexOf('\n');
            var firstLine = fastBidFromStorage.substr(0, firstLineEndPosition).trim();

            if (firstLine.substr(0, hashPrefix.length) !== hashPrefix) {
              __WEBPACK_IMPORTED_MODULE_5__src_utils_js__["logWarn"]('No hash found in FastBid');

              __WEBPACK_IMPORTED_MODULE_5__src_utils_js__["removeDataFromLocalStorage"](fastBidStorageKey);
            } else {
              // Remove the hash part from the locally stored value
              var publisherTagHash = firstLine.substr(hashPrefix.length);
              var publisherTag = fastBidFromStorage.substr(firstLineEndPosition + 1);

              if (Object(__WEBPACK_IMPORTED_MODULE_7_criteo_direct_rsa_validate_build_verify_js__["verify"])(publisherTag, publisherTagHash, FAST_BID_PUBKEY_N, FAST_BID_PUBKEY_E)) {
                __WEBPACK_IMPORTED_MODULE_5__src_utils_js__["logInfo"]('Using Criteo FastBid');

                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.text = publisherTag;

                __WEBPACK_IMPORTED_MODULE_5__src_utils_js__["insertElement"](script);
              } else {
                __WEBPACK_IMPORTED_MODULE_5__src_utils_js__["logWarn"]('Invalid Criteo FastBid found');

                __WEBPACK_IMPORTED_MODULE_5__src_utils_js__["removeDataFromLocalStorage"](fastBidStorageKey);
              }
            }
          }
        } catch (e) {// Unable to get fast bid
        }
      }

      Object(__WEBPACK_IMPORTED_MODULE_1__src_adapters_bidderFactory_js__["registerBidder"])(spec);
      /***/
    },

    /***/
    286:
    /***/
    function _(module, exports, __webpack_require__) {
      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var jsbnLite_1 = __webpack_require__(287);

      var sha256_1 = __webpack_require__(288);

      function verify(code, hash, nStrPubKey, ePubKey) {
        var x = new jsbnLite_1.BigInteger(jsbnLite_1.b64toHex(hash));
        var m = new jsbnLite_1.BigInteger(jsbnLite_1.b64toHex(nStrPubKey));
        var r = x.modPowInt(ePubKey, m);
        return jsbnLite_1.removeExtraSymbols(r.toHexString()) === sha256_1.Sha256.hash(code);
      }

      exports.verify = verify;
      /***/
    },

    /***/
    287:
    /***/
    function _(module, exports, __webpack_require__) {
      Object.defineProperty(exports, "__esModule", {
        value: true
      }); // Bits per digit

      var dbits;

      var BigInteger =
      /** @class */
      function () {
        function BigInteger(a) {
          if (a !== null) {
            this.fromHexString(a);
          }
        }

        BigInteger.prototype.toHexString = function () {
          if (this.s < 0) {
            return "-" + this.negate().toHexString();
          }

          var k = 4;
          var km = (1 << k) - 1;
          var d;
          var m = false;
          var r = "";
          var i = this.t;
          var p = this.DB - i * this.DB % k;

          if (i-- > 0) {
            if (p < this.DB && (d = this[i] >> p) > 0) {
              m = true;
              r = int2char(d);
            }

            while (i >= 0) {
              if (p < k) {
                d = (this[i] & (1 << p) - 1) << k - p;
                d |= this[--i] >> (p += this.DB - k);
              } else {
                d = this[i] >> (p -= k) & km;

                if (p <= 0) {
                  p += this.DB;
                  --i;
                }
              }

              if (d > 0) {
                m = true;
              }

              if (m) {
                r += int2char(d);
              }
            }
          }

          return m ? r : "0";
        };

        BigInteger.prototype.fromHexString = function (s) {
          if (s === null) {
            return;
          }

          var k = 4;
          this.t = 0;
          this.s = 0;
          var i = s.length;
          var mi = false;
          var sh = 0;

          while (--i >= 0) {
            var x = intAt(s, i);

            if (x < 0) {
              if (s.charAt(i) == "-") {
                mi = true;
              }

              continue;
            }

            mi = false;

            if (sh == 0) {
              this[this.t++] = x;
            } else if (sh + k > this.DB) {
              this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
              this[this.t++] = x >> this.DB - sh;
            } else {
              this[this.t - 1] |= x << sh;
            }

            sh += k;

            if (sh >= this.DB) {
              sh -= this.DB;
            }
          }

          this.clamp();

          if (mi) {
            BigInteger.ZERO.subTo(this, this);
          }
        };

        BigInteger.prototype.negate = function () {
          var r = nbi();
          BigInteger.ZERO.subTo(this, r);
          return r;
        };

        BigInteger.prototype.abs = function () {
          return this.s < 0 ? this.negate() : this;
        };

        BigInteger.prototype.mod = function (a) {
          var r = nbi();
          this.abs().divRemTo(a, null, r);

          if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {
            a.subTo(r, r);
          }

          return r;
        };

        BigInteger.prototype.copyTo = function (r) {
          for (var i = this.t - 1; i >= 0; --i) {
            r[i] = this[i];
          }

          r.t = this.t;
          r.s = this.s;
        };

        BigInteger.prototype.lShiftTo = function (n, r) {
          var bs = n % this.DB;
          var cbs = this.DB - bs;
          var bm = (1 << cbs) - 1;
          var ds = Math.floor(n / this.DB);
          var c = this.s << bs & this.DM;

          for (var i = this.t - 1; i >= 0; --i) {
            r[i + ds + 1] = this[i] >> cbs | c;
            c = (this[i] & bm) << bs;
          }

          for (var i = ds - 1; i >= 0; --i) {
            r[i] = 0;
          }

          r[ds] = c;
          r.t = this.t + ds + 1;
          r.s = this.s;
          r.clamp();
        };

        BigInteger.prototype.invDigit = function () {
          if (this.t < 1) {
            return 0;
          }

          var x = this[0];

          if ((x & 1) == 0) {
            return 0;
          }

          var y = x & 3; // y == 1/x mod 2^2

          y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4

          y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8

          y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16
          // last step - calculate inverse mod DV directly;
          // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints

          y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits
          // we really want the negative inverse, and -DV < y < DV

          return y > 0 ? this.DV - y : -y;
        };

        BigInteger.prototype.dlShiftTo = function (n, r) {
          var i;

          for (i = this.t - 1; i >= 0; --i) {
            r[i + n] = this[i];
          }

          for (i = n - 1; i >= 0; --i) {
            r[i] = 0;
          }

          r.t = this.t + n;
          r.s = this.s;
        };

        BigInteger.prototype.squareTo = function (r) {
          var x = this.abs();
          var i = r.t = 2 * x.t;

          while (--i >= 0) {
            r[i] = 0;
          }

          for (i = 0; i < x.t - 1; ++i) {
            var c = x.am(i, x[i], r, 2 * i, 0, 1);

            if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
              r[i + x.t] -= x.DV;
              r[i + x.t + 1] = 1;
            }
          }

          if (r.t > 0) {
            r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
          }

          r.s = 0;
          r.clamp();
        };

        BigInteger.prototype.multiplyTo = function (a, r) {
          var x = this.abs();
          var y = a.abs();
          var i = x.t;
          r.t = i + y.t;

          while (--i >= 0) {
            r[i] = 0;
          }

          for (i = 0; i < y.t; ++i) {
            r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
          }

          r.s = 0;
          r.clamp();

          if (this.s != a.s) {
            BigInteger.ZERO.subTo(r, r);
          }
        };

        BigInteger.prototype.divRemTo = function (m, q, r) {
          var pm = m.abs();

          if (pm.t <= 0) {
            return;
          }

          var pt = this.abs();

          if (pt.t < pm.t) {
            if (q != null) {
              q.fromHexString("0");
            }

            if (r != null) {
              this.copyTo(r);
            }

            return;
          }

          if (r == null) {
            r = nbi();
          }

          var y = nbi();
          var ts = this.s;
          var ms = m.s;
          var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus

          if (nsh > 0) {
            pm.lShiftTo(nsh, y);
            pt.lShiftTo(nsh, r);
          } else {
            pm.copyTo(y);
            pt.copyTo(r);
          }

          var ys = y.t;
          var y0 = y[ys - 1];

          if (y0 == 0) {
            return;
          }

          var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
          var d1 = this.FV / yt;
          var d2 = (1 << this.F1) / yt;
          var e = 1 << this.F2;
          var i = r.t;
          var j = i - ys;
          var t = q == null ? nbi() : q;
          y.dlShiftTo(j, t);

          if (r.compareTo(t) >= 0) {
            r[r.t++] = 1;
            r.subTo(t, r);
          }

          BigInteger.ONE.dlShiftTo(ys, t);
          t.subTo(y, y); // "negative" y so we can replace sub with am later

          while (y.t < ys) {
            y[y.t++] = 0;
          }

          while (--j >= 0) {
            // Estimate quotient digit
            var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);

            if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
              // Try it out
              y.dlShiftTo(j, t);
              r.subTo(t, r);

              while (r[i] < --qd) {
                r.subTo(t, r);
              }
            }
          }

          if (q != null) {
            r.drShiftTo(ys, q);

            if (ts != ms) {
              BigInteger.ZERO.subTo(q, q);
            }
          }

          r.t = ys;
          r.clamp();

          if (nsh > 0) {
            r.rShiftTo(nsh, r);
          } // Denormalize remainder


          if (ts < 0) {
            BigInteger.ZERO.subTo(r, r);
          }
        };

        BigInteger.prototype.rShiftTo = function (n, r) {
          r.s = this.s;
          var ds = Math.floor(n / this.DB);

          if (ds >= this.t) {
            r.t = 0;
            return;
          }

          var bs = n % this.DB;
          var cbs = this.DB - bs;
          var bm = (1 << bs) - 1;
          r[0] = this[ds] >> bs;

          for (var i = ds + 1; i < this.t; ++i) {
            r[i - ds - 1] |= (this[i] & bm) << cbs;
            r[i - ds] = this[i] >> bs;
          }

          if (bs > 0) {
            r[this.t - ds - 1] |= (this.s & bm) << cbs;
          }

          r.t = this.t - ds;
          r.clamp();
        };

        BigInteger.prototype.drShiftTo = function (n, r) {
          for (var i = n; i < this.t; ++i) {
            r[i - n] = this[i];
          }

          r.t = Math.max(this.t - n, 0);
          r.s = this.s;
        };

        BigInteger.prototype.subTo = function (a, r) {
          var i = 0;
          var c = 0;
          var m = Math.min(a.t, this.t);

          while (i < m) {
            c += this[i] - a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
          }

          if (a.t < this.t) {
            c -= a.s;

            while (i < this.t) {
              c += this[i];
              r[i++] = c & this.DM;
              c >>= this.DB;
            }

            c += this.s;
          } else {
            c += this.s;

            while (i < a.t) {
              c -= a[i];
              r[i++] = c & this.DM;
              c >>= this.DB;
            }

            c -= a.s;
          }

          r.s = c < 0 ? -1 : 0;

          if (c < -1) {
            r[i++] = this.DV + c;
          } else if (c > 0) {
            r[i++] = c;
          }

          r.t = i;
          r.clamp();
        };

        BigInteger.prototype.clamp = function () {
          var c = this.s & this.DM;

          while (this.t > 0 && this[this.t - 1] == c) {
            --this.t;
          }
        };

        BigInteger.prototype.modPowInt = function (e, m) {
          var z;

          if (e < 256 || m.isEven()) {
            z = new Classic(m);
          } else {
            z = new Montgomery(m);
          }

          return this.exp(e, z);
        };

        BigInteger.prototype.exp = function (e, z) {
          if (e > 0xffffffff || e < 1) {
            return BigInteger.ONE;
          }

          var r = nbi();
          var r2 = nbi();
          var g = z.convert(this);
          var i = nbits(e) - 1;
          g.copyTo(r);

          while (--i >= 0) {
            z.sqrTo(r, r2);

            if ((e & 1 << i) > 0) {
              z.mulTo(r2, g, r);
            } else {
              var t = r;
              r = r2;
              r2 = t;
            }
          }

          return z.revert(r);
        };

        BigInteger.prototype.isEven = function () {
          return (this.t > 0 ? this[0] & 1 : this.s) == 0;
        };

        BigInteger.prototype.compareTo = function (a) {
          var r = this.s - a.s;

          if (r != 0) {
            return r;
          }

          var i = this.t;
          r = i - a.t;

          if (r != 0) {
            return this.s < 0 ? -r : r;
          }

          while (--i >= 0) {
            if ((r = this[i] - a[i]) != 0) {
              return r;
            }
          }

          return 0;
        };

        BigInteger.prototype.am1 = function (i, x, w, j, c, n) {
          while (--n >= 0) {
            var v = x * this[i++] + w[j] + c;
            c = Math.floor(v / 0x4000000);
            w[j++] = v & 0x3ffffff;
          }

          return c;
        }; // am2 avoids a big mult-and-extract completely.
        // Max digit bits should be <= 30 because we do bitwise ops
        // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)


        BigInteger.prototype.am2 = function (i, x, w, j, c, n) {
          var xl = x & 0x7fff;
          var xh = x >> 15;

          while (--n >= 0) {
            var l = this[i] & 0x7fff;
            var h = this[i++] >> 15;
            var m = xh * l + h * xl;
            l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
            c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
            w[j++] = l & 0x3fffffff;
          }

          return c;
        }; // Alternately, set max digit bits to 28 since some
        // browsers slow down when dealing with 32-bit numbers.


        BigInteger.prototype.am3 = function (i, x, w, j, c, n) {
          var xl = x & 0x3fff;
          var xh = x >> 14;

          while (--n >= 0) {
            var l = this[i] & 0x3fff;
            var h = this[i++] >> 14;
            var m = xh * l + h * xl;
            l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
            c = (l >> 28) + (m >> 14) + xh * h;
            w[j++] = l & 0xfffffff;
          }

          return c;
        };

        return BigInteger;
      }();

      exports.BigInteger = BigInteger;

      function nbi() {
        return new BigInteger(null);
      }

      exports.nbi = nbi;

      function nbits(x) {
        var r = 1;
        var t;

        if ((t = x >>> 16) != 0) {
          x = t;
          r += 16;
        }

        if ((t = x >> 8) != 0) {
          x = t;
          r += 8;
        }

        if ((t = x >> 4) != 0) {
          x = t;
          r += 4;
        }

        if ((t = x >> 2) != 0) {
          x = t;
          r += 2;
        }

        if ((t = x >> 1) != 0) {
          x = t;
          r += 1;
        }

        return r;
      }

      exports.nbits = nbits;
      var BI_RC = [];
      var rr;
      var vv;
      rr = "0".charCodeAt(0);

      for (vv = 0; vv <= 9; ++vv) {
        BI_RC[rr++] = vv;
      }

      rr = "a".charCodeAt(0);

      for (vv = 10; vv < 36; ++vv) {
        BI_RC[rr++] = vv;
      }

      rr = "A".charCodeAt(0);

      for (vv = 10; vv < 36; ++vv) {
        BI_RC[rr++] = vv;
      }

      function intAt(s, i) {
        var c = BI_RC[s.charCodeAt(i)];
        return c == null ? -1 : c;
      }

      exports.intAt = intAt;
      var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";

      function int2char(n) {
        return BI_RM.charAt(n);
      }

      exports.int2char = int2char;
      var b64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var b64pad = "=";

      function b64toHex(s) {
        var ret = "";
        var i;
        var k = 0; // b64 state, 0-3

        var slop = 0;

        for (i = 0; i < s.length; ++i) {
          if (s.charAt(i) == b64pad) {
            break;
          }

          var v = b64map.indexOf(s.charAt(i));

          if (v < 0) {
            continue;
          }

          if (k == 0) {
            ret += int2char(v >> 2);
            slop = v & 3;
            k = 1;
          } else if (k == 1) {
            ret += int2char(slop << 2 | v >> 4);
            slop = v & 0xf;
            k = 2;
          } else if (k == 2) {
            ret += int2char(slop);
            ret += int2char(v >> 2);
            slop = v & 3;
            k = 3;
          } else {
            ret += int2char(slop << 2 | v >> 4);
            ret += int2char(v & 0xf);
            k = 0;
          }
        }

        if (k == 1) {
          ret += int2char(slop << 2);
        }

        return ret;
      }

      exports.b64toHex = b64toHex;

      function removeExtraSymbols(s) {
        return s.replace(/^1f+00/, "").replace("3031300d060960864801650304020105000420", "");
      }

      exports.removeExtraSymbols = removeExtraSymbols;

      var Classic =
      /** @class */
      function () {
        function Classic(m) {
          this.m = m;
        } // Classic.prototype.convert = cConvert;


        Classic.prototype.convert = function (x) {
          if (x.s < 0 || x.compareTo(this.m) >= 0) {
            return x.mod(this.m);
          } else {
            return x;
          }
        }; // Classic.prototype.revert = cRevert;


        Classic.prototype.revert = function (x) {
          return x;
        }; // Classic.prototype.reduce = cReduce;


        Classic.prototype.reduce = function (x) {
          x.divRemTo(this.m, null, x);
        }; // Classic.prototype.mulTo = cMulTo;


        Classic.prototype.mulTo = function (x, y, r) {
          x.multiplyTo(y, r);
          this.reduce(r);
        }; // Classic.prototype.sqrTo = cSqrTo;


        Classic.prototype.sqrTo = function (x, r) {
          x.squareTo(r);
          this.reduce(r);
        };

        return Classic;
      }();

      var Montgomery =
      /** @class */
      function () {
        function Montgomery(m) {
          this.m = m;
          this.mp = m.invDigit();
          this.mpl = this.mp & 0x7fff;
          this.mph = this.mp >> 15;
          this.um = (1 << m.DB - 15) - 1;
          this.mt2 = 2 * m.t;
        } // Montgomery.prototype.convert = montConvert;
        // xR mod m


        Montgomery.prototype.convert = function (x) {
          var r = nbi();
          x.abs().dlShiftTo(this.m.t, r);
          r.divRemTo(this.m, null, r);

          if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {
            this.m.subTo(r, r);
          }

          return r;
        }; // Montgomery.prototype.revert = montRevert;
        // x/R mod m


        Montgomery.prototype.revert = function (x) {
          var r = nbi();
          x.copyTo(r);
          this.reduce(r);
          return r;
        }; // Montgomery.prototype.reduce = montReduce;
        // x = x/R mod m (HAC 14.32)


        Montgomery.prototype.reduce = function (x) {
          while (x.t <= this.mt2) {
            // pad x so am has enough room later
            x[x.t++] = 0;
          }

          for (var i = 0; i < this.m.t; ++i) {
            // faster way of calculating u0 = x[i]*mp mod DV
            var j = x[i] & 0x7fff;
            var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM; // use am to combine the multiply-shift-add into one call

            j = i + this.m.t;
            x[j] += this.m.am(0, u0, x, i, 0, this.m.t); // propagate carry

            while (x[j] >= x.DV) {
              x[j] -= x.DV;
              x[++j]++;
            }
          }

          x.clamp();
          x.drShiftTo(this.m.t, x);

          if (x.compareTo(this.m) >= 0) {
            x.subTo(this.m, x);
          }
        }; // Montgomery.prototype.mulTo = montMulTo;
        // r = "xy/R mod m"; x,y != r


        Montgomery.prototype.mulTo = function (x, y, r) {
          x.multiplyTo(y, r);
          this.reduce(r);
        }; // Montgomery.prototype.sqrTo = montSqrTo;
        // r = "x^2/R mod m"; x != r


        Montgomery.prototype.sqrTo = function (x, r) {
          x.squareTo(r);
          this.reduce(r);
        };

        return Montgomery;
      }();

      function nbv(i) {
        var r = nbi();
        r.fromHexString(i.toString());
        return r;
      }

      exports.nbv = nbv;
      BigInteger.ZERO = nbv(0);
      BigInteger.ONE = nbv(1);

      if (navigator.appName == "Microsoft Internet Explorer") {
        BigInteger.prototype.am = BigInteger.prototype.am2;
        dbits = 30;
      } else if (navigator.appName != "Netscape") {
        BigInteger.prototype.am = BigInteger.prototype.am1;
        dbits = 26;
      } else {
        // Mozilla/Netscape seems to prefer am3
        BigInteger.prototype.am = BigInteger.prototype.am3;
        dbits = 28;
      }

      BigInteger.prototype.DB = dbits;
      BigInteger.prototype.DM = (1 << dbits) - 1;
      BigInteger.prototype.DV = 1 << dbits;
      var BI_FP = 52;
      BigInteger.prototype.FV = Math.pow(2, BI_FP);
      BigInteger.prototype.F1 = BI_FP - dbits;
      BigInteger.prototype.F2 = 2 * dbits - BI_FP;
      /***/
    },

    /***/
    288:
    /***/
    function _(module, exports, __webpack_require__) {
      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var Sha256 =
      /** @class */
      function () {
        function Sha256() {}

        Sha256.hash = function (msg) {
          msg = Sha256.utf8Encode(msg || "");
          var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];
          var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
          msg += String.fromCharCode(0x80);
          var l = msg.length / 4 + 2;
          var N = Math.ceil(l / 16);
          var M = new Array(N);

          for (var i = 0; i < N; i++) {
            M[i] = new Array(16);

            for (var j = 0; j < 16; j++) {
              M[i][j] = msg.charCodeAt(i * 64 + j * 4) << 24 | msg.charCodeAt(i * 64 + j * 4 + 1) << 16 | msg.charCodeAt(i * 64 + j * 4 + 2) << 8 | msg.charCodeAt(i * 64 + j * 4 + 3) << 0;
            }
          }

          var lenHi = (msg.length - 1) * 8 / Math.pow(2, 32);
          var lenLo = (msg.length - 1) * 8 >>> 0;
          M[N - 1][14] = Math.floor(lenHi);
          M[N - 1][15] = lenLo;

          for (var i = 0; i < N; i++) {
            var W = new Array(64);

            for (var t = 0; t < 16; t++) {
              W[t] = M[i][t];
            }

            for (var t = 16; t < 64; t++) {
              W[t] = Sha256.q1(W[t - 2]) + W[t - 7] + Sha256.q0(W[t - 15]) + W[t - 16] >>> 0;
            }

            var a = H[0],
                b = H[1],
                c = H[2],
                d = H[3],
                e = H[4],
                f = H[5],
                g = H[6],
                h = H[7];

            for (var t = 0; t < 64; t++) {
              var T1 = h + Sha256.z1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];
              var T2 = Sha256.z0(a) + Sha256.Maj(a, b, c);
              h = g;
              g = f;
              f = e;
              e = d + T1 >>> 0;
              d = c;
              c = b;
              b = a;
              a = T1 + T2 >>> 0;
            }

            H[0] = H[0] + a >>> 0;
            H[1] = H[1] + b >>> 0;
            H[2] = H[2] + c >>> 0;
            H[3] = H[3] + d >>> 0;
            H[4] = H[4] + e >>> 0;
            H[5] = H[5] + f >>> 0;
            H[6] = H[6] + g >>> 0;
            H[7] = H[7] + h >>> 0;
          }

          var R = new Array(H.length);

          for (var h = 0; h < H.length; h++) {
            R[h] = ('00000000' + H[h].toString(16)).slice(-8);
          }

          return R.join('');
        };

        Sha256.utf8Encode = function (str) {
          try {
            return new TextEncoder().encode(str).reduce(function (prev, curr) {
              return prev + String.fromCharCode(curr);
            }, '');
          } catch (e) {
            return unescape(encodeURIComponent(str));
          }
        };

        Sha256.ROTR = function (n, x) {
          return x >>> n | x << 32 - n;
        };

        Sha256.z0 = function (x) {
          return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x);
        };

        Sha256.z1 = function (x) {
          return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x);
        };

        Sha256.q0 = function (x) {
          return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ x >>> 3;
        };

        Sha256.q1 = function (x) {
          return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ x >>> 10;
        };

        Sha256.Ch = function (x, y, z) {
          return x & y ^ ~x & z;
        };

        Sha256.Maj = function (x, y, z) {
          return x & y ^ x & z ^ y & z;
        };

        return Sha256;
      }();

      exports.Sha256 = Sha256;
      /***/
    }
  }, [284]);
  pbjsChunk([182], {
    /***/
    337:
    /***/
    function _(module, exports, __webpack_require__) {
      module.exports = __webpack_require__(338);
      /***/
    },

    /***/
    338:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "adpodUtils", function () {
        return adpodUtils;
      });
      /* harmony export (immutable) */


      __webpack_exports__["notifyTranslationModule"] = notifyTranslationModule;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__src_adServerManager_js__ = __webpack_require__(56);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__src_hook_js__ = __webpack_require__(13);
      /**
       * This module adds Freewheel support for Video to Prebid.
       */


      var adpodUtils = {};

      function notifyTranslationModule(fn) {
        fn.call(this, 'freewheel');
      }

      Object(__WEBPACK_IMPORTED_MODULE_1__src_hook_js__["a"
      /* getHook */
      ])('registerAdserver').before(notifyTranslationModule);
      Object(__WEBPACK_IMPORTED_MODULE_0__src_adServerManager_js__["a"
      /* registerVideoSupport */
      ])('freewheel', {
        getTargeting: function getTargeting(args) {
          return adpodUtils.getTargeting(args);
        }
      });
      Object(__WEBPACK_IMPORTED_MODULE_1__src_hook_js__["e"
      /* submodule */
      ])('adpod', adpodUtils);
      /***/
    }
  }, [337]);
  pbjsChunk([166], {
    /***/
    373:
    /***/
    function _(module, exports, __webpack_require__) {
      module.exports = __webpack_require__(374);
      /***/
    },

    /***/
    374:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "spec", function () {
        return spec;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__src_utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__src_mediaTypes_js__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__src_config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_find_js__ = __webpack_require__(12);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_find_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_find_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4_core_js_library_fn_number_is_integer_js__ = __webpack_require__(375);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4_core_js_library_fn_number_is_integer_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_core_js_library_fn_number_is_integer_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__src_adapters_bidderFactory_js__ = __webpack_require__(1);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var BIDDER_CODE = 'ix';
      var SECURE_BID_URL = 'https://as-sec.casalemedia.com/cygnus';
      var SUPPORTED_AD_TYPES = [__WEBPACK_IMPORTED_MODULE_1__src_mediaTypes_js__["b"
      /* BANNER */
      ], __WEBPACK_IMPORTED_MODULE_1__src_mediaTypes_js__["d"
      /* VIDEO */
      ]];
      var BANNER_ENDPOINT_VERSION = 7.2;
      var VIDEO_ENDPOINT_VERSION = 8.1;
      var CENT_TO_DOLLAR_FACTOR = 100;
      var BANNER_TIME_TO_LIVE = 300;
      var VIDEO_TIME_TO_LIVE = 3600; // 1hr

      var NET_REVENUE = true;
      var PRICE_TO_DOLLAR_FACTOR = {
        JPY: 1
      };
      var USER_SYNC_URL = 'https://js-sec.indexww.com/um/ixmatch.html';
      /**
       * Transform valid bid request config object to banner impression object that will be sent to ad server.
       *
       * @param  {object} bid A valid bid request config object.
       * @return {object}     A impression object that will be sent to ad server.
       */

      function bidToBannerImp(bid) {
        var imp = bidToImp(bid);
        imp.banner = {};
        imp.banner.w = bid.params.size[0];
        imp.banner.h = bid.params.size[1];
        imp.banner.topframe = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["inIframe"]() ? 0 : 1;
        return imp;
      }
      /**
       * Transform valid bid request config object to video impression object that will be sent to ad server.
       *
       * @param  {object} bid A valid bid request config object.
       * @return {object}     A impression object that will be sent to ad server.
       */


      function bidToVideoImp(bid) {
        var imp = bidToImp(bid);
        imp.video = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepClone"](bid.params.video);
        imp.video.w = bid.params.size[0];
        imp.video.h = bid.params.size[1];

        var context = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'mediaTypes.video.context');

        if (context) {
          if (context === 'instream') {
            imp.video.placement = 1;
          } else if (context === 'outstream') {
            imp.video.placement = 4;
          } else {
            __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"]("ix bidder params: video context '".concat(context, "' is not supported"));
          }
        }

        return imp;
      }

      function bidToImp(bid) {
        var imp = {};
        imp.id = bid.bidId;
        imp.ext = {};
        imp.ext.siteID = bid.params.siteId;

        if (bid.params.hasOwnProperty('id') && (typeof bid.params.id === 'string' || typeof bid.params.id === 'number')) {
          imp.ext.sid = String(bid.params.id);
        } else {
          imp.ext.sid = "".concat(bid.params.size[0], "x").concat(bid.params.size[1]);
        }

        if (bid.params.hasOwnProperty('bidFloor') && bid.params.hasOwnProperty('bidFloorCur')) {
          imp.bidfloor = bid.params.bidFloor;
          imp.bidfloorcur = bid.params.bidFloorCur;
        }

        return imp;
      }
      /**
       * Parses a raw bid for the relevant information.
       *
       * @param  {object} rawBid   The bid to be parsed.
       * @param  {string} currency Global currency in bid response.
       * @return {object} bid      The parsed bid.
       */


      function parseBid(rawBid, currency, bidRequest) {
        var bid = {};

        if (PRICE_TO_DOLLAR_FACTOR.hasOwnProperty(currency)) {
          bid.cpm = rawBid.price / PRICE_TO_DOLLAR_FACTOR[currency];
        } else {
          bid.cpm = rawBid.price / CENT_TO_DOLLAR_FACTOR;
        }

        bid.requestId = rawBid.impid;
        bid.dealId = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](rawBid, 'ext.dealid');
        bid.netRevenue = NET_REVENUE;
        bid.currency = currency;
        bid.creativeId = rawBid.hasOwnProperty('crid') ? rawBid.crid : '-'; // in the event of a video

        if (__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](rawBid, 'ext.vasturl')) {
          bid.vastUrl = rawBid.ext.vasturl;
          bid.width = bidRequest.video.w;
          bid.height = bidRequest.video.h;
          bid.mediaType = __WEBPACK_IMPORTED_MODULE_1__src_mediaTypes_js__["d"
          /* VIDEO */
          ];
          bid.ttl = VIDEO_TIME_TO_LIVE;
        } else {
          bid.ad = rawBid.adm;
          bid.width = rawBid.w;
          bid.height = rawBid.h;
          bid.mediaType = __WEBPACK_IMPORTED_MODULE_1__src_mediaTypes_js__["b"
          /* BANNER */
          ];
          bid.ttl = BANNER_TIME_TO_LIVE;
        }

        bid.meta = {};
        bid.meta.networkId = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](rawBid, 'ext.dspid');
        bid.meta.brandId = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](rawBid, 'ext.advbrandid');
        bid.meta.brandName = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](rawBid, 'ext.advbrand');
        return bid;
      }
      /**
       * Determines whether or not the given object is valid size format.
       *
       * @param  {*}       size The object to be validated.
       * @return {boolean}      True if this is a valid size format, and false otherwise.
       */


      function isValidSize(size) {
        return Array.isArray(size) && size.length === 2 && __WEBPACK_IMPORTED_MODULE_4_core_js_library_fn_number_is_integer_js___default()(size[0]) && __WEBPACK_IMPORTED_MODULE_4_core_js_library_fn_number_is_integer_js___default()(size[1]);
      }
      /**
       * Determines whether or not the given size object is an element of the size
       * array.
       *
       * @param  {array}  sizeArray The size array.
       * @param  {object} size      The size object.
       * @return {boolean}          True if the size object is an element of the size array, and false
       *                            otherwise.
       */


      function includesSize(sizeArray, size) {
        if (isValidSize(sizeArray)) {
          return sizeArray[0] === size[0] && sizeArray[1] === size[1];
        }

        for (var i = 0; i < sizeArray.length; i++) {
          if (sizeArray[i][0] === size[0] && sizeArray[i][1] === size[1]) {
            return true;
          }
        }

        return false;
      }
      /**
       * Determines whether or not the given bidFloor parameters are valid.
       *
       * @param  {*}       bidFloor    The bidFloor parameter inside bid request config.
       * @param  {*}       bidFloorCur The bidFloorCur parameter inside bid request config.
       * @return {boolean}             True if this is a valid biFfloor parameters format, and false
       *                               otherwise.
       */


      function isValidBidFloorParams(bidFloor, bidFloorCur) {
        var curRegex = /^[A-Z]{3}$/;
        return Boolean(typeof bidFloor === 'number' && typeof bidFloorCur === 'string' && bidFloorCur.match(curRegex));
      }
      /**
       * Finds the impression with the associated id.
       *
       * @param  {*}      id          Id of the impression.
       * @param  {array}  impressions List of impressions sent in the request.
       * @return {object}             The impression with the associated id.
       */


      function getBidRequest(id, impressions) {
        if (!id) {
          return;
        }

        return __WEBPACK_IMPORTED_MODULE_3_core_js_library_fn_array_find_js___default()(impressions, function (imp) {
          return imp.id === id;
        });
      }
      /**
       * Builds a request object to be sent to the ad server based on bid requests.
       *
       * @param  {array}  validBidRequests A list of valid bid request config objects.
       * @param  {object} bidderRequest    An object containing other info like gdprConsent.
       * @param  {array}  impressions      List of impression objects describing the bids.
       * @param  {array}  version          Endpoint version denoting banner or video.
       * @return {object}                  Info describing the request to the server.
       *
       */


      function buildRequest(validBidRequests, bidderRequest, impressions, version) {
        var userEids = []; // Always use secure HTTPS protocol.

        var baseUrl = SECURE_BID_URL; // RTI ids will be included in the bid request if the function getIdentityInfo() is loaded
        // and if the data for the partner exist

        if (window.headertag && typeof window.headertag.getIdentityInfo === 'function') {
          var identityInfo = window.headertag.getIdentityInfo();

          if (identityInfo && _typeof(identityInfo) === 'object') {
            for (var partnerName in identityInfo) {
              if (identityInfo.hasOwnProperty(partnerName)) {
                var response = identityInfo[partnerName];

                if (!response.responsePending && response.data && _typeof(response.data) === 'object' && Object.keys(response.data).length) {
                  userEids.push(response.data);
                }
              }
            }
          }
        }

        var r = {}; // Since bidderRequestId are the same for different bid request, just use the first one.

        r.id = validBidRequests[0].bidderRequestId;
        r.imp = impressions;
        r.site = {};
        r.ext = {};
        r.ext.source = 'prebid'; // if an schain is provided, send it along

        if (validBidRequests[0].schain) {
          r.source = {
            ext: {
              schain: validBidRequests[0].schain
            }
          };
        }

        if (userEids.length > 0) {
          r.user = {};
          r.user.eids = userEids;
        }

        if (document.referrer && document.referrer !== '') {
          r.site.ref = document.referrer;
        } // Apply GDPR information to the request if GDPR is enabled.


        if (bidderRequest) {
          if (bidderRequest.gdprConsent) {
            var gdprConsent = bidderRequest.gdprConsent;

            if (gdprConsent.hasOwnProperty('gdprApplies')) {
              r.regs = {
                ext: {
                  gdpr: gdprConsent.gdprApplies ? 1 : 0
                }
              };
            }

            if (gdprConsent.hasOwnProperty('consentString')) {
              r.user = r.user || {};
              r.user.ext = {
                consent: gdprConsent.consentString || ''
              };
            }
          }

          if (bidderRequest.uspConsent) {
            __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepSetValue"](r, 'regs.ext.us_privacy', bidderRequest.uspConsent);
          }

          if (bidderRequest.refererInfo) {
            r.site.page = bidderRequest.refererInfo.referer;
          }
        }

        var payload = {}; // Parse additional runtime configs.

        var otherIxConfig = __WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
        /* config */
        ].getConfig('ix');

        if (otherIxConfig) {
          // Append firstPartyData to r.site.page if firstPartyData exists.
          if (_typeof(otherIxConfig.firstPartyData) === 'object') {
            var firstPartyData = otherIxConfig.firstPartyData;
            var firstPartyString = '?';

            for (var key in firstPartyData) {
              if (firstPartyData.hasOwnProperty(key)) {
                firstPartyString += "".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(firstPartyData[key]), "&");
              }
            }

            firstPartyString = firstPartyString.slice(0, -1);
            r.site.page += firstPartyString;
          } // Create t in payload if timeout is configured.


          if (typeof otherIxConfig.timeout === 'number') {
            payload.t = otherIxConfig.timeout;
          }
        } // Use the siteId in the first bid request as the main siteId.


        payload.s = validBidRequests[0].params.siteId;
        payload.v = version;
        payload.r = JSON.stringify(r);
        payload.ac = 'j';
        payload.sd = 1;

        if (version === VIDEO_ENDPOINT_VERSION) {
          payload.nf = 1;
        }

        return {
          method: 'GET',
          url: baseUrl,
          data: payload
        };
      }

      var spec = {
        code: BIDDER_CODE,
        supportedMediaTypes: SUPPORTED_AD_TYPES,

        /**
         * Determines whether or not the given bid request is valid.
         *
         * @param  {object}  bid The bid to validate.
         * @return {boolean}     True if this is a valid bid, and false otherwise.
         */
        isBidRequestValid: function isBidRequestValid(bid) {
          if (!isValidSize(bid.params.size)) {
            __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]('ix bidder params: bid size has invalid format.');

            return false;
          }

          if (!includesSize(bid.sizes, bid.params.size)) {
            __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]('ix bidder params: bid size is not included in ad unit sizes.');

            return false;
          }

          if (bid.hasOwnProperty('mediaType') && !__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["contains"](SUPPORTED_AD_TYPES, bid.mediaType)) {
            return false;
          }

          if (bid.hasOwnProperty('mediaTypes') && !(__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'mediaTypes.banner.sizes') || __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'mediaTypes.video.playerSize'))) {
            return false;
          }

          if (typeof bid.params.siteId !== 'string' && typeof bid.params.siteId !== 'number') {
            __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]('ix bidder params: siteId must be string or number value.');

            return false;
          }

          var hasBidFloor = bid.params.hasOwnProperty('bidFloor');
          var hasBidFloorCur = bid.params.hasOwnProperty('bidFloorCur');

          if (hasBidFloor || hasBidFloorCur) {
            if (!(hasBidFloor && hasBidFloorCur && isValidBidFloorParams(bid.params.bidFloor, bid.params.bidFloorCur))) {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]('ix bidder params: bidFloor / bidFloorCur parameter has invalid format.');

              return false;
            }
          }

          return true;
        },

        /**
         * Make a server request from the list of BidRequests.
         *
         * @param  {array}  validBidRequests A list of valid bid request config objects.
         * @param  {object} bidderRequest    A object contains bids and other info like gdprConsent.
         * @return {object}                  Info describing the request to the server.
         */
        buildRequests: function buildRequests(validBidRequests, bidderRequest) {
          var reqs = [];
          var bannerImps = [];
          var videoImps = [];
          var validBidRequest = null;

          for (var i = 0; i < validBidRequests.length; i++) {
            validBidRequest = validBidRequests[i];

            if (validBidRequest.mediaType === __WEBPACK_IMPORTED_MODULE_1__src_mediaTypes_js__["d"
            /* VIDEO */
            ] || __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](validBidRequest, 'mediaTypes.video')) {
              if (validBidRequest.mediaType === __WEBPACK_IMPORTED_MODULE_1__src_mediaTypes_js__["d"
              /* VIDEO */
              ] || includesSize(validBidRequest.mediaTypes.video.playerSize, validBidRequest.params.size)) {
                videoImps.push(bidToVideoImp(validBidRequest));
              } else {
                __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]('Bid size is not included in video playerSize');
              }
            }

            if (validBidRequest.mediaType === __WEBPACK_IMPORTED_MODULE_1__src_mediaTypes_js__["b"
            /* BANNER */
            ] || __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](validBidRequest, 'mediaTypes.banner') || !validBidRequest.mediaType && !validBidRequest.mediaTypes) {
              bannerImps.push(bidToBannerImp(validBidRequest));
            }
          }

          if (bannerImps.length > 0) {
            reqs.push(buildRequest(validBidRequests, bidderRequest, bannerImps, BANNER_ENDPOINT_VERSION));
          }

          if (videoImps.length > 0) {
            reqs.push(buildRequest(validBidRequests, bidderRequest, videoImps, VIDEO_ENDPOINT_VERSION));
          }

          return reqs;
        },

        /**
         * Unpack the response from the server into a list of bids.
         *
         * @param  {object} serverResponse A successful response from the server.
         * @param  {object} bidderRequest  The bid request sent to the server.
         * @return {array}                 An array of bids which were nested inside the server.
         */
        interpretResponse: function interpretResponse(serverResponse, bidderRequest) {
          var bids = [];
          var bid = null;

          if (!serverResponse.hasOwnProperty('body') || !serverResponse.body.hasOwnProperty('seatbid')) {
            return bids;
          }

          var responseBody = serverResponse.body;
          var seatbid = responseBody.seatbid;

          for (var i = 0; i < seatbid.length; i++) {
            if (!seatbid[i].hasOwnProperty('bid')) {
              continue;
            } // Transform rawBid in bid response to the format that will be accepted by prebid.


            var innerBids = seatbid[i].bid;
            var requestBid = JSON.parse(bidderRequest.data.r);

            for (var j = 0; j < innerBids.length; j++) {
              var bidRequest = getBidRequest(innerBids[j].impid, requestBid.imp);
              bid = parseBid(innerBids[j], responseBody.cur, bidRequest);
              bids.push(bid);
            }
          }

          return bids;
        },

        /**
         * Covert bid param types for S2S
         * @param {Object} params bid params
         * @param {Boolean} isOpenRtb boolean to check openrtb2 protocol
         * @return {Object} params bid params
         */
        transformBidParams: function transformBidParams(params, isOpenRtb) {
          return __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["convertTypes"]({
            'siteID': 'number'
          }, params);
        },

        /**
         * Determine which user syncs should occur
         * @param {object} syncOptions
         * @param {array} serverResponses
         * @returns {array} User sync pixels
         */
        getUserSyncs: function getUserSyncs(syncOptions, serverResponses) {
          return syncOptions.iframeEnabled ? [{
            type: 'iframe',
            url: USER_SYNC_URL
          }] : [];
        }
      };
      Object(__WEBPACK_IMPORTED_MODULE_5__src_adapters_bidderFactory_js__["registerBidder"])(spec);
      /***/
    }
  }, [373]);
  pbjsChunk([130], {
    /***/
    461:
    /***/
    function _(module, exports, __webpack_require__) {
      module.exports = __webpack_require__(462);
      /***/
    },

    /***/
    462:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "spec", function () {
        return spec;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__src_config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__src_adapters_bidderFactory_js__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__src_utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__src_url_js__ = __webpack_require__(9);

      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
      }

      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }

      function _iterableToArrayLimit(arr, i) {
        if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
          return;
        }

        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
      }

      var SUPPORTED_AD_TYPES = [__WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["b"
      /* BANNER */
      ], __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["d"
      /* VIDEO */
      ]];
      var BIDDER_CODE = 'openx';
      var BIDDER_CONFIG = 'hb_pb';
      var BIDDER_VERSION = '3.0.1';
      var USER_ID_CODE_TO_QUERY_ARG = {
        idl_env: 'lre',
        // liveramp
        pubcid: 'pubcid',
        // publisher common id
        tdid: 'ttduuid',
        // the trade desk
        criteoId: 'criteoid' // criteo id

      };
      var spec = {
        code: BIDDER_CODE,
        supportedMediaTypes: SUPPORTED_AD_TYPES,
        isBidRequestValid: function isBidRequestValid(bidRequest) {
          var hasDelDomainOrPlatform = bidRequest.params.delDomain || bidRequest.params.platform;

          if (__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](bidRequest, 'mediaTypes.banner') && hasDelDomainOrPlatform) {
            return !!bidRequest.params.unit || __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](bidRequest, 'mediaTypes.banner.sizes.length') > 0;
          }

          return !!(bidRequest.params.unit && hasDelDomainOrPlatform);
        },
        buildRequests: function buildRequests(bidRequests, bidderRequest) {
          if (bidRequests.length === 0) {
            return [];
          }

          var requests = [];

          var _partitionByVideoBids = partitionByVideoBids(bidRequests),
              _partitionByVideoBids2 = _slicedToArray(_partitionByVideoBids, 2),
              videoBids = _partitionByVideoBids2[0],
              bannerBids = _partitionByVideoBids2[1]; // build banner requests


          if (bannerBids.length > 0) {
            requests.push(buildOXBannerRequest(bannerBids, bidderRequest));
          } // build video requests


          if (videoBids.length > 0) {
            videoBids.forEach(function (videoBid) {
              requests.push(buildOXVideoRequest(videoBid, bidderRequest));
            });
          }

          return requests;
        },
        interpretResponse: function interpretResponse(_ref, serverRequest) {
          var oxResponseObj = _ref.body;
          var mediaType = getMediaTypeFromRequest(serverRequest);
          return mediaType === __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["d"
          /* VIDEO */
          ] ? createVideoBidResponses(oxResponseObj, serverRequest.payload) : createBannerBidResponses(oxResponseObj, serverRequest.payload);
        },
        getUserSyncs: function getUserSyncs(syncOptions, responses, gdprConsent, uspConsent) {
          if (syncOptions.iframeEnabled || syncOptions.pixelEnabled) {
            var pixelType = syncOptions.iframeEnabled ? 'iframe' : 'image';
            var url = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](responses, '0.body.ads.pixels') || __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](responses, '0.body.pixels') || generateDefaultSyncUrl(gdprConsent, uspConsent);
            return [{
              type: pixelType,
              url: url
            }];
          }
        },
        transformBidParams: function transformBidParams(params, isOpenRtb) {
          return __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["convertTypes"]({
            'unit': 'string',
            'customFloor': 'number'
          }, params);
        }
      };

      function generateDefaultSyncUrl(gdprConsent, uspConsent) {
        var url = 'https://u.openx.net/w/1.0/pd';
        var queryParamStrings = [];

        if (gdprConsent) {
          queryParamStrings.push('gdpr=' + (gdprConsent.gdprApplies ? 1 : 0));
          queryParamStrings.push('gdpr_consent=' + encodeURIComponent(gdprConsent.consentString || ''));
        } // CCPA


        if (uspConsent) {
          queryParamStrings.push('us_privacy=' + encodeURIComponent(uspConsent));
        }

        return "".concat(url).concat(queryParamStrings.length > 0 ? '?' + queryParamStrings.join('&') : '');
      }

      function isVideoRequest(bidRequest) {
        return __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](bidRequest, 'mediaTypes.video') && !__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](bidRequest, 'mediaTypes.banner') || bidRequest.mediaType === __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["d"
        /* VIDEO */
        ];
      }

      function createBannerBidResponses(oxResponseObj, _ref2) {
        var bids = _ref2.bids,
            startTime = _ref2.startTime;
        var adUnits = oxResponseObj.ads.ad;
        var bidResponses = [];

        for (var i = 0; i < adUnits.length; i++) {
          var adUnit = adUnits[i];
          var adUnitIdx = parseInt(adUnit.idx, 10);
          var bidResponse = {};
          bidResponse.requestId = bids[adUnitIdx].bidId;

          if (adUnit.pub_rev) {
            bidResponse.cpm = Number(adUnit.pub_rev) / 1000;
          } else {
            // No fill, do not add the bidresponse
            continue;
          }

          var creative = adUnit.creative[0];

          if (creative) {
            bidResponse.width = creative.width;
            bidResponse.height = creative.height;
          }

          bidResponse.creativeId = creative.id;
          bidResponse.ad = adUnit.html;

          if (adUnit.deal_id) {
            bidResponse.dealId = adUnit.deal_id;
          } // default 5 mins


          bidResponse.ttl = 300; // true is net, false is gross

          bidResponse.netRevenue = true;
          bidResponse.currency = adUnit.currency; // additional fields to add

          if (adUnit.tbd) {
            bidResponse.tbd = adUnit.tbd;
          }

          bidResponse.ts = adUnit.ts;
          bidResponse.meta = {};

          if (adUnit.brand_id) {
            bidResponse.meta.brandId = adUnit.brand_id;
          }

          if (adUnit.adv_id) {
            bidResponse.meta.dspid = adUnit.adv_id;
          }

          bidResponses.push(bidResponse);
        }

        return bidResponses;
      }

      function getViewportDimensions(isIfr) {
        var width;
        var height;
        var tWin = window;
        var tDoc = document;
        var docEl = tDoc.documentElement;
        var body;

        if (isIfr) {
          try {
            tWin = window.top;
            tDoc = window.top.document;
          } catch (e) {
            return;
          }

          docEl = tDoc.documentElement;
          body = tDoc.body;
          width = tWin.innerWidth || docEl.clientWidth || body.clientWidth;
          height = tWin.innerHeight || docEl.clientHeight || body.clientHeight;
        } else {
          docEl = tDoc.documentElement;
          width = tWin.innerWidth || docEl.clientWidth;
          height = tWin.innerHeight || docEl.clientHeight;
        }

        return "".concat(width, "x").concat(height);
      }

      function formatCustomParms(customKey, customParams) {
        var value = customParams[customKey];

        if (__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["isArray"](value)) {
          // if value is an array, join them with commas first
          value = value.join(',');
        } // return customKey=customValue format, escaping + to . and / to _


        return (customKey.toLowerCase() + '=' + value.toLowerCase()).replace('+', '.').replace('/', '_');
      }

      function partitionByVideoBids(bidRequests) {
        return bidRequests.reduce(function (acc, bid) {
          // Fallback to banner ads if nothing specified
          if (isVideoRequest(bid)) {
            acc[0].push(bid);
          } else {
            acc[1].push(bid);
          }

          return acc;
        }, [[], []]);
      }

      function getMediaTypeFromRequest(serverRequest) {
        return /avjp$/.test(serverRequest.url) ? __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["d"
        /* VIDEO */
        ] : __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["b"
        /* BANNER */
        ];
      }

      function buildCommonQueryParamsFromBids(bids, bidderRequest) {
        var isInIframe = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["inIframe"]();

        var defaultParams;
        defaultParams = {
          ju: __WEBPACK_IMPORTED_MODULE_0__src_config_js__["b"
          /* config */
          ].getConfig('pageUrl') || bidderRequest.refererInfo.referer,
          ch: document.charSet || document.characterSet,
          res: "".concat(screen.width, "x").concat(screen.height, "x").concat(screen.colorDepth),
          ifr: isInIframe,
          tz: new Date().getTimezoneOffset(),
          tws: getViewportDimensions(isInIframe),
          be: 1,
          bc: bids[0].params.bc || "".concat(BIDDER_CONFIG, "_").concat(BIDDER_VERSION),
          dddid: __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["_map"](bids, function (bid) {
            return bid.transactionId;
          }).join(','),
          nocache: new Date().getTime()
        };

        if (bids[0].params.platform) {
          defaultParams.ph = bids[0].params.platform;
        }

        if (bidderRequest.gdprConsent) {
          var gdprConsentConfig = bidderRequest.gdprConsent;

          if (gdprConsentConfig.consentString !== undefined) {
            defaultParams.gdpr_consent = gdprConsentConfig.consentString;
          }

          if (gdprConsentConfig.gdprApplies !== undefined) {
            defaultParams.gdpr = gdprConsentConfig.gdprApplies ? 1 : 0;
          }

          if (__WEBPACK_IMPORTED_MODULE_0__src_config_js__["b"
          /* config */
          ].getConfig('consentManagement.cmpApi') === 'iab') {
            defaultParams.x_gdpr_f = 1;
          }
        }

        if (bidderRequest && bidderRequest.uspConsent) {
          defaultParams.us_privacy = bidderRequest.uspConsent;
        } // normalize publisher common id


        if (__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](bids[0], 'crumbs.pubcid')) {
          __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepSetValue"](bids[0], 'userId.pubcid', __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](bids[0], 'crumbs.pubcid'));
        }

        defaultParams = appendUserIdsToQueryParams(defaultParams, bids[0].userId); // supply chain support

        if (bids[0].schain) {
          defaultParams.schain = serializeSupplyChain(bids[0].schain);
        }

        return defaultParams;
      }

      function appendUserIdsToQueryParams(queryParams, userIds) {
        __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["_each"](userIds, function (userIdValue, userIdProviderKey) {
          if (USER_ID_CODE_TO_QUERY_ARG.hasOwnProperty(userIdProviderKey)) {
            queryParams[USER_ID_CODE_TO_QUERY_ARG[userIdProviderKey]] = userIdValue;
          }
        });

        return queryParams;
      }

      function serializeSupplyChain(supplyChain) {
        return "".concat(supplyChain.ver, ",").concat(supplyChain.complete, "!").concat(serializeSupplyChainNodes(supplyChain.nodes));
      }

      function serializeSupplyChainNodes(supplyChainNodes) {
        var supplyChainNodePropertyOrder = ['asi', 'sid', 'hp', 'rid', 'name', 'domain'];
        return supplyChainNodes.map(function (supplyChainNode) {
          return supplyChainNodePropertyOrder.map(function (property) {
            return supplyChainNode[property] || '';
          }).join(',');
        }).join('!');
      }

      function buildOXBannerRequest(bids, bidderRequest) {
        var customParamsForAllBids = [];
        var hasCustomParam = false;
        var queryParams = buildCommonQueryParamsFromBids(bids, bidderRequest);

        var auids = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["_map"](bids, function (bid) {
          return bid.params.unit;
        });

        queryParams.aus = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["_map"](bids, function (bid) {
          return __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["parseSizesInput"](bid.mediaTypes.banner.sizes).join(',');
        }).join('|');
        queryParams.divIds = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["_map"](bids, function (bid) {
          return encodeURIComponent(bid.adUnitCode);
        }).join(',');

        if (auids.some(function (auid) {
          return auid;
        })) {
          queryParams.auid = auids.join(',');
        }

        if (bids.some(function (bid) {
          return bid.params.doNotTrack;
        })) {
          queryParams.ns = 1;
        }

        if (__WEBPACK_IMPORTED_MODULE_0__src_config_js__["b"
        /* config */
        ].getConfig('coppa') === true || bids.some(function (bid) {
          return bid.params.coppa;
        })) {
          queryParams.tfcd = 1;
        }

        bids.forEach(function (bid) {
          if (bid.params.customParams) {
            var customParamsForBid = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["_map"](Object.keys(bid.params.customParams), function (customKey) {
              return formatCustomParms(customKey, bid.params.customParams);
            });

            var formattedCustomParams = window.btoa(customParamsForBid.join('&'));
            hasCustomParam = true;
            customParamsForAllBids.push(formattedCustomParams);
          } else {
            customParamsForAllBids.push('');
          }
        });

        if (hasCustomParam) {
          queryParams.tps = customParamsForAllBids.join(',');
        }

        var customFloorsForAllBids = [];
        var hasCustomFloor = false;
        bids.forEach(function (bid) {
          if (bid.params.customFloor) {
            customFloorsForAllBids.push(Math.round(bid.params.customFloor * 100) / 100 * 1000);
            hasCustomFloor = true;
          } else {
            customFloorsForAllBids.push(0);
          }
        });

        if (hasCustomFloor) {
          queryParams.aumfs = customFloorsForAllBids.join(',');
        }

        var url = queryParams.ph ? "https://u.openx.net/w/1.0/arj" : "https://".concat(bids[0].params.delDomain, "/w/1.0/arj");
        return {
          method: 'GET',
          url: url,
          data: queryParams,
          payload: {
            'bids': bids,
            'startTime': new Date()
          }
        };
      }

      function buildOXVideoRequest(bid, bidderRequest) {
        var oxVideoParams = generateVideoParameters(bid, bidderRequest);
        var url = oxVideoParams.ph ? "https://u.openx.net/v/1.0/avjp" : "https://".concat(bid.params.delDomain, "/v/1.0/avjp");
        return {
          method: 'GET',
          url: url,
          data: oxVideoParams,
          payload: {
            'bid': bid,
            'startTime': new Date()
          }
        };
      }

      function generateVideoParameters(bid, bidderRequest) {
        var queryParams = buildCommonQueryParamsFromBids([bid], bidderRequest);
        var oxVideoConfig = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](bid, 'params.video') || {};

        var context = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](bid, 'mediaTypes.video.context');

        var playerSize = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](bid, 'mediaTypes.video.playerSize');

        var width;
        var height; // normalize config for video size

        if (__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["isArray"](bid.sizes) && bid.sizes.length === 2 && !__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["isArray"](bid.sizes[0])) {
          width = parseInt(bid.sizes[0], 10);
          height = parseInt(bid.sizes[1], 10);
        } else if (__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["isArray"](bid.sizes) && __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["isArray"](bid.sizes[0]) && bid.sizes[0].length === 2) {
          width = parseInt(bid.sizes[0][0], 10);
          height = parseInt(bid.sizes[0][1], 10);
        } else if (__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["isArray"](playerSize) && playerSize.length === 2) {
          width = parseInt(playerSize[0], 10);
          height = parseInt(playerSize[1], 10);
        }

        Object.keys(oxVideoConfig).forEach(function (key) {
          if (key === 'openrtb') {
            oxVideoConfig[key].w = width || oxVideoConfig[key].w;
            oxVideoConfig[key].v = height || oxVideoConfig[key].v;
            queryParams[key] = JSON.stringify(oxVideoConfig[key]);
          } else if (!(key in queryParams) && key !== 'url') {
            // only allow video-related attributes
            queryParams[key] = oxVideoConfig[key];
          }
        });
        queryParams.auid = bid.params.unit; // override prebid config with openx config if available

        queryParams.vwd = width || oxVideoConfig.vwd;
        queryParams.vht = height || oxVideoConfig.vht;

        if (context === 'outstream') {
          queryParams.vos = '101';
        }

        if (oxVideoConfig.mimes) {
          queryParams.vmimes = oxVideoConfig.mimes;
        }

        return queryParams;
      }

      function createVideoBidResponses(response, _ref3) {
        var bid = _ref3.bid,
            startTime = _ref3.startTime;
        var bidResponses = [];

        if (response !== undefined && response.vastUrl !== '' && response.pub_rev !== '') {
          var vastQueryParams = Object(__WEBPACK_IMPORTED_MODULE_4__src_url_js__["c"
          /* parse */
          ])(response.vastUrl).search || {};
          var bidResponse = {};
          bidResponse.requestId = bid.bidId; // default 5 mins

          bidResponse.ttl = 300; // true is net, false is gross

          bidResponse.netRevenue = true;
          bidResponse.currency = response.currency;
          bidResponse.cpm = Number(response.pub_rev) / 1000;
          bidResponse.width = response.width;
          bidResponse.height = response.height;
          bidResponse.creativeId = response.adid;
          bidResponse.vastUrl = response.vastUrl;
          bidResponse.mediaType = __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["d"
          /* VIDEO */
          ]; // enrich adunit with vast parameters

          response.ph = vastQueryParams.ph;
          response.colo = vastQueryParams.colo;
          response.ts = vastQueryParams.ts;
          bidResponses.push(bidResponse);
        }

        return bidResponses;
      }

      Object(__WEBPACK_IMPORTED_MODULE_1__src_adapters_bidderFactory_js__["registerBidder"])(spec);
      /***/
    }
  }, [461]);
  pbjsChunk([21], {
    /***/
    481:
    /***/
    function _(module, exports, __webpack_require__) {
      module.exports = __webpack_require__(482);
      /***/
    },

    /***/
    482:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (immutable) */

      __webpack_exports__["resetSyncedStatus"] = resetSyncedStatus;
      /* harmony export (immutable) */

      __webpack_exports__["PrebidServer"] = PrebidServer;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__src_adapter_js__ = __webpack_require__(77);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__src_bidfactory_js__ = __webpack_require__(24);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__src_utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__src_constants_json__ = __webpack_require__(5);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__src_constants_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__src_constants_json__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__src_adapterManager_js__ = __webpack_require__(7);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__src_config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6__src_mediaTypes_js__ = __webpack_require__(2);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7__src_native_js__ = __webpack_require__(23);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_8__src_adapters_bidderFactory_js__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_9__src_events_js__ = __webpack_require__(8);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_9__src_events_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9__src_events_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_10_core_js_library_fn_array_includes_js__ = __webpack_require__(11);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_10_core_js_library_fn_array_includes_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_core_js_library_fn_array_includes_js__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_11__config_js__ = __webpack_require__(483);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_12__src_ajax_js__ = __webpack_require__(4);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_13_core_js_library_fn_array_find_js__ = __webpack_require__(12);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_13_core_js_library_fn_array_find_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_core_js_library_fn_array_find_js__);

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
      }

      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }

      function _iterableToArrayLimit(arr, i) {
        if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
          return;
        }

        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
      }

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var getConfig = __WEBPACK_IMPORTED_MODULE_5__src_config_js__["b"
      /* config */
      ].getConfig;
      var TYPE = __WEBPACK_IMPORTED_MODULE_3__src_constants_json__["S2S"].SRC;
      var _synced = false;
      var DEFAULT_S2S_TTL = 60;
      var DEFAULT_S2S_CURRENCY = 'USD';
      var DEFAULT_S2S_NETREVENUE = true;

      var _s2sConfig;
      /**
       * @typedef {Object} AdapterOptions
       * @summary s2sConfig parameter that adds arguments to resulting OpenRTB payload that goes to Prebid Server
       * @example
       * // example of multiple bidder configuration
       * pbjs.setConfig({
       *    s2sConfig: {
       *       adapterOptions: {
       *          rubicon: {singleRequest: false}
       *          appnexus: {key: "value"}
       *       }
       *    }
       * });
       */

      /**
       * @typedef {Object} S2SDefaultConfig
       * @property {boolean} enabled
       * @property {number} timeout
       * @property {number} maxBids
       * @property {string} adapter
       * @property {AdapterOptions} adapterOptions
       */

      /**
       * @type {S2SDefaultConfig}
       */


      var s2sDefaultConfig = {
        enabled: false,
        timeout: 1000,
        maxBids: 1,
        adapter: 'prebidServer',
        adapterOptions: {},
        syncUrlModifier: {}
      };

      __WEBPACK_IMPORTED_MODULE_5__src_config_js__["b"
      /* config */
      ].setDefaults({
        's2sConfig': s2sDefaultConfig
      });
      /**
       * Set config for server to server header bidding
       * @typedef {Object} options - required
       * @property {boolean} enabled enables S2S bidding
       * @property {string[]} bidders bidders to request S2S
       * @property {string} endpoint endpoint to contact
       *  === optional params below ===
       * @property {number} [timeout] timeout for S2S bidders - should be lower than `pbjs.requestBids({timeout})`
       * @property {boolean} [cacheMarkup] whether to cache the adm result
       * @property {string} [adapter] adapter code to use for S2S
       * @property {string} [syncEndpoint] endpoint URL for syncing cookies
       * @property {Object} [extPrebid] properties will be merged into request.ext.prebid
       * @property {AdapterOptions} [adapterOptions] adds arguments to resulting OpenRTB payload to Prebid Server
       */


      function setS2sConfig(options) {
        if (options.defaultVendor) {
          var vendor = options.defaultVendor;
          var optionKeys = Object.keys(options);

          if (__WEBPACK_IMPORTED_MODULE_11__config_js__["a"
          /* S2S_VENDORS */
          ][vendor]) {
            // vendor keys will be set if either: the key was not specified by user
            // or if the user did not set their own distinct value (ie using the system default) to override the vendor
            Object.keys(__WEBPACK_IMPORTED_MODULE_11__config_js__["a"
            /* S2S_VENDORS */
            ][vendor]).forEach(function (vendorKey) {
              if (s2sDefaultConfig[vendorKey] === options[vendorKey] || !__WEBPACK_IMPORTED_MODULE_10_core_js_library_fn_array_includes_js___default()(optionKeys, vendorKey)) {
                options[vendorKey] = __WEBPACK_IMPORTED_MODULE_11__config_js__["a"
                /* S2S_VENDORS */
                ][vendor][vendorKey];
              }
            });
          } else {
            __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["logError"]('Incorrect or unavailable prebid server default vendor option: ' + vendor);

            return false;
          }
        }

        var keys = Object.keys(options);

        if (['accountId', 'bidders', 'endpoint'].filter(function (key) {
          if (!__WEBPACK_IMPORTED_MODULE_10_core_js_library_fn_array_includes_js___default()(keys, key)) {
            __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["logError"](key + ' missing in server to server config');

            return true;
          }

          return false;
        }).length > 0) {
          return;
        }

        _s2sConfig = options;
      }

      getConfig('s2sConfig', function (_ref) {
        var s2sConfig = _ref.s2sConfig;
        return setS2sConfig(s2sConfig);
      });
      /**
       * resets the _synced variable back to false, primiarily used for testing purposes
      */

      function resetSyncedStatus() {
        _synced = false;
      }
      /**
       * @param  {Array} bidderCodes list of bidders to request user syncs for.
       */


      function queueSync(bidderCodes, gdprConsent, uspConsent) {
        if (_synced) {
          return;
        }

        _synced = true;
        var payload = {
          uuid: __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["generateUUID"](),
          bidders: bidderCodes,
          account: _s2sConfig.accountId
        };
        var userSyncLimit = _s2sConfig.userSyncLimit;

        if (__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["isNumber"](userSyncLimit) && userSyncLimit > 0) {
          payload['limit'] = userSyncLimit;
        }

        if (gdprConsent) {
          // only populate gdpr field if we know CMP returned consent information (ie didn't timeout or have an error)
          if (typeof gdprConsent.consentString !== 'undefined') {
            payload.gdpr = gdprConsent.gdprApplies ? 1 : 0;
          } // attempt to populate gdpr_consent if we know gdprApplies or it may apply


          if (gdprConsent.gdprApplies !== false) {
            payload.gdpr_consent = gdprConsent.consentString;
          }
        } // US Privace (CCPA) support


        if (uspConsent) {
          payload.us_privacy = uspConsent;
        }

        var jsonPayload = JSON.stringify(payload);
        Object(__WEBPACK_IMPORTED_MODULE_12__src_ajax_js__["a"
        /* ajax */
        ])(_s2sConfig.syncEndpoint, function (response) {
          try {
            response = JSON.parse(response);
            doAllSyncs(response.bidder_status);
          } catch (e) {
            __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["logError"](e);
          }
        }, jsonPayload, {
          contentType: 'text/plain',
          withCredentials: true
        });
      }

      function doAllSyncs(bidders) {
        if (bidders.length === 0) {
          return;
        }

        var thisSync = bidders.pop();

        if (thisSync.no_cookie) {
          doPreBidderSync(thisSync.usersync.type, thisSync.usersync.url, thisSync.bidder, __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["bind"].call(doAllSyncs, null, bidders));
        } else {
          doAllSyncs(bidders);
        }
      }
      /**
       * Modify the cookie sync url from prebid server to add new params.
       *
       * @param {string} type the type of sync, "image", "redirect", "iframe"
       * @param {string} url the url to sync
       * @param {string} bidder name of bidder doing sync for
       * @param {function} done an exit callback; to signify this pixel has either: finished rendering or something went wrong
       */


      function doPreBidderSync(type, url, bidder, done) {
        if (_s2sConfig.syncUrlModifier && typeof _s2sConfig.syncUrlModifier[bidder] === 'function') {
          var newSyncUrl = _s2sConfig.syncUrlModifier[bidder](type, url, bidder);

          doBidderSync(type, newSyncUrl, bidder, done);
        } else {
          doBidderSync(type, url, bidder, done);
        }
      }
      /**
       * Run a cookie sync for the given type, url, and bidder
       *
       * @param {string} type the type of sync, "image", "redirect", "iframe"
       * @param {string} url the url to sync
       * @param {string} bidder name of bidder doing sync for
       * @param {function} done an exit callback; to signify this pixel has either: finished rendering or something went wrong
       */


      function doBidderSync(type, url, bidder, done) {
        if (!url) {
          __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["logError"]("No sync url for bidder \"".concat(bidder, "\": ").concat(url));

          done();
        } else if (type === 'image' || type === 'redirect') {
          __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["logMessage"]("Invoking image pixel user sync for bidder: \"".concat(bidder, "\""));

          __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["triggerPixel"](url, done);
        } else if (type == 'iframe') {
          __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["logMessage"]("Invoking iframe user sync for bidder: \"".concat(bidder, "\""));

          __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["insertUserSyncIframe"](url, done);
        } else {
          __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["logError"]("User sync type \"".concat(type, "\" not supported for bidder: \"").concat(bidder, "\""));

          done();
        }
      }
      /**
       * Do client-side syncs for bidders.
       *
       * @param {Array} bidders a list of bidder names
       */


      function doClientSideSyncs(bidders) {
        bidders.forEach(function (bidder) {
          var clientAdapter = __WEBPACK_IMPORTED_MODULE_4__src_adapterManager_js__["default"].getBidAdapter(bidder);

          if (clientAdapter && clientAdapter.registerSyncs) {
            clientAdapter.registerSyncs([]);
          }
        });
      }

      function _getDigiTrustQueryParams() {
        var bidRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        function getDigiTrustId(bidRequest) {
          var bidRequestDigitrust = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](bidRequest, 'bids.0.userId.digitrustid.data');

          if (bidRequestDigitrust) {
            return bidRequestDigitrust;
          }

          var digiTrustUser = __WEBPACK_IMPORTED_MODULE_5__src_config_js__["b"
          /* config */
          ].getConfig('digiTrustId');

          return digiTrustUser && digiTrustUser.success && digiTrustUser.identity || null;
        }

        var digiTrustId = getDigiTrustId(bidRequest); // Verify there is an ID and this user has not opted out

        if (!digiTrustId || digiTrustId.privacy && digiTrustId.privacy.optout) {
          return null;
        }

        return {
          id: digiTrustId.id,
          keyv: digiTrustId.keyv
        };
      }

      function _appendSiteAppDevice(request, pageUrl) {
        if (!request) return; // ORTB specifies app OR site

        if (_typeof(__WEBPACK_IMPORTED_MODULE_5__src_config_js__["b"
        /* config */
        ].getConfig('app')) === 'object') {
          request.app = __WEBPACK_IMPORTED_MODULE_5__src_config_js__["b"
          /* config */
          ].getConfig('app');
          request.app.publisher = {
            id: _s2sConfig.accountId
          };
        } else {
          request.site = {
            publisher: {
              id: _s2sConfig.accountId
            },
            page: pageUrl
          };
        }

        if (_typeof(__WEBPACK_IMPORTED_MODULE_5__src_config_js__["b"
        /* config */
        ].getConfig('device')) === 'object') {
          request.device = __WEBPACK_IMPORTED_MODULE_5__src_config_js__["b"
          /* config */
          ].getConfig('device');
        }

        if (!request.device) {
          request.device = {};
        }

        if (!request.device.w) {
          request.device.w = window.innerWidth;
        }

        if (!request.device.h) {
          request.device.h = window.innerHeight;
        }
      }

      function addBidderFirstPartyDataToRequest(request) {
        var bidderConfig = __WEBPACK_IMPORTED_MODULE_5__src_config_js__["b"
        /* config */
        ].getBidderConfig();

        var fpdConfigs = Object.keys(bidderConfig).reduce(function (acc, bidder) {
          var currBidderConfig = bidderConfig[bidder];

          if (currBidderConfig.fpd) {
            var fpd = {};

            if (currBidderConfig.fpd.context) {
              fpd.site = currBidderConfig.fpd.context;
            }

            if (currBidderConfig.fpd.user) {
              fpd.user = currBidderConfig.fpd.user;
            }

            acc.push({
              bidders: [bidder],
              config: {
                fpd: fpd
              }
            });
          }

          return acc;
        }, []);

        if (fpdConfigs.length) {
          __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepSetValue"](request, 'ext.prebid.bidderconfig', fpdConfigs);
        }
      } // https://iabtechlab.com/wp-content/uploads/2016/07/OpenRTB-Native-Ads-Specification-Final-1.2.pdf#page=40


      var nativeDataIdMap = {
        sponsoredBy: 1,
        // sponsored
        body: 2,
        // desc
        rating: 3,
        likes: 4,
        downloads: 5,
        price: 6,
        salePrice: 7,
        phone: 8,
        address: 9,
        body2: 10,
        // desc2
        cta: 12 // ctatext

      };
      var nativeDataNames = Object.keys(nativeDataIdMap);
      var nativeImgIdMap = {
        icon: 1,
        image: 3
      };
      var nativeEventTrackerEventMap = {
        impression: 1,
        'viewable-mrc50': 2,
        'viewable-mrc100': 3,
        'viewable-video50': 4
      };
      var nativeEventTrackerMethodMap = {
        img: 1,
        js: 2
      }; // enable reverse lookup

      [nativeDataIdMap, nativeImgIdMap, nativeEventTrackerEventMap, nativeEventTrackerMethodMap].forEach(function (map) {
        Object.keys(map).forEach(function (key) {
          map[map[key]] = key;
        });
      });
      /*
       * Protocol spec for OpenRTB endpoint
       * e.g., https://<prebid-server-url>/v1/openrtb2/auction
       */

      var bidIdMap = {};
      var nativeAssetCache = {}; // store processed native params to preserve

      var OPEN_RTB_PROTOCOL = {
        buildRequest: function buildRequest(s2sBidRequest, bidRequests, adUnits) {
          var imps = [];
          var aliases = {}; // transform ad unit into array of OpenRTB impression objects

          adUnits.forEach(function (adUnit) {
            var nativeParams = Object(__WEBPACK_IMPORTED_MODULE_7__src_native_js__["g"
            /* processNativeAdUnitParams */
            ])(__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](adUnit, 'mediaTypes.native'));
            var nativeAssets;

            if (nativeParams) {
              try {
                nativeAssets = nativeAssetCache[adUnit.code] = Object.keys(nativeParams).reduce(function (assets, type) {
                  var params = nativeParams[type];

                  function newAsset(obj) {
                    return _extends({
                      required: params.required ? 1 : 0
                    }, obj ? __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["cleanObj"](obj) : {});
                  }

                  switch (type) {
                    case 'image':
                    case 'icon':
                      var imgTypeId = nativeImgIdMap[type];

                      var asset = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["cleanObj"]({
                        type: imgTypeId,
                        w: __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](params, 'sizes.0'),
                        h: __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](params, 'sizes.1'),
                        wmin: __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](params, 'aspect_ratios.0.min_width'),
                        hmin: __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](params, 'aspect_ratios.0.min_height')
                      });

                      if (!(asset.w && asset.h || asset.hmin && asset.wmin)) {
                        throw 'invalid img sizes (must provide sizes or min_height & min_width if using aspect_ratios)';
                      }

                      if (Array.isArray(params.aspect_ratios)) {
                        // pass aspect_ratios as ext data I guess?
                        asset.ext = {
                          aspectratios: params.aspect_ratios.map(function (ratio) {
                            return "".concat(ratio.ratio_width, ":").concat(ratio.ratio_height);
                          })
                        };
                      }

                      assets.push(newAsset({
                        img: asset
                      }));
                      break;

                    case 'title':
                      if (!params.len) {
                        throw 'invalid title.len';
                      }

                      assets.push(newAsset({
                        title: {
                          len: params.len
                        }
                      }));
                      break;

                    default:
                      var dataAssetTypeId = nativeDataIdMap[type];

                      if (dataAssetTypeId) {
                        assets.push(newAsset({
                          data: {
                            type: dataAssetTypeId,
                            len: params.len
                          }
                        }));
                      }

                  }

                  return assets;
                }, []);
              } catch (e) {
                __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["logError"]('error creating native request: ' + String(e));
              }
            }

            var videoParams = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](adUnit, 'mediaTypes.video');

            var bannerParams = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](adUnit, 'mediaTypes.banner');

            adUnit.bids.forEach(function (bid) {
              // OpenRTB response contains the adunit code and bidder name. These are
              // combined to create a unique key for each bid since an id isn't returned
              bidIdMap["".concat(adUnit.code).concat(bid.bidder)] = bid.bid_id; // check for and store valid aliases to add to the request

              if (__WEBPACK_IMPORTED_MODULE_4__src_adapterManager_js__["default"].aliasRegistry[bid.bidder]) {
                aliases[bid.bidder] = __WEBPACK_IMPORTED_MODULE_4__src_adapterManager_js__["default"].aliasRegistry[bid.bidder];
              }
            });
            var mediaTypes = {};

            if (bannerParams && bannerParams.sizes) {
              var sizes = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["parseSizesInput"](bannerParams.sizes); // get banner sizes in form [{ w: <int>, h: <int> }, ...]


              var format = sizes.map(function (size) {
                var _size$split = size.split('x'),
                    _size$split2 = _slicedToArray(_size$split, 2),
                    width = _size$split2[0],
                    height = _size$split2[1];

                var w = parseInt(width, 10);
                var h = parseInt(height, 10);
                return {
                  w: w,
                  h: h
                };
              });
              mediaTypes['banner'] = {
                format: format
              };
            }

            if (!__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["isEmpty"](videoParams)) {
              if (videoParams.context === 'outstream' && !adUnit.renderer) {
                // Don't push oustream w/o renderer to request object.
                __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["logError"]('Outstream bid without renderer cannot be sent to Prebid Server.');
              } else {
                mediaTypes['video'] = videoParams;
              }
            }

            if (nativeAssets) {
              try {
                mediaTypes['native'] = {
                  request: JSON.stringify({
                    // TODO: determine best way to pass these and if we allow defaults
                    context: 1,
                    plcmttype: 1,
                    eventtrackers: [{
                      event: 1,
                      methods: [1]
                    }],
                    // TODO: figure out how to support privacy field
                    // privacy: int
                    assets: nativeAssets
                  }),
                  ver: '1.2'
                };
              } catch (e) {
                __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["logError"]('error creating native request: ' + String(e));
              }
            } // get bidder params in form { <bidder code>: {...params} }


            var ext = adUnit.bids.reduce(function (acc, bid) {
              var adapter = __WEBPACK_IMPORTED_MODULE_4__src_adapterManager_js__["default"].bidderRegistry[bid.bidder];

              if (adapter && adapter.getSpec().transformBidParams) {
                bid.params = adapter.getSpec().transformBidParams(bid.params, true);
              }

              acc[bid.bidder] = _s2sConfig.adapterOptions && _s2sConfig.adapterOptions[bid.bidder] ? _extends({}, bid.params, _s2sConfig.adapterOptions[bid.bidder]) : bid.params;
              return acc;
            }, {});
            var imp = {
              id: adUnit.code,
              ext: ext,
              secure: _s2sConfig.secure
            };
            /**
             * Prebid AdSlot
             * @type {(string|undefined)}
             */

            var pbAdSlot = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](adUnit, 'fpd.context.pbAdSlot');

            if (typeof pbAdSlot === 'string' && pbAdSlot) {
              __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepSetValue"](imp, 'ext.context.data.adslot', pbAdSlot);
            }

            _extends(imp, mediaTypes); // if storedAuctionResponse has been set, pass SRID


            var storedAuctionResponseBid = __WEBPACK_IMPORTED_MODULE_13_core_js_library_fn_array_find_js___default()(bidRequests[0].bids, function (bid) {
              return bid.adUnitCode === adUnit.code && bid.storedAuctionResponse;
            });

            if (storedAuctionResponseBid) {
              __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepSetValue"](imp, 'ext.prebid.storedauctionresponse.id', storedAuctionResponseBid.storedAuctionResponse.toString());
            }

            if (imp.banner || imp.video || imp["native"]) {
              imps.push(imp);
            }
          });

          if (!imps.length) {
            __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["logError"]('Request to Prebid Server rejected due to invalid media type(s) in adUnit.');

            return;
          }

          var request = {
            id: s2sBidRequest.tid,
            source: {
              tid: s2sBidRequest.tid
            },
            tmax: _s2sConfig.timeout,
            imp: imps,
            test: getConfig('debug') ? 1 : 0,
            ext: {
              prebid: {
                targeting: {
                  // includewinners is always true for openrtb
                  includewinners: true,
                  // includebidderkeys always false for openrtb
                  includebidderkeys: false
                }
              }
            }
          }; // s2sConfig video.ext.prebid is passed through openrtb to PBS

          if (_s2sConfig.extPrebid && _typeof(_s2sConfig.extPrebid) === 'object') {
            request.ext.prebid = _extends(request.ext.prebid, _s2sConfig.extPrebid);
          }
          /**
           * @type {(string[]|string|undefined)} - OpenRTB property 'cur', currencies available for bids
           */


          var adServerCur = __WEBPACK_IMPORTED_MODULE_5__src_config_js__["b"
          /* config */
          ].getConfig('currency.adServerCurrency');

          if (adServerCur && typeof adServerCur === 'string') {
            // if the value is a string, wrap it with an array
            request.cur = [adServerCur];
          } else if (Array.isArray(adServerCur) && adServerCur.length) {
            // if it's an array, get the first element
            request.cur = [adServerCur[0]];
          }

          _appendSiteAppDevice(request, bidRequests[0].refererInfo.referer);

          var digiTrust = _getDigiTrustQueryParams(bidRequests && bidRequests[0]);

          if (digiTrust) {
            __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepSetValue"](request, 'user.ext.digitrust', digiTrust);
          } // pass schain object if it is present


          var schain = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](bidRequests, '0.bids.0.schain');

          if (schain) {
            request.source.ext = {
              schain: schain
            };
          }

          if (!__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["isEmpty"](aliases)) {
            request.ext.prebid.aliases = aliases;
          }

          var bidUserIdAsEids = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](bidRequests, '0.bids.0.userIdAsEids');

          if (__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["isArray"](bidUserIdAsEids) && bidUserIdAsEids.length > 0) {
            __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepSetValue"](request, 'user.ext.eids', bidUserIdAsEids);
          }

          if (bidRequests) {
            if (bidRequests[0].gdprConsent) {
              // note - gdprApplies & consentString may be undefined in certain use-cases for consentManagement module
              var gdprApplies;

              if (typeof bidRequests[0].gdprConsent.gdprApplies === 'boolean') {
                gdprApplies = bidRequests[0].gdprConsent.gdprApplies ? 1 : 0;
              }

              __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepSetValue"](request, 'regs.ext.gdpr', gdprApplies);

              __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepSetValue"](request, 'user.ext.consent', bidRequests[0].gdprConsent.consentString);
            } // US Privacy (CCPA) support


            if (bidRequests[0].uspConsent) {
              __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepSetValue"](request, 'regs.ext.us_privacy', bidRequests[0].uspConsent);
            }
          }

          if (getConfig('coppa') === true) {
            __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepSetValue"](request, 'regs.coppa', 1);
          }

          var commonFpd = getConfig('fpd') || {};

          if (commonFpd.context) {
            __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepSetValue"](request, 'site.ext.data', commonFpd.context);
          }

          if (commonFpd.user) {
            __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepSetValue"](request, 'user.ext.data', commonFpd.user);
          }

          addBidderFirstPartyDataToRequest(request);
          return request;
        },
        interpretResponse: function interpretResponse(response, bidderRequests) {
          var bids = [];

          if (response.seatbid) {
            // a seatbid object contains a `bid` array and a `seat` string
            response.seatbid.forEach(function (seatbid) {
              (seatbid.bid || []).forEach(function (bid) {
                var bidRequest;
                var key = "".concat(bid.impid).concat(seatbid.seat);

                if (bidIdMap[key]) {
                  bidRequest = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["getBidRequest"](bidIdMap[key], bidderRequests);
                }

                var cpm = bid.price;
                var status = cpm !== 0 ? __WEBPACK_IMPORTED_MODULE_3__src_constants_json__["STATUS"].GOOD : __WEBPACK_IMPORTED_MODULE_3__src_constants_json__["STATUS"].NO_BID;
                var bidObject = Object(__WEBPACK_IMPORTED_MODULE_1__src_bidfactory_js__["a"
                /* createBid */
                ])(status, bidRequest || {
                  bidder: seatbid.seat,
                  src: TYPE
                });
                bidObject.cpm = cpm;

                var serverResponseTimeMs = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](response, ['ext', 'responsetimemillis', seatbid.seat].join('.'));

                if (bidRequest && serverResponseTimeMs) {
                  bidRequest.serverResponseTimeMs = serverResponseTimeMs;
                }

                var extPrebidTargeting = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](bid, 'ext.prebid.targeting'); // If ext.prebid.targeting exists, add it as a property value named 'adserverTargeting'


                if (extPrebidTargeting && _typeof(extPrebidTargeting) === 'object') {
                  bidObject.adserverTargeting = extPrebidTargeting;
                }

                bidObject.seatBidId = bid.id;

                if (__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](bid, 'ext.prebid.type') === __WEBPACK_IMPORTED_MODULE_6__src_mediaTypes_js__["d"
                /* VIDEO */
                ]) {
                  bidObject.mediaType = __WEBPACK_IMPORTED_MODULE_6__src_mediaTypes_js__["d"
                  /* VIDEO */
                  ];
                  var sizes = bidRequest.sizes && bidRequest.sizes[0];
                  bidObject.playerHeight = sizes[0];
                  bidObject.playerWidth = sizes[1]; // try to get cache values from 'response.ext.prebid.cache.js'
                  // else try 'bid.ext.prebid.targeting' as fallback

                  if (bid.ext.prebid.cache && _typeof(bid.ext.prebid.cache.vastXml) === 'object' && bid.ext.prebid.cache.vastXml.cacheId && bid.ext.prebid.cache.vastXml.url) {
                    bidObject.videoCacheKey = bid.ext.prebid.cache.vastXml.cacheId;
                    bidObject.vastUrl = bid.ext.prebid.cache.vastXml.url;
                  } else if (extPrebidTargeting && extPrebidTargeting.hb_uuid && extPrebidTargeting.hb_cache_host && extPrebidTargeting.hb_cache_path) {
                    bidObject.videoCacheKey = extPrebidTargeting.hb_uuid; // build url using key and cache host

                    bidObject.vastUrl = "https://".concat(extPrebidTargeting.hb_cache_host).concat(extPrebidTargeting.hb_cache_path, "?uuid=").concat(extPrebidTargeting.hb_uuid);
                  }

                  if (bid.adm) {
                    bidObject.vastXml = bid.adm;
                  }

                  if (!bidObject.vastUrl && bid.nurl) {
                    bidObject.vastUrl = bid.nurl;
                  }
                } else if (__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](bid, 'ext.prebid.type') === __WEBPACK_IMPORTED_MODULE_6__src_mediaTypes_js__["c"
                /* NATIVE */
                ]) {
                  var _trackers;

                  bidObject.mediaType = __WEBPACK_IMPORTED_MODULE_6__src_mediaTypes_js__["c"
                  /* NATIVE */
                  ];
                  var adm;

                  if (typeof bid.adm === 'string') {
                    adm = bidObject.adm = JSON.parse(bid.adm);
                  } else {
                    adm = bidObject.adm = bid.adm;
                  }

                  var trackers = (_trackers = {}, _defineProperty(_trackers, nativeEventTrackerMethodMap.img, adm.imptrackers || []), _defineProperty(_trackers, nativeEventTrackerMethodMap.js, adm.jstracker ? [adm.jstracker] : []), _trackers);

                  if (adm.eventtrackers) {
                    adm.eventtrackers.forEach(function (tracker) {
                      switch (tracker.method) {
                        case nativeEventTrackerMethodMap.img:
                          trackers[nativeEventTrackerMethodMap.img].push(tracker.url);
                          break;

                        case nativeEventTrackerMethodMap.js:
                          trackers[nativeEventTrackerMethodMap.js].push(tracker.url);
                          break;
                      }
                    });
                  }

                  if (__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["isPlainObject"](adm) && Array.isArray(adm.assets)) {
                    var origAssets = nativeAssetCache[bidRequest.adUnitCode];
                    bidObject["native"] = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["cleanObj"](adm.assets.reduce(function (_native2, asset) {
                      var origAsset = origAssets[asset.id];

                      if (__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["isPlainObject"](asset.img)) {
                        _native2[origAsset.img.type ? nativeImgIdMap[origAsset.img.type] : 'image'] = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["pick"](asset.img, ['url', 'w as width', 'h as height']);
                      } else if (__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["isPlainObject"](asset.title)) {
                        _native2['title'] = asset.title.text;
                      } else if (__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["isPlainObject"](asset.data)) {
                        nativeDataNames.forEach(function (dataType) {
                          if (nativeDataIdMap[dataType] === origAsset.data.type) {
                            _native2[dataType] = asset.data.value;
                          }
                        });
                      }

                      return _native2;
                    }, __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["cleanObj"]({
                      clickUrl: adm.link,
                      clickTrackers: __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepAccess"](adm, 'link.clicktrackers'),
                      impressionTrackers: trackers[nativeEventTrackerMethodMap.img],
                      javascriptTrackers: trackers[nativeEventTrackerMethodMap.js]
                    })));
                  } else {
                    __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["logError"]('prebid server native response contained no assets');
                  }
                } else {
                  // banner
                  if (bid.adm && bid.nurl) {
                    bidObject.ad = bid.adm;
                    bidObject.ad += __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["createTrackPixelHtml"](decodeURIComponent(bid.nurl));
                  } else if (bid.adm) {
                    bidObject.ad = bid.adm;
                  } else if (bid.nurl) {
                    bidObject.adUrl = bid.nurl;
                  }
                }

                bidObject.width = bid.w;
                bidObject.height = bid.h;

                if (bid.dealid) {
                  bidObject.dealId = bid.dealid;
                }

                bidObject.requestId = bidRequest.bidId || bidRequest.bid_Id;
                bidObject.creative_id = bid.crid;
                bidObject.creativeId = bid.crid;

                if (bid.burl) {
                  bidObject.burl = bid.burl;
                }

                bidObject.currency = response.cur ? response.cur : DEFAULT_S2S_CURRENCY; // TODO: Remove when prebid-server returns ttl and netRevenue

                bidObject.ttl = bid.ttl ? bid.ttl : DEFAULT_S2S_TTL;
                bidObject.netRevenue = bid.netRevenue ? bid.netRevenue : DEFAULT_S2S_NETREVENUE;
                bids.push({
                  adUnit: bid.impid,
                  bid: bidObject
                });
              });
            });
          }

          return bids;
        }
      };
      /**
       * Bidder adapter for Prebid Server
       */

      function PrebidServer() {
        var baseAdapter = new __WEBPACK_IMPORTED_MODULE_0__src_adapter_js__["a"
        /* default */
        ]('prebidServer');
        /* Prebid executes this function when the page asks to send out bid requests */

        baseAdapter.callBids = function (s2sBidRequest, bidRequests, addBidResponse, done, ajax) {
          var adUnits = __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["deepClone"](s2sBidRequest.ad_units); // at this point ad units should have a size array either directly or mapped so filter for that


          var validAdUnits = adUnits.filter(function (unit) {
            return unit.mediaTypes && (unit.mediaTypes["native"] || unit.mediaTypes.banner && unit.mediaTypes.banner.sizes || unit.mediaTypes.video && unit.mediaTypes.video.playerSize);
          }); // in case config.bidders contains invalid bidders, we only process those we sent requests for

          var requestedBidders = validAdUnits.map(function (adUnit) {
            return adUnit.bids.map(function (bid) {
              return bid.bidder;
            }).filter(__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["uniques"]);
          }).reduce(__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["flatten"]).filter(__WEBPACK_IMPORTED_MODULE_2__src_utils_js__["uniques"]);

          if (_s2sConfig && _s2sConfig.syncEndpoint) {
            var gdprConsent, uspConsent;

            if (Array.isArray(bidRequests) && bidRequests.length > 0) {
              gdprConsent = bidRequests[0].gdprConsent;
              uspConsent = bidRequests[0].uspConsent;
            }

            var syncBidders = _s2sConfig.bidders.map(function (bidder) {
              return __WEBPACK_IMPORTED_MODULE_4__src_adapterManager_js__["default"].aliasRegistry[bidder] || bidder;
            }).filter(function (bidder, index, array) {
              return array.indexOf(bidder) === index;
            });

            queueSync(syncBidders, gdprConsent, uspConsent);
          }

          var request = OPEN_RTB_PROTOCOL.buildRequest(s2sBidRequest, bidRequests, validAdUnits);
          var requestJson = request && JSON.stringify(request);

          if (request && requestJson) {
            ajax(_s2sConfig.endpoint, {
              success: function success(response) {
                return handleResponse(response, requestedBidders, bidRequests, addBidResponse, done);
              },
              error: done
            }, requestJson, {
              contentType: 'text/plain',
              withCredentials: true
            });
          }
        };
        /* Notify Prebid of bid responses so bids can get in the auction */


        function handleResponse(response, requestedBidders, bidderRequests, addBidResponse, done) {
          var result;
          var bids = [];

          try {
            result = JSON.parse(response);
            bids = OPEN_RTB_PROTOCOL.interpretResponse(result, bidderRequests, requestedBidders);
            bids.forEach(function (_ref2) {
              var adUnit = _ref2.adUnit,
                  bid = _ref2.bid;

              if (Object(__WEBPACK_IMPORTED_MODULE_8__src_adapters_bidderFactory_js__["isValid"])(adUnit, bid, bidderRequests)) {
                addBidResponse(adUnit, bid);
              }
            });
            bidderRequests.forEach(function (bidderRequest) {
              return __WEBPACK_IMPORTED_MODULE_9__src_events_js___default.a.emit(__WEBPACK_IMPORTED_MODULE_3__src_constants_json__["EVENTS"].BIDDER_DONE, bidderRequest);
            });
          } catch (error) {
            __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["logError"](error);
          }

          if (!result || result.status && __WEBPACK_IMPORTED_MODULE_10_core_js_library_fn_array_includes_js___default()(result.status, 'Error')) {
            __WEBPACK_IMPORTED_MODULE_2__src_utils_js__["logError"]('error parsing response: ', result.status);
          }

          done();
          doClientSideSyncs(requestedBidders);
        }

        return _extends(this, {
          callBids: baseAdapter.callBids,
          setBidderCode: baseAdapter.setBidderCode,
          type: TYPE
        });
      }

      __WEBPACK_IMPORTED_MODULE_4__src_adapterManager_js__["default"].registerBidAdapter(new PrebidServer(), 'prebidServer');
      /***/

    },

    /***/
    483:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (binding) */
      __webpack_require__.d(__webpack_exports__, "a", function () {
        return S2S_VENDORS;
      }); // accountId and bidders params are not included here, should be configured by end-user


      var S2S_VENDORS = {
        'appnexus': {
          adapter: 'prebidServer',
          enabled: true,
          endpoint: 'https://prebid.adnxs.com/pbs/v1/openrtb2/auction',
          syncEndpoint: 'https://prebid.adnxs.com/pbs/v1/cookie_sync',
          timeout: 1000
        },
        'rubicon': {
          adapter: 'prebidServer',
          enabled: true,
          endpoint: 'https://prebid-server.rubiconproject.com/openrtb2/auction',
          syncEndpoint: 'https://prebid-server.rubiconproject.com/cookie_sync',
          timeout: 500
        }
      };
      /***/
    }
  }, [481]);
  pbjsChunk([100], {
    /***/
    540:
    /***/
    function _(module, exports, __webpack_require__) {
      module.exports = __webpack_require__(541);
      /***/
    },

    /***/
    541:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "FASTLANE_ENDPOINT", function () {
        return FASTLANE_ENDPOINT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "VIDEO_ENDPOINT", function () {
        return VIDEO_ENDPOINT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "SYNC_ENDPOINT", function () {
        return SYNC_ENDPOINT;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "spec", function () {
        return spec;
      });
      /* harmony export (immutable) */


      __webpack_exports__["hasVideoMediaType"] = hasVideoMediaType;
      /* harmony export (immutable) */

      __webpack_exports__["masSizeOrdering"] = masSizeOrdering;
      /* harmony export (immutable) */

      __webpack_exports__["determineRubiconVideoSizeId"] = determineRubiconVideoSizeId;
      /* harmony export (immutable) */

      __webpack_exports__["getPriceGranularity"] = getPriceGranularity;
      /* harmony export (immutable) */

      __webpack_exports__["hasValidVideoParams"] = hasValidVideoParams;
      /* harmony export (immutable) */

      __webpack_exports__["hasValidSupplyChainParams"] = hasValidSupplyChainParams;
      /* harmony export (immutable) */

      __webpack_exports__["encodeParam"] = encodeParam;
      /* harmony export (immutable) */

      __webpack_exports__["resetUserSync"] = resetUserSync;
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__src_utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__src_adapters_bidderFactory_js__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__src_config_js__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__ = __webpack_require__(2);

      function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
      }

      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }

      function _iterableToArrayLimit(arr, i) {
        if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
          return;
        }

        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;

        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);

            if (i && _arr.length === i) break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"] != null) _i["return"]();
          } finally {
            if (_d) throw _e;
          }
        }

        return _arr;
      }

      function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
      }

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      var DEFAULT_INTEGRATION = 'pbjs_lite'; // always use https, regardless of whether or not current page is secure

      var FASTLANE_ENDPOINT = 'https://fastlane.rubiconproject.com/a/api/fastlane.json';
      var VIDEO_ENDPOINT = 'https://prebid-server.rubiconproject.com/openrtb2/auction';
      var SYNC_ENDPOINT = 'https://eus.rubiconproject.com/usync.html';
      var DIGITRUST_PROP_NAMES = {
        FASTLANE: {
          id: 'dt.id',
          keyv: 'dt.keyv',
          pref: 'dt.pref'
        },
        PREBID_SERVER: {
          id: 'id',
          keyv: 'keyv'
        }
      };
      var sizeMap = {
        1: '468x60',
        2: '728x90',
        5: '120x90',
        8: '120x600',
        9: '160x600',
        10: '300x600',
        13: '200x200',
        14: '250x250',
        15: '300x250',
        16: '336x280',
        17: '240x400',
        19: '300x100',
        31: '980x120',
        32: '250x360',
        33: '180x500',
        35: '980x150',
        37: '468x400',
        38: '930x180',
        39: '750x100',
        40: '750x200',
        41: '750x300',
        42: '2x4',
        43: '320x50',
        44: '300x50',
        48: '300x300',
        53: '1024x768',
        54: '300x1050',
        55: '970x90',
        57: '970x250',
        58: '1000x90',
        59: '320x80',
        60: '320x150',
        61: '1000x1000',
        64: '580x500',
        65: '640x480',
        66: '930x600',
        67: '320x480',
        68: '1800x1000',
        72: '320x320',
        73: '320x160',
        78: '980x240',
        79: '980x300',
        80: '980x400',
        83: '480x300',
        94: '970x310',
        96: '970x210',
        101: '480x320',
        102: '768x1024',
        103: '480x280',
        105: '250x800',
        108: '320x240',
        113: '1000x300',
        117: '320x100',
        125: '800x250',
        126: '200x600',
        144: '980x600',
        145: '980x150',
        152: '1000x250',
        156: '640x320',
        159: '320x250',
        179: '250x600',
        195: '600x300',
        198: '640x360',
        199: '640x200',
        213: '1030x590',
        214: '980x360',
        221: '1x1',
        229: '320x180',
        232: '580x400',
        234: '6x6',
        251: '2x2',
        257: '400x600',
        264: '970x1000',
        265: '1920x1080',
        274: '1800x200',
        278: '320x500',
        282: '320x400',
        288: '640x380'
      };

      __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["_each"](sizeMap, function (item, key) {
        return sizeMap[item] = key;
      });

      var spec = {
        code: 'rubicon',
        supportedMediaTypes: [__WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["b"
        /* BANNER */
        ], __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["d"
        /* VIDEO */
        ]],

        /**
         * @param {object} bid
         * @return boolean
         */
        isBidRequestValid: function isBidRequestValid(bid) {
          if (_typeof(bid.params) !== 'object') {
            return false;
          } // validate account, site, zone have numeric values


          for (var i = 0, props = ['accountId', 'siteId', 'zoneId']; i < props.length; i++) {
            bid.params[props[i]] = parseInt(bid.params[props[i]]);

            if (isNaN(bid.params[props[i]])) {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]('Rubicon: wrong format of accountId or siteId or zoneId.');

              return false;
            }
          }

          var bidFormat = bidType(bid, true); // bidType is undefined? Return false

          if (!bidFormat) {
            return false;
          } else if (bidFormat === 'video') {
            // bidType is video, make sure it has required params
            return hasValidVideoParams(bid);
          } // bidType is banner? return true


          return true;
        },

        /**
         * @param {BidRequest[]} bidRequests
         * @param bidderRequest
         * @return BidRequest[]
         */
        buildRequests: function buildRequests(bidRequests, bidderRequest) {
          // separate video bids because the requests are structured differently
          var requests = [];
          var videoRequests = bidRequests.filter(function (bidRequest) {
            return bidType(bidRequest) === 'video';
          }).map(function (bidRequest) {
            bidRequest.startTime = new Date().getTime();
            var data = {
              id: bidRequest.transactionId,
              test: __WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
              /* config */
              ].getConfig('debug') ? 1 : 0,
              cur: ['USD'],
              source: {
                tid: bidRequest.transactionId
              },
              tmax: __WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
              /* config */
              ].getConfig('TTL') || 1000,
              imp: [{
                exp: 300,
                id: bidRequest.adUnitCode,
                secure: 1,
                ext: _defineProperty({}, bidRequest.bidder, bidRequest.params),
                video: __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bidRequest, 'mediaTypes.video') || {}
              }],
              ext: {
                prebid: {
                  cache: {
                    vastxml: {
                      returnCreative: false // don't return the VAST

                    }
                  },
                  targeting: {
                    includewinners: true,
                    // includebidderkeys always false for openrtb
                    includebidderkeys: false,
                    pricegranularity: getPriceGranularity(__WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
                    /* config */
                    ])
                  }
                }
              }
            }; // Add alias if it is there

            if (bidRequest.bidder !== 'rubicon') {
              data.ext.prebid.aliases = _defineProperty({}, bidRequest.bidder, 'rubicon');
            }

            var bidFloor = parseFloat(__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bidRequest, 'params.floor'));

            if (!isNaN(bidFloor)) {
              data.imp[0].bidfloor = bidFloor;
            } // if value is set, will overwrite with same value


            data.imp[0].ext[bidRequest.bidder].video.size_id = determineRubiconVideoSizeId(bidRequest);
            appendSiteAppDevice(data, bidRequest, bidderRequest);
            addVideoParameters(data, bidRequest);

            var digiTrust = _getDigiTrustQueryParams(bidRequest, 'PREBID_SERVER');

            if (digiTrust) {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepSetValue"](data, 'user.ext.digitrust', digiTrust);
            }

            if (bidderRequest.gdprConsent) {
              // note - gdprApplies & consentString may be undefined in certain use-cases for consentManagement module
              var gdprApplies;

              if (typeof bidderRequest.gdprConsent.gdprApplies === 'boolean') {
                gdprApplies = bidderRequest.gdprConsent.gdprApplies ? 1 : 0;
              }

              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepSetValue"](data, 'regs.ext.gdpr', gdprApplies);

              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepSetValue"](data, 'user.ext.consent', bidderRequest.gdprConsent.consentString);
            }

            if (bidderRequest.uspConsent) {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepSetValue"](data, 'regs.ext.us_privacy', bidderRequest.uspConsent);
            }

            if (bidRequest.userId && _typeof(bidRequest.userId) === 'object' && (bidRequest.userId.tdid || bidRequest.userId.pubcid || bidRequest.userId.lipb || bidRequest.userId.idl_env)) {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepSetValue"](data, 'user.ext.eids', []);

              if (bidRequest.userId.tdid) {
                data.user.ext.eids.push({
                  source: 'adserver.org',
                  uids: [{
                    id: bidRequest.userId.tdid,
                    ext: {
                      rtiPartner: 'TDID'
                    }
                  }]
                });
              }

              if (bidRequest.userId.pubcid) {
                data.user.ext.eids.push({
                  source: 'pubcommon',
                  uids: [{
                    id: bidRequest.userId.pubcid
                  }]
                });
              } // support liveintent ID


              if (bidRequest.userId.lipb && bidRequest.userId.lipb.lipbid) {
                data.user.ext.eids.push({
                  source: 'liveintent.com',
                  uids: [{
                    id: bidRequest.userId.lipb.lipbid
                  }]
                });
                data.user.ext.tpid = {
                  source: 'liveintent.com',
                  uid: bidRequest.userId.lipb.lipbid
                };

                if (Array.isArray(bidRequest.userId.lipb.segments) && bidRequest.userId.lipb.segments.length) {
                  __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepSetValue"](data, 'rp.target.LIseg', bidRequest.userId.lipb.segments);
                }
              } // support identityLink (aka LiveRamp)


              if (bidRequest.userId.idl_env) {
                data.user.ext.eids.push({
                  source: 'liveramp.com',
                  uids: [{
                    id: bidRequest.userId.idl_env
                  }]
                });
              }
            }

            if (__WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
            /* config */
            ].getConfig('coppa') === true) {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepSetValue"](data, 'regs.coppa', 1);
            }

            if (bidRequest.schain && hasValidSupplyChainParams(bidRequest.schain)) {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepSetValue"](data, 'source.ext.schain', bidRequest.schain);
            }

            var siteData = _extends({}, bidRequest.params.inventory, __WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
            /* config */
            ].getConfig('fpd.context'));

            var userData = _extends({}, bidRequest.params.visitor, __WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
            /* config */
            ].getConfig('fpd.user'));

            if (!__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isEmpty"](siteData) || !__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isEmpty"](userData)) {
              var bidderData = {
                bidders: [bidderRequest.bidderCode],
                config: {
                  fpd: {}
                }
              };

              if (!__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isEmpty"](siteData)) {
                bidderData.config.fpd.site = siteData;
              }

              if (!__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isEmpty"](userData)) {
                bidderData.config.fpd.user = userData;
              }

              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepSetValue"](data, 'ext.prebid.bidderconfig.0', bidderData);
            }
            /**
             * Prebid AdSlot
             * @type {(string|undefined)}
             */


            var pbAdSlot = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bidRequest, 'fpd.context.pbAdSlot');

            if (typeof pbAdSlot === 'string' && pbAdSlot) {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepSetValue"](data.imp[0].ext, 'context.data.adslot', pbAdSlot);
            } // if storedAuctionResponse has been set, pass SRID


            if (bidRequest.storedAuctionResponse) {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepSetValue"](data.imp[0], 'ext.prebid.storedauctionresponse.id', bidRequest.storedAuctionResponse.toString());
            }

            return {
              method: 'POST',
              url: VIDEO_ENDPOINT,
              data: data,
              bidRequest: bidRequest
            };
          });

          if (__WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
          /* config */
          ].getConfig('rubicon.singleRequest') !== true) {
            // bids are not grouped if single request mode is not enabled
            requests = videoRequests.concat(bidRequests.filter(function (bidRequest) {
              return bidType(bidRequest) === 'banner';
            }).map(function (bidRequest) {
              var bidParams = spec.createSlotParams(bidRequest, bidderRequest);
              return {
                method: 'GET',
                url: FASTLANE_ENDPOINT,
                data: spec.getOrderedParams(bidParams).reduce(function (paramString, key) {
                  var propValue = bidParams[key];
                  return __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isStr"](propValue) && propValue !== '' || __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isNumber"](propValue) ? "".concat(paramString).concat(encodeParam(key, propValue), "&") : paramString;
                }, '') + "slots=1&rand=".concat(Math.random()),
                bidRequest: bidRequest
              };
            }));
          } else {
            // single request requires bids to be grouped by site id into a single request
            // note: utils.groupBy wasn't used because deep property access was needed
            var nonVideoRequests = bidRequests.filter(function (bidRequest) {
              return bidType(bidRequest) === 'banner';
            });
            var groupedBidRequests = nonVideoRequests.reduce(function (groupedBids, bid) {
              (groupedBids[bid.params['siteId']] = groupedBids[bid.params['siteId']] || []).push(bid);
              return groupedBids;
            }, {}); // fastlane SRA has a limit of 10 slots

            var SRA_BID_LIMIT = 10; // multiple requests are used if bids groups have more than 10 bids

            requests = videoRequests.concat(Object.keys(groupedBidRequests).reduce(function (aggregate, bidGroupKey) {
              // for each partioned bidGroup, append a bidRequest to requests list
              partitionArray(groupedBidRequests[bidGroupKey], SRA_BID_LIMIT).forEach(function (bidsInGroup) {
                var combinedSlotParams = spec.combineSlotUrlParams(bidsInGroup.map(function (bidRequest) {
                  return spec.createSlotParams(bidRequest, bidderRequest);
                })); // SRA request returns grouped bidRequest arrays not a plain bidRequest

                aggregate.push({
                  method: 'GET',
                  url: FASTLANE_ENDPOINT,
                  data: spec.getOrderedParams(combinedSlotParams).reduce(function (paramString, key) {
                    var propValue = combinedSlotParams[key];
                    return __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isStr"](propValue) && propValue !== '' || __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isNumber"](propValue) ? "".concat(paramString).concat(encodeParam(key, propValue), "&") : paramString;
                  }, '') + "slots=".concat(bidsInGroup.length, "&rand=").concat(Math.random()),
                  bidRequest: bidsInGroup
                });
              });
              return aggregate;
            }, []));
          }

          return requests;
        },
        getOrderedParams: function getOrderedParams(params) {
          var containsTgV = /^tg_v/;
          var containsTgI = /^tg_i/;
          var orderedParams = ['account_id', 'site_id', 'zone_id', 'size_id', 'alt_size_ids', 'p_pos', 'gdpr', 'gdpr_consent', 'us_privacy', 'rp_schain', 'tpid_tdid', 'tpid_liveintent.com', 'tg_v.LIseg', 'dt.id', 'dt.keyv', 'dt.pref', 'rf', 'p_geo.latitude', 'p_geo.longitude', 'kw'].concat(Object.keys(params).filter(function (item) {
            return containsTgV.test(item);
          })).concat(Object.keys(params).filter(function (item) {
            return containsTgI.test(item);
          })).concat(['tk_flint', 'x_source.tid', 'x_source.pchain', 'p_screen_res', 'rp_floor', 'rp_secure', 'tk_user_key']);
          return orderedParams.concat(Object.keys(params).filter(function (item) {
            return orderedParams.indexOf(item) === -1;
          }));
        },

        /**
         * @summary combines param values from an array of slots into a single semicolon delineated value
         * or just one value if they are all the same.
         * @param {Object[]} aSlotUrlParams - example [{p1: 'foo', p2: 'test'}, {p2: 'test'}, {p1: 'bar', p2: 'test'}]
         * @return {Object} - example {p1: 'foo;;bar', p2: 'test'}
         */
        combineSlotUrlParams: function combineSlotUrlParams(aSlotUrlParams) {
          // if only have params for one slot, return those params
          if (aSlotUrlParams.length === 1) {
            return aSlotUrlParams[0];
          } // reduce param values from all slot objects into an array of values in a single object


          var oCombinedSlotUrlParams = aSlotUrlParams.reduce(function (oCombinedParams, oSlotUrlParams, iIndex) {
            Object.keys(oSlotUrlParams).forEach(function (param) {
              if (!oCombinedParams.hasOwnProperty(param)) {
                oCombinedParams[param] = new Array(aSlotUrlParams.length); // initialize array;
              } // insert into the proper element of the array


              oCombinedParams[param].splice(iIndex, 1, oSlotUrlParams[param]);
            });
            return oCombinedParams;
          }, {}); // convert arrays into semicolon delimited strings

          var re = new RegExp('^([^;]*)(;\\1)+$'); // regex to test for duplication

          Object.keys(oCombinedSlotUrlParams).forEach(function (param) {
            var sValues = oCombinedSlotUrlParams[param].join(';'); // consolidate param values into one value if they are all the same

            var match = sValues.match(re);
            oCombinedSlotUrlParams[param] = match ? match[1] : sValues;
          });
          return oCombinedSlotUrlParams;
        },

        /**
         * @param {BidRequest} bidRequest
         * @param {Object} bidderRequest
         * @returns {Object} - object key values named and formatted as slot params
         */
        createSlotParams: function createSlotParams(bidRequest, bidderRequest) {
          bidRequest.startTime = new Date().getTime();
          var params = bidRequest.params; // use rubicon sizes if provided, otherwise adUnit.sizes

          var parsedSizes = parseSizes(bidRequest, 'banner');

          var _ref = params.latLong || [],
              _ref2 = _slicedToArray(_ref, 2),
              latitude = _ref2[0],
              longitude = _ref2[1];

          var configIntType = __WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
          /* config */
          ].getConfig('rubicon.int_type');

          var data = {
            'account_id': params.accountId,
            'site_id': params.siteId,
            'zone_id': params.zoneId,
            'size_id': parsedSizes[0],
            'alt_size_ids': parsedSizes.slice(1).join(',') || undefined,
            'rp_floor': (params.floor = parseFloat(params.floor)) > 0.01 ? params.floor : 0.01,
            'rp_secure': '1',
            'tk_flint': "".concat(configIntType || DEFAULT_INTEGRATION, "_v3.13.0-pre"),
            'x_source.tid': bidRequest.transactionId,
            'x_source.pchain': params.pchain,
            'p_screen_res': _getScreenResolution(),
            'tk_user_key': params.userId,
            'p_geo.latitude': isNaN(parseFloat(latitude)) ? undefined : parseFloat(latitude).toFixed(4),
            'p_geo.longitude': isNaN(parseFloat(longitude)) ? undefined : parseFloat(longitude).toFixed(4),
            'tg_fl.eid': bidRequest.code,
            'rf': _getPageUrl(bidRequest, bidderRequest)
          }; // add p_pos only if specified and valid
          // For SRA we need to explicitly put empty semi colons so AE treats it as empty, instead of copying the latter value

          data['p_pos'] = params.position === 'atf' || params.position === 'btf' ? params.position : '';

          if (bidRequest.userId) {
            if (bidRequest.userId.tdid) {
              data['tpid_tdid'] = bidRequest.userId.tdid;
            } // support liveintent ID


            if (bidRequest.userId.lipb && bidRequest.userId.lipb.lipbid) {
              data['tpid_liveintent.com'] = bidRequest.userId.lipb.lipbid;

              if (Array.isArray(bidRequest.userId.lipb.segments) && bidRequest.userId.lipb.segments.length) {
                data['tg_v.LIseg'] = bidRequest.userId.lipb.segments.join(',');
              }
            } // support identityLink (aka LiveRamp)


            if (bidRequest.userId.idl_env) {
              data['tpid_liveramp.com'] = bidRequest.userId.idl_env;
            }
          }

          if (bidderRequest.gdprConsent) {
            // add 'gdpr' only if 'gdprApplies' is defined
            if (typeof bidderRequest.gdprConsent.gdprApplies === 'boolean') {
              data['gdpr'] = Number(bidderRequest.gdprConsent.gdprApplies);
            }

            data['gdpr_consent'] = bidderRequest.gdprConsent.consentString;
          }

          if (bidderRequest.uspConsent) {
            data['us_privacy'] = encodeURIComponent(bidderRequest.uspConsent);
          } // visitor properties


          var visitorData = _extends({}, params.visitor, __WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
          /* config */
          ].getConfig('fpd.user'));

          Object.keys(visitorData).forEach(function (key) {
            if (visitorData[key] != null && key !== 'keywords') {
              data["tg_v.".concat(key)] = _typeof(visitorData[key]) === 'object' && !Array.isArray(visitorData[key]) ? JSON.stringify(visitorData[key]) : visitorData[key].toString(); // initialize array;
            }
          }); // inventory properties

          var inventoryData = _extends({}, params.inventory, __WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
          /* config */
          ].getConfig('fpd.context'));

          Object.keys(inventoryData).forEach(function (key) {
            if (inventoryData[key] != null && key !== 'keywords') {
              data["tg_i.".concat(key)] = _typeof(inventoryData[key]) === 'object' && !Array.isArray(inventoryData[key]) ? JSON.stringify(inventoryData[key]) : inventoryData[key].toString();
            }
          }); // keywords

          var keywords = (params.keywords || []).concat(__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](__WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
          /* config */
          ].getConfig('fpd.user'), 'keywords') || [], __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](__WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
          /* config */
          ].getConfig('fpd.context'), 'keywords') || []);
          data.kw = keywords.length ? keywords.join(',') : '';
          /**
           * Prebid AdSlot
           * @type {(string|undefined)}
           */

          var pbAdSlot = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bidRequest, 'fpd.context.pbAdSlot');

          if (typeof pbAdSlot === 'string' && pbAdSlot) {
            data['tg_i.dfp_ad_unit_code'] = pbAdSlot.replace(/^\/+/, '');
          } // digitrust properties


          var digitrustParams = _getDigiTrustQueryParams(bidRequest, 'FASTLANE');

          _extends(data, digitrustParams);

          if (__WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
          /* config */
          ].getConfig('coppa') === true) {
            data['coppa'] = 1;
          } // if SupplyChain is supplied and contains all required fields


          if (bidRequest.schain && hasValidSupplyChainParams(bidRequest.schain)) {
            data.rp_schain = spec.serializeSupplyChain(bidRequest.schain);
          }

          return data;
        },

        /**
         * Serializes schain params according to OpenRTB requirements
         * @param {Object} supplyChain
         * @returns {String}
         */
        serializeSupplyChain: function serializeSupplyChain(supplyChain) {
          var supplyChainIsValid = hasValidSupplyChainParams(supplyChain);
          if (!supplyChainIsValid) return '';
          var ver = supplyChain.ver,
              complete = supplyChain.complete,
              nodes = supplyChain.nodes;
          return "".concat(ver, ",").concat(complete, "!").concat(spec.serializeSupplyChainNodes(nodes));
        },

        /**
         * Properly sorts schain object params
         * @param {Array} nodes
         * @returns {String}
         */
        serializeSupplyChainNodes: function serializeSupplyChainNodes(nodes) {
          var nodePropOrder = ['asi', 'sid', 'hp', 'rid', 'name', 'domain'];
          return nodes.map(function (node) {
            return nodePropOrder.map(function (prop) {
              return encodeURIComponent(node[prop] || '');
            }).join(',');
          }).join('!');
        },

        /**
         * @param {*} responseObj
         * @param {BidRequest|Object.<string, BidRequest[]>} bidRequest - if request was SRA the bidRequest argument will be a keyed BidRequest array object,
         * non-SRA responses return a plain BidRequest object
         * @return {Bid[]} An array of bids which
         */
        interpretResponse: function interpretResponse(responseObj, _ref3) {
          var bidRequest = _ref3.bidRequest;
          responseObj = responseObj.body; // check overall response

          if (!responseObj || _typeof(responseObj) !== 'object') {
            return [];
          } // video response from PBS Java openRTB


          if (responseObj.seatbid) {
            var responseErrors = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](responseObj, 'ext.errors.rubicon');

            if (Array.isArray(responseErrors) && responseErrors.length > 0) {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"]('Rubicon: Error in video response');
            }

            var bids = [];
            responseObj.seatbid.forEach(function (seatbid) {
              (seatbid.bid || []).forEach(function (bid) {
                var bidObject = {
                  requestId: bidRequest.bidId,
                  currency: responseObj.cur || 'USD',
                  creativeId: bid.crid,
                  cpm: bid.price || 0,
                  bidderCode: seatbid.seat,
                  ttl: 300,
                  netRevenue: __WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
                  /* config */
                  ].getConfig('rubicon.netRevenue') !== false,
                  // If anything other than false, netRev is true
                  width: bid.w || __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bidRequest, 'mediaTypes.video.w') || __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bidRequest, 'params.video.playerWidth'),
                  height: bid.h || __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bidRequest, 'mediaTypes.video.h') || __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bidRequest, 'params.video.playerHeight')
                };

                if (bid.id) {
                  bidObject.seatBidId = bid.id;
                }

                if (bid.dealid) {
                  bidObject.dealId = bid.dealid;
                }

                var serverResponseTimeMs = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](responseObj, 'ext.responsetimemillis.rubicon');

                if (bidRequest && serverResponseTimeMs) {
                  bidRequest.serverResponseTimeMs = serverResponseTimeMs;
                }

                if (__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'ext.prebid.type') === __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["d"
                /* VIDEO */
                ]) {
                  bidObject.mediaType = __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["d"
                  /* VIDEO */
                  ];

                  var extPrebidTargeting = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'ext.prebid.targeting'); // If ext.prebid.targeting exists, add it as a property value named 'adserverTargeting'


                  if (extPrebidTargeting && _typeof(extPrebidTargeting) === 'object') {
                    bidObject.adserverTargeting = extPrebidTargeting;
                  } // try to get cache values from 'response.ext.prebid.cache.js'
                  // else try 'bid.ext.prebid.targeting' as fallback


                  if (bid.ext.prebid.cache && _typeof(bid.ext.prebid.cache.vastXml) === 'object' && bid.ext.prebid.cache.vastXml.cacheId && bid.ext.prebid.cache.vastXml.url) {
                    bidObject.videoCacheKey = bid.ext.prebid.cache.vastXml.cacheId;
                    bidObject.vastUrl = bid.ext.prebid.cache.vastXml.url;
                  } else if (extPrebidTargeting && extPrebidTargeting.hb_uuid && extPrebidTargeting.hb_cache_host && extPrebidTargeting.hb_cache_path) {
                    bidObject.videoCacheKey = extPrebidTargeting.hb_uuid; // build url using key and cache host

                    bidObject.vastUrl = "https://".concat(extPrebidTargeting.hb_cache_host).concat(extPrebidTargeting.hb_cache_path, "?uuid=").concat(extPrebidTargeting.hb_uuid);
                  }

                  if (bid.adm) {
                    bidObject.vastXml = bid.adm;
                  }

                  if (bid.nurl) {
                    bidObject.vastUrl = bid.nurl;
                  }

                  if (!bidObject.vastUrl && bid.nurl) {
                    bidObject.vastUrl = bid.nurl;
                  }
                } else {
                  __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"]('Rubicon: video response received non-video media type');
                }

                bids.push(bidObject);
              });
            });
            return bids;
          }

          var ads = responseObj.ads; // video ads array is wrapped in an object

          if (_typeof(bidRequest) === 'object' && !Array.isArray(bidRequest) && bidType(bidRequest) === 'video' && _typeof(ads) === 'object') {
            ads = ads[bidRequest.adUnitCode];
          } // check the ad response


          if (!Array.isArray(ads) || ads.length < 1) {
            return [];
          }

          return ads.reduce(function (bids, ad, i) {
            if (ad.status !== 'ok') {
              return bids;
            } // associate bidRequests; assuming ads matches bidRequest


            var associatedBidRequest = Array.isArray(bidRequest) ? bidRequest[i] : bidRequest;

            if (associatedBidRequest && _typeof(associatedBidRequest) === 'object') {
              var bid = {
                requestId: associatedBidRequest.bidId,
                currency: 'USD',
                creativeId: ad.creative_id || "".concat(ad.network || '', "-").concat(ad.advertiser || ''),
                cpm: ad.cpm || 0,
                dealId: ad.deal,
                ttl: 300,
                // 5 minutes
                netRevenue: __WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
                /* config */
                ].getConfig('rubicon.netRevenue') !== false,
                // If anything other than false, netRev is true
                rubicon: {
                  advertiserId: ad.advertiser,
                  networkId: ad.network
                },
                meta: {
                  advertiserId: ad.advertiser,
                  networkId: ad.network
                }
              };

              if (ad.creative_type) {
                bid.mediaType = ad.creative_type;
              }

              if (ad.creative_type === __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["d"
              /* VIDEO */
              ]) {
                bid.width = associatedBidRequest.params.video.playerWidth;
                bid.height = associatedBidRequest.params.video.playerHeight;
                bid.vastUrl = ad.creative_depot_url;
                bid.impression_id = ad.impression_id;
                bid.videoCacheKey = ad.impression_id;
              } else {
                bid.ad = _renderCreative(ad.script, ad.impression_id);

                var _sizeMap$ad$size_id$s = sizeMap[ad.size_id].split('x').map(function (num) {
                  return Number(num);
                });

                var _sizeMap$ad$size_id$s2 = _slicedToArray(_sizeMap$ad$size_id$s, 2);

                bid.width = _sizeMap$ad$size_id$s2[0];
                bid.height = _sizeMap$ad$size_id$s2[1];
              } // add server-side targeting


              bid.rubiconTargeting = (Array.isArray(ad.targeting) ? ad.targeting : []).reduce(function (memo, item) {
                memo[item.key] = item.values[0];
                return memo;
              }, {
                'rpfl_elemid': associatedBidRequest.adUnitCode
              });
              bids.push(bid);
            } else {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]("Rubicon: bidRequest undefined at index position:".concat(i), bidRequest, responseObj);
            }

            return bids;
          }, []).sort(function (adA, adB) {
            return (adB.cpm || 0.0) - (adA.cpm || 0.0);
          });
        },
        getUserSyncs: function getUserSyncs(syncOptions, responses, gdprConsent, uspConsent) {
          if (!hasSynced && syncOptions.iframeEnabled) {
            // data is only assigned if params are available to pass to SYNC_ENDPOINT
            var params = '';

            if (gdprConsent && typeof gdprConsent.consentString === 'string') {
              // add 'gdpr' only if 'gdprApplies' is defined
              if (typeof gdprConsent.gdprApplies === 'boolean') {
                params += "?gdpr=".concat(Number(gdprConsent.gdprApplies), "&gdpr_consent=").concat(gdprConsent.consentString);
              } else {
                params += "?gdpr_consent=".concat(gdprConsent.consentString);
              }
            }

            if (uspConsent) {
              params += "".concat(params ? '&' : '?', "us_privacy=").concat(encodeURIComponent(uspConsent));
            }

            hasSynced = true;
            return {
              type: 'iframe',
              url: SYNC_ENDPOINT + params
            };
          }
        },

        /**
         * Covert bid param types for S2S
         * @param {Object} params bid params
         * @param {Boolean} isOpenRtb boolean to check openrtb2 protocol
         * @return {Object} params bid params
         */
        transformBidParams: function transformBidParams(params, isOpenRtb) {
          return __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["convertTypes"]({
            'accountId': 'number',
            'siteId': 'number',
            'zoneId': 'number'
          }, params);
        }
      };

      function _getScreenResolution() {
        return [window.screen.width, window.screen.height].join('x');
      }

      function _getDigiTrustQueryParams() {
        var _digiTrustQueryParams;

        var bidRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var endpointName = arguments.length > 1 ? arguments[1] : undefined;

        if (!endpointName || !DIGITRUST_PROP_NAMES[endpointName]) {
          return null;
        }

        var propNames = DIGITRUST_PROP_NAMES[endpointName];

        function getDigiTrustId() {
          var bidRequestDigitrust = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bidRequest, 'userId.digitrustid.data');

          if (bidRequestDigitrust) {
            return bidRequestDigitrust;
          }

          var digiTrustUser = window.DigiTrust && (__WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
          /* config */
          ].getConfig('digiTrustId') || window.DigiTrust.getUser({
            member: 'T9QSFKPDN9'
          }));
          return digiTrustUser && digiTrustUser.success && digiTrustUser.identity || null;
        }

        var digiTrustId = getDigiTrustId(); // Verify there is an ID and this user has not opted out

        if (!digiTrustId || digiTrustId.privacy && digiTrustId.privacy.optout) {
          return null;
        }

        var digiTrustQueryParams = (_digiTrustQueryParams = {}, _defineProperty(_digiTrustQueryParams, propNames.id, digiTrustId.id), _defineProperty(_digiTrustQueryParams, propNames.keyv, digiTrustId.keyv), _digiTrustQueryParams);

        if (propNames.pref) {
          digiTrustQueryParams[propNames.pref] = 0;
        }

        return digiTrustQueryParams;
      }
      /**
       * @param {BidRequest} bidRequest
       * @param bidderRequest
       * @returns {string}
       */


      function _getPageUrl(bidRequest, bidderRequest) {
        var pageUrl = __WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
        /* config */
        ].getConfig('pageUrl');

        if (bidRequest.params.referrer) {
          pageUrl = bidRequest.params.referrer;
        } else if (!pageUrl) {
          pageUrl = bidderRequest.refererInfo.referer;
        }

        return bidRequest.params.secure ? pageUrl.replace(/^http:/i, 'https:') : pageUrl;
      }

      function _renderCreative(script, impId) {
        return "<html>\n<head><script type='text/javascript'>inDapIF=true;</script></head>\n<body style='margin : 0; padding: 0;'>\n<!-- Rubicon Project Ad Tag -->\n<div data-rp-impression-id='".concat(impId, "'>\n<script type='text/javascript'>").concat(script, "</script>\n</div>\n</body>\n</html>");
      }

      function parseSizes(bid, mediaType) {
        var params = bid.params;

        if (mediaType === 'video') {
          var size = [];

          if (params.video && params.video.playerWidth && params.video.playerHeight) {
            size = [params.video.playerWidth, params.video.playerHeight];
          } else if (Array.isArray(__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'mediaTypes.video.playerSize')) && bid.mediaTypes.video.playerSize.length === 1) {
            size = bid.mediaTypes.video.playerSize[0];
          } else if (Array.isArray(bid.sizes) && bid.sizes.length > 0 && Array.isArray(bid.sizes[0]) && bid.sizes[0].length > 1) {
            size = bid.sizes[0];
          }

          return size;
        } // deprecated: temp legacy support


        var sizes = [];

        if (Array.isArray(params.sizes)) {
          sizes = params.sizes;
        } else if (typeof __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'mediaTypes.banner.sizes') !== 'undefined') {
          sizes = mapSizes(bid.mediaTypes.banner.sizes);
        } else if (Array.isArray(bid.sizes) && bid.sizes.length > 0) {
          sizes = mapSizes(bid.sizes);
        } else {
          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"]('Rubicon: no sizes are setup or found');
        }

        return masSizeOrdering(sizes);
      }
      /**
       * @param {Object} data
       * @param bidRequest
       * @param bidderRequest
       */


      function appendSiteAppDevice(data, bidRequest, bidderRequest) {
        if (!data) return; // ORTB specifies app OR site

        if (_typeof(__WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
        /* config */
        ].getConfig('app')) === 'object') {
          data.app = __WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
          /* config */
          ].getConfig('app');
        } else {
          data.site = {
            page: _getPageUrl(bidRequest, bidderRequest)
          };
        }

        if (_typeof(__WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
        /* config */
        ].getConfig('device')) === 'object') {
          data.device = __WEBPACK_IMPORTED_MODULE_2__src_config_js__["b"
          /* config */
          ].getConfig('device');
        } // Add language to site and device objects if there


        if (bidRequest.params.video.language) {
          ['site', 'device'].forEach(function (param) {
            if (data[param]) {
              data[param].content = _extends({
                language: bidRequest.params.video.language
              }, data[param].content);
            }
          });
        }
      }
      /**
       * @param {Object} data
       * @param {BidRequest} bidRequest
       */


      function addVideoParameters(data, bidRequest) {
        if (_typeof(data.imp[0].video) === 'object' && data.imp[0].video.skip === undefined) {
          data.imp[0].video.skip = bidRequest.params.video.skip;
        }

        if (_typeof(data.imp[0].video) === 'object' && data.imp[0].video.skipafter === undefined) {
          data.imp[0].video.skipafter = bidRequest.params.video.skipdelay;
        } // video.pos can already be specified by adunit.mediatypes.video.pos.
        // but if not, it might be specified in the params


        if (_typeof(data.imp[0].video) === 'object' && data.imp[0].video.pos === undefined) {
          if (bidRequest.params.position === 'atf') {
            data.imp[0].video.pos = 1;
          } else if (bidRequest.params.position === 'btf') {
            data.imp[0].video.pos = 3;
          }
        }

        var size = parseSizes(bidRequest, 'video');
        data.imp[0].video.w = size[0];
        data.imp[0].video.h = size[1];
      }
      /**
       * @param sizes
       * @returns {*}
       */


      function mapSizes(sizes) {
        return __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["parseSizesInput"](sizes) // map sizes while excluding non-matches
        .reduce(function (result, size) {
          var mappedSize = parseInt(sizeMap[size], 10);

          if (mappedSize) {
            result.push(mappedSize);
          }

          return result;
        }, []);
      }
      /**
       * Test if bid has mediaType or mediaTypes set for video.
       * Also makes sure the video object is present in the rubicon bidder params
       * @param {BidRequest} bidRequest
       * @returns {boolean}
       */


      function hasVideoMediaType(bidRequest) {
        if (_typeof(__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bidRequest, 'params.video')) !== 'object') {
          return false;
        }

        return typeof __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bidRequest, "mediaTypes.".concat(__WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["d"
        /* VIDEO */
        ])) !== 'undefined';
      }
      /**
       * Determine bidRequest mediaType
       * @param bid the bid to test
       * @param log whether we should log errors/warnings for invalid bids
       * @returns {string|undefined} Returns 'video' or 'banner' if resolves to a type, or undefined otherwise (invalid).
       */


      function bidType(bid) {
        var log = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; // Is it considered video ad unit by rubicon

        if (hasVideoMediaType(bid)) {
          // Removed legacy mediaType support. new way using mediaTypes.video object is now required
          // We require either context as instream or outstream
          if (['outstream', 'instream'].indexOf(__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, "mediaTypes.".concat(__WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["d"
          /* VIDEO */
          ], ".context"))) === -1) {
            if (log) {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]('Rubicon: mediaTypes.video.context must be outstream or instream');
            }

            return;
          } // we require playerWidth and playerHeight to come from one of params.playerWidth/playerHeight or mediaTypes.video.playerSize or adUnit.sizes


          if (parseSizes(bid, 'video').length < 2) {
            if (log) {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]('Rubicon: could not determine the playerSize of the video');
            }

            return;
          }

          if (log) {
            __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logMessage"]('Rubicon: making video request for adUnit', bid.adUnitCode);
          }

          return 'video';
        } else {
          // we require banner sizes to come from one of params.sizes or mediaTypes.banner.sizes or adUnit.sizes, in that order
          // if we cannot determine them, we reject it!
          if (parseSizes(bid, 'banner').length === 0) {
            if (log) {
              __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]('Rubicon: could not determine the sizes for banner request');
            }

            return;
          } // everything looks good for banner so lets do it


          if (log) {
            __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logMessage"]('Rubicon: making banner request for adUnit', bid.adUnitCode);
          }

          return 'banner';
        }
      }

      function masSizeOrdering(sizes) {
        var MAS_SIZE_PRIORITY = [15, 2, 9];
        return sizes.sort(function (first, second) {
          // sort by MAS_SIZE_PRIORITY priority order
          var firstPriority = MAS_SIZE_PRIORITY.indexOf(first);
          var secondPriority = MAS_SIZE_PRIORITY.indexOf(second);

          if (firstPriority > -1 || secondPriority > -1) {
            if (firstPriority === -1) {
              return 1;
            }

            if (secondPriority === -1) {
              return -1;
            }

            return firstPriority - secondPriority;
          } // and finally ascending order


          return first - second;
        });
      }

      function determineRubiconVideoSizeId(bid) {
        // If we have size_id in the bid then use it
        var rubiconSizeId = parseInt(__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'params.video.size_id'));

        if (!isNaN(rubiconSizeId)) {
          return rubiconSizeId;
        } // otherwise 203 for outstream and 201 for instream
        // When this function is used we know it has to be one of outstream or instream


        return __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, "mediaTypes.".concat(__WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["d"
        /* VIDEO */
        ], ".context")) === 'outstream' ? 203 : 201;
      }
      /**
       * @param {PrebidConfig} config
       * @returns {{ranges: {ranges: Object[]}}}
       */


      function getPriceGranularity(config) {
        return {
          ranges: {
            low: [{
              max: 5.00,
              increment: 0.50
            }],
            medium: [{
              max: 20.00,
              increment: 0.10
            }],
            high: [{
              max: 20.00,
              increment: 0.01
            }],
            auto: [{
              max: 5.00,
              increment: 0.05
            }, {
              min: 5.00,
              max: 10.00,
              increment: 0.10
            }, {
              min: 10.00,
              max: 20.00,
              increment: 0.50
            }],
            dense: [{
              max: 3.00,
              increment: 0.01
            }, {
              min: 3.00,
              max: 8.00,
              increment: 0.05
            }, {
              min: 8.00,
              max: 20.00,
              increment: 0.50
            }],
            custom: config.getConfig('customPriceBucket') && config.getConfig('customPriceBucket').buckets
          }[config.getConfig('priceGranularity')]
        };
      } // Function to validate the required video params


      function hasValidVideoParams(bid) {
        var isValid = true; // incase future javascript changes the string represenation of the array or number classes!

        var arrayType = Object.prototype.toString.call([]);
        var numberType = Object.prototype.toString.call(0); // required params and their associated object type

        var requiredParams = {
          mimes: arrayType,
          protocols: arrayType,
          maxduration: numberType,
          linearity: numberType,
          api: arrayType
        }; // loop through each param and verify it has the correct

        Object.keys(requiredParams).forEach(function (param) {
          if (Object.prototype.toString.call(__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["deepAccess"](bid, 'mediaTypes.video.' + param)) !== requiredParams[param]) {
            isValid = false;

            __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]('Rubicon: mediaTypes.video.' + param + ' is required and must be of type: ' + requiredParams[param]);
          }
        });
        return isValid;
      }
      /**
       * Make sure the required params are present
       * @param {Object} schain
       * @param {Bool}
       */


      function hasValidSupplyChainParams(schain) {
        var isValid = false;
        var requiredFields = ['asi', 'sid', 'hp'];
        if (!schain.nodes) return isValid;
        isValid = schain.nodes.reduce(function (status, node) {
          if (!status) return status;
          return requiredFields.every(function (field) {
            return node[field];
          });
        }, true);
        if (!isValid) __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"]('Rubicon: required schain params missing');
        return isValid;
      }
      /**
       * Creates a URL key value param, encoding the
       * param unless the key is schain
       * @param {String} key
       * @param {String} param
       * @returns {String}
       */


      function encodeParam(key, param) {
        if (key === 'rp_schain') return "rp_schain=".concat(param);
        return "".concat(key, "=").concat(encodeURIComponent(param));
      }
      /**
       * split array into multiple arrays of defined size
       * @param {Array} array
       * @param {number} size
       * @returns {Array}
       */


      function partitionArray(array, size) {
        return array.map(function (e, i) {
          return i % size === 0 ? array.slice(i, i + size) : null;
        }).filter(function (e) {
          return e;
        });
      }

      var hasSynced = false;

      function resetUserSync() {
        hasSynced = false;
      }

      Object(__WEBPACK_IMPORTED_MODULE_1__src_adapters_bidderFactory_js__["registerBidder"])(spec);
      /***/
    }
  }, [540]);
  pbjsChunk([93], {
    /***/
    558:
    /***/
    function _(module, exports, __webpack_require__) {
      module.exports = __webpack_require__(559);
      /***/
    },

    /***/
    559:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "sharethroughInternal", function () {
        return sharethroughInternal;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "sharethroughAdapterSpec", function () {
        return sharethroughAdapterSpec;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__src_adapters_bidderFactory_js__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__src_utils_js__ = __webpack_require__(0);

      var VERSION = '3.2.1';
      var BIDDER_CODE = 'sharethrough';
      var STR_ENDPOINT = 'https://btlr.sharethrough.com/WYu2BXv1/v1';
      var DEFAULT_SIZE = [1, 1]; // this allows stubbing of utility function that is used internally by the sharethrough adapter

      var sharethroughInternal = {
        b64EncodeUnicode: b64EncodeUnicode,
        handleIframe: handleIframe,
        isLockedInFrame: isLockedInFrame,
        getProtocol: getProtocol
      };
      var sharethroughAdapterSpec = {
        code: BIDDER_CODE,
        isBidRequestValid: function isBidRequestValid(bid) {
          return !!bid.params.pkey && bid.bidder === BIDDER_CODE;
        },
        buildRequests: function buildRequests(bidRequests, bidderRequest) {
          return bidRequests.map(function (bidRequest) {
            var query = {
              placement_key: bidRequest.params.pkey,
              bidId: bidRequest.bidId,
              consent_required: false,
              instant_play_capable: canAutoPlayHTML5Video(),
              hbSource: 'prebid',
              hbVersion: "3.13.0-pre",
              strVersion: VERSION
            };
            var nonHttp = sharethroughInternal.getProtocol().indexOf('http') < 0;
            query.secure = nonHttp || sharethroughInternal.getProtocol().indexOf('https') > -1;

            if (bidderRequest && bidderRequest.gdprConsent && bidderRequest.gdprConsent.consentString) {
              query.consent_string = bidderRequest.gdprConsent.consentString;
            }

            if (bidderRequest && bidderRequest.gdprConsent) {
              query.consent_required = !!bidderRequest.gdprConsent.gdprApplies;
            }

            if (bidderRequest && bidderRequest.uspConsent) {
              query.us_privacy = bidderRequest.uspConsent;
            }

            if (bidRequest.userId && bidRequest.userId.tdid) {
              query.ttduid = bidRequest.userId.tdid;
            }

            if (bidRequest.schain) {
              query.schain = JSON.stringify(bidRequest.schain);
            }

            if (bidRequest.bidfloor) {
              query.bidfloor = parseFloat(bidRequest.bidfloor);
            } // Data that does not need to go to the server,
            // but we need as part of interpretResponse()


            var strData = {
              skipIframeBusting: bidRequest.params.iframe,
              iframeSize: bidRequest.params.iframeSize,
              sizes: bidRequest.sizes
            };
            return {
              method: 'GET',
              url: STR_ENDPOINT,
              data: query,
              strData: strData
            };
          });
        },
        interpretResponse: function interpretResponse(_ref, req) {
          var body = _ref.body;

          if (!body || !body.creatives || !body.creatives.length) {
            return [];
          }

          var creative = body.creatives[0];
          var size = DEFAULT_SIZE;

          if (req.strData.iframeSize || req.strData.sizes.length) {
            size = req.strData.iframeSize ? req.strData.iframeSize : getLargestSize(req.strData.sizes);
          }

          return [{
            requestId: req.data.bidId,
            width: size[0],
            height: size[1],
            cpm: creative.cpm,
            creativeId: creative.creative.creative_key,
            dealId: creative.creative.deal_id,
            currency: 'USD',
            netRevenue: true,
            ttl: 360,
            ad: generateAd(body, req)
          }];
        },
        getUserSyncs: function getUserSyncs(syncOptions, serverResponses, gdprConsent, uspConsent) {
          var syncParams = uspConsent ? "&us_privacy=".concat(uspConsent) : '';
          var syncs = [];
          var shouldCookieSync = syncOptions.pixelEnabled && serverResponses.length > 0 && serverResponses[0].body && serverResponses[0].body.cookieSyncUrls;

          if (shouldCookieSync) {
            serverResponses[0].body.cookieSyncUrls.forEach(function (url) {
              syncs.push({
                type: 'image',
                url: url + syncParams
              });
            });
          }

          return syncs;
        },
        // Empty implementation for prebid core to be able to find it
        onTimeout: function onTimeout(data) {},
        // Empty implementation for prebid core to be able to find it
        onBidWon: function onBidWon(bid) {},
        // Empty implementation for prebid core to be able to find it
        onSetTargeting: function onSetTargeting(bid) {}
      };

      function getLargestSize(sizes) {
        function area(size) {
          return size[0] * size[1];
        }

        return sizes.reduce(function (prev, current) {
          if (area(current) > area(prev)) {
            return current;
          } else {
            return prev;
          }
        });
      }

      function generateAd(body, req) {
        var strRespId = "str_response_".concat(req.data.bidId);
        var adMarkup = "\n    <div data-str-native-key=\"".concat(req.data.placement_key, "\" data-stx-response-name=\"").concat(strRespId, "\">\n    </div>\n    <script>var ").concat(strRespId, " = \"").concat(b64EncodeUnicode(JSON.stringify(body)), "\"</script>\n  ");

        if (req.strData.skipIframeBusting) {
          // Don't break out of iframe
          adMarkup = adMarkup + "<script src=\"https://native.sharethrough.com/assets/sfp.js\"></script>";
        } else {
          // Add logic to the markup that detects whether or not in top level document is accessible
          // this logic will deploy sfp.js and/or iframe buster script(s) as appropriate
          adMarkup = adMarkup + "\n      <script>\n        (".concat(sharethroughInternal.isLockedInFrame.toString(), ")()\n      </script>\n      <script>\n        (").concat(sharethroughInternal.handleIframe.toString(), ")()\n      </script>");
        }

        return adMarkup;
      }

      function handleIframe() {
        // only load iframe buster JS if we can access the top level document
        // if we are 'locked in' to this frame then no point trying to bust out: we may as well render in the frame instead
        var iframeBusterLoaded = false;

        if (!window.lockedInFrame) {
          var sfpIframeBusterJs = document.createElement('script');
          sfpIframeBusterJs.src = 'https://native.sharethrough.com/assets/sfp-set-targeting.js';
          sfpIframeBusterJs.type = 'text/javascript';

          try {
            window.document.getElementsByTagName('body')[0].appendChild(sfpIframeBusterJs);
            iframeBusterLoaded = true;
          } catch (e) {
            __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["logError"]('Trouble writing frame buster script, error details:', e);
          }
        }

        var clientJsLoaded = !iframeBusterLoaded ? !!(window.STR && window.STR.Tag) : !!(window.top.STR && window.top.STR.Tag);

        if (!clientJsLoaded) {
          var sfpJs = document.createElement('script');
          sfpJs.src = 'https://native.sharethrough.com/assets/sfp.js';
          sfpJs.type = 'text/javascript'; // only add sfp js to window.top if iframe busting successfully loaded; otherwise, add to iframe

          try {
            if (iframeBusterLoaded) {
              window.top.document.getElementsByTagName('body')[0].appendChild(sfpJs);
            } else {
              window.document.getElementsByTagName('body')[0].appendChild(sfpJs);
            }
          } catch (e) {
            __WEBPACK_IMPORTED_MODULE_1__src_utils_js__["logError"]('Trouble writing sfp script, error details:', e);
          }
        }
      } // determines if we are capable of busting out of the iframe we are in
      // if we catch a DOMException when trying to access top-level document, it means we're stuck in the frame we're in


      function isLockedInFrame() {
        window.lockedInFrame = false;

        try {
          window.lockedInFrame = !window.top.document;
        } catch (e) {
          window.lockedInFrame = e instanceof DOMException;
        }
      } // See https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem


      function b64EncodeUnicode(str) {
        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function toSolidBytes(match, p1) {
          return String.fromCharCode('0x' + p1);
        }));
      }

      function canAutoPlayHTML5Video() {
        var userAgent = navigator.userAgent;
        if (!userAgent) return false;
        var isAndroid = /Android/i.test(userAgent);
        var isiOS = /iPhone|iPad|iPod/i.test(userAgent);
        var chromeVersion = parseInt((/Chrome\/([0-9]+)/.exec(userAgent) || [0, 0])[1]);
        var chromeiOSVersion = parseInt((/CriOS\/([0-9]+)/.exec(userAgent) || [0, 0])[1]);
        var safariVersion = parseInt((/Version\/([0-9]+)/.exec(userAgent) || [0, 0])[1]);

        if (isAndroid && chromeVersion >= 53 || isiOS && (safariVersion >= 10 || chromeiOSVersion >= 53) || !(isAndroid || isiOS)) {
          return true;
        } else {
          return false;
        }
      }

      function getProtocol() {
        return document.location.protocol;
      }

      Object(__WEBPACK_IMPORTED_MODULE_0__src_adapters_bidderFactory_js__["registerBidder"])(sharethroughAdapterSpec);
      /***/
    }
  }, [558]);
  pbjsChunk([66], {
    /***/
    622:
    /***/
    function _(module, exports, __webpack_require__) {
      module.exports = __webpack_require__(623);
      /***/
    },

    /***/
    623:
    /***/
    function _(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "spec", function () {
        return spec;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__src_utils_js__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__src_adapters_bidderFactory_js__ = __webpack_require__(1);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__src_Renderer_js__ = __webpack_require__(10);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__ = __webpack_require__(2);

      var BIDDER_CODE = 'trustx';
      var ENDPOINT_URL = 'https://sofia.trustx.org/hb';
      var TIME_TO_LIVE = 360;
      var ADAPTER_SYNC_URL = 'https://sofia.trustx.org/push_sync';
      var RENDERER_URL = 'https://acdn.adnxs.com/video/outstream/ANOutstreamVideo.js';
      var LOG_ERROR_MESS = {
        noAuid: 'Bid from response has no auid parameter - ',
        noAdm: 'Bid from response has no adm parameter - ',
        noBid: 'Array of bid objects is empty',
        noPlacementCode: 'Can\'t find in requested bids the bid with auid - ',
        emptyUids: 'Uids should be not empty',
        emptySeatbid: 'Seatbid array from response has empty item',
        emptyResponse: 'Response is empty',
        hasEmptySeatbidArray: 'Response has empty seatbid array',
        hasNoArrayOfBids: 'Seatbid from response has no array of bid objects - '
      };
      var spec = {
        code: BIDDER_CODE,
        supportedMediaTypes: [__WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["b"
        /* BANNER */
        ], __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["d"
        /* VIDEO */
        ]],

        /**
         * Determines whether or not the given bid request is valid.
         *
         * @param {BidRequest} bid The bid params to validate.
         * @return boolean True if this is a valid bid, and false otherwise.
         */
        isBidRequestValid: function isBidRequestValid(bid) {
          return !!bid.params.uid;
        },

        /**
         * Make a server request from the list of BidRequests.
         *
         * @param {BidRequest[]} validBidRequests - an array of bids
         * @param {bidderRequest} - bidder request object
         * @return ServerRequest Info describing the request to the server.
         */
        buildRequests: function buildRequests(validBidRequests, bidderRequest) {
          var auids = [];
          var bidsMap = {};
          var slotsMapByUid = {};
          var sizeMap = {};
          var bids = validBidRequests || [];
          var priceType = 'net';
          var pageKeywords;
          var reqId;
          bids.forEach(function (bid) {
            if (bid.params.priceType === 'gross') {
              priceType = 'gross';
            }

            reqId = bid.bidderRequestId;
            var uid = bid.params.uid,
                adUnitCode = bid.adUnitCode;
            auids.push(uid);

            var sizesId = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["parseSizesInput"](bid.sizes);

            if (!pageKeywords && !__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isEmpty"](bid.params.keywords)) {
              var keywords = __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["transformBidderParamKeywords"](bid.params.keywords);

              if (keywords.length > 0) {
                keywords.forEach(deleteValues);
              }

              pageKeywords = keywords;
            }

            if (!slotsMapByUid[uid]) {
              slotsMapByUid[uid] = {};
            }

            var slotsMap = slotsMapByUid[uid];

            if (!slotsMap[adUnitCode]) {
              slotsMap[adUnitCode] = {
                adUnitCode: adUnitCode,
                bids: [bid],
                parents: []
              };
            } else {
              slotsMap[adUnitCode].bids.push(bid);
            }

            var slot = slotsMap[adUnitCode];
            sizesId.forEach(function (sizeId) {
              sizeMap[sizeId] = true;

              if (!bidsMap[uid]) {
                bidsMap[uid] = {};
              }

              if (!bidsMap[uid][sizeId]) {
                bidsMap[uid][sizeId] = [slot];
              } else {
                bidsMap[uid][sizeId].push(slot);
              }

              slot.parents.push({
                parent: bidsMap[uid],
                key: sizeId,
                uid: uid
              });
            });
          });
          var payload = {
            pt: priceType,
            auids: auids.join(','),
            sizes: __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["getKeys"](sizeMap).join(','),
            r: reqId,
            wrapperType: 'Prebid_js',
            wrapperVersion: "3.13.0-pre"
          };

          if (pageKeywords) {
            payload.keywords = JSON.stringify(pageKeywords);
          }

          if (bidderRequest) {
            if (bidderRequest.refererInfo && bidderRequest.refererInfo.referer) {
              payload.u = bidderRequest.refererInfo.referer;
            }

            if (bidderRequest.timeout) {
              payload.wtimeout = bidderRequest.timeout;
            }

            if (bidderRequest.gdprConsent) {
              if (bidderRequest.gdprConsent.consentString) {
                payload.gdpr_consent = bidderRequest.gdprConsent.consentString;
              }

              payload.gdpr_applies = typeof bidderRequest.gdprConsent.gdprApplies === 'boolean' ? Number(bidderRequest.gdprConsent.gdprApplies) : 1;
            }

            if (bidderRequest.uspConsent) {
              payload.us_privacy = bidderRequest.uspConsent;
            }
          }

          return {
            method: 'GET',
            url: ENDPOINT_URL,
            data: __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["parseQueryStringParameters"](payload).replace(/\&$/, ''),
            bidsMap: bidsMap
          };
        },

        /**
         * Unpack the response from the server into a list of bids.
         *
         * @param {*} serverResponse A successful response from the server.
         * @param {*} bidRequest
         * @return {Bid[]} An array of bids which were nested inside the server.
         */
        interpretResponse: function interpretResponse(serverResponse, bidRequest) {
          var RendererConst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : __WEBPACK_IMPORTED_MODULE_2__src_Renderer_js__["a"
          /* Renderer */
          ];
          serverResponse = serverResponse && serverResponse.body;
          var bidResponses = [];
          var bidsMap = bidRequest.bidsMap;
          var priceType = bidRequest.data.pt;
          var errorMessage;
          if (!serverResponse) errorMessage = LOG_ERROR_MESS.emptyResponse;else if (serverResponse.seatbid && !serverResponse.seatbid.length) {
            errorMessage = LOG_ERROR_MESS.hasEmptySeatbidArray;
          }

          if (!errorMessage && serverResponse.seatbid) {
            serverResponse.seatbid.forEach(function (respItem) {
              _addBidResponse(_getBidFromResponse(respItem), bidsMap, priceType, bidResponses, RendererConst);
            });
          }

          if (errorMessage) __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"](errorMessage);
          return bidResponses;
        },
        getUserSyncs: function getUserSyncs(syncOptions) {
          if (syncOptions.pixelEnabled) {
            return [{
              type: 'image',
              url: ADAPTER_SYNC_URL
            }];
          }
        }
      };

      function isPopulatedArray(arr) {
        return !!(__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["isArray"](arr) && arr.length > 0);
      }

      function deleteValues(keyPairObj) {
        if (isPopulatedArray(keyPairObj.value) && keyPairObj.value[0] === '') {
          delete keyPairObj.value;
        }
      }

      function _getBidFromResponse(respItem) {
        if (!respItem) {
          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"](LOG_ERROR_MESS.emptySeatbid);
        } else if (!respItem.bid) {
          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"](LOG_ERROR_MESS.hasNoArrayOfBids + JSON.stringify(respItem));
        } else if (!respItem.bid[0]) {
          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"](LOG_ERROR_MESS.noBid);
        }

        return respItem && respItem.bid && respItem.bid[0];
      }

      function _addBidResponse(serverBid, bidsMap, priceType, bidResponses, RendererConst) {
        if (!serverBid) return;
        var errorMessage;
        if (!serverBid.auid) errorMessage = LOG_ERROR_MESS.noAuid + JSON.stringify(serverBid);
        if (!serverBid.adm) errorMessage = LOG_ERROR_MESS.noAdm + JSON.stringify(serverBid);else {
          var awaitingBids = bidsMap[serverBid.auid];

          if (awaitingBids) {
            var sizeId = "".concat(serverBid.w, "x").concat(serverBid.h);

            if (awaitingBids[sizeId]) {
              var slot = awaitingBids[sizeId][0];
              var bid = slot.bids.shift();
              var bidResponse = {
                requestId: bid.bidId,
                // bid.bidderRequestId,
                bidderCode: spec.code,
                cpm: serverBid.price,
                width: serverBid.w,
                height: serverBid.h,
                creativeId: serverBid.auid,
                // bid.bidId,
                currency: 'USD',
                netRevenue: priceType !== 'gross',
                ttl: TIME_TO_LIVE,
                dealId: serverBid.dealid
              };

              if (serverBid.content_type === 'video') {
                bidResponse.vastXml = serverBid.adm;
                bidResponse.mediaType = __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["d"
                /* VIDEO */
                ];
                bidResponse.adResponse = {
                  content: bidResponse.vastXml
                };

                if (!bid.renderer && (!bid.mediaTypes || !bid.mediaTypes.video || bid.mediaTypes.video.context === 'outstream')) {
                  bidResponse.renderer = createRenderer(bidResponse, {
                    id: bid.bidId,
                    url: RENDERER_URL
                  }, RendererConst);
                }
              } else {
                bidResponse.ad = serverBid.adm;
                bidResponse.mediaType = __WEBPACK_IMPORTED_MODULE_3__src_mediaTypes_js__["b"
                /* BANNER */
                ];
              }

              bidResponses.push(bidResponse);

              if (!slot.bids.length) {
                slot.parents.forEach(function (_ref) {
                  var parent = _ref.parent,
                      key = _ref.key,
                      uid = _ref.uid;
                  var index = parent[key].indexOf(slot);

                  if (index > -1) {
                    parent[key].splice(index, 1);
                  }

                  if (!parent[key].length) {
                    delete parent[key];

                    if (!__WEBPACK_IMPORTED_MODULE_0__src_utils_js__["getKeys"](parent).length) {
                      delete bidsMap[uid];
                    }
                  }
                });
              }
            }
          } else {
            errorMessage = LOG_ERROR_MESS.noPlacementCode + serverBid.auid;
          }
        }

        if (errorMessage) {
          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logError"](errorMessage);
        }
      }

      function outstreamRender(bid) {
        bid.renderer.push(function () {
          window.ANOutstreamVideo.renderAd({
            targetId: bid.adUnitCode,
            adResponse: bid.adResponse
          });
        });
      }

      function createRenderer(bid, rendererParams, RendererConst) {
        var rendererInst = RendererConst.install({
          id: rendererParams.id,
          url: rendererParams.url,
          loaded: false
        });

        try {
          rendererInst.setRender(outstreamRender);
        } catch (err) {
          __WEBPACK_IMPORTED_MODULE_0__src_utils_js__["logWarn"]('Prebid Error calling setRender on renderer', err);
        }

        return rendererInst;
      }

      Object(__WEBPACK_IMPORTED_MODULE_1__src_adapters_bidderFactory_js__["registerBidder"])(spec);
      /***/
    }
  }, [622]);
  pbjs.processQueue();
  /*
      Prebid Module - Version 4.0.17
      @4.0.0:  - Initialization Update for GDPR/CCPA
      @4.0.1:  - Fix for missing call to register module
      @4.0.4:  - brandCategoryExclusion Fixes
      @4.0.5:  - isIntl fix
      @4.0.6:  - Page-Level filtering
      @4.0.7:  - Monetized Slot filtering
      @4.0.8:  - GDPR Consent Settings
      @4.0.9:  - Native Fixes
      @4.0.10: - AppNexus InvCode Fixes
      @4.0.11: - Pangaea Member ID Fix
      @4.0.12: - Pricing Granularity Fix
      @4.0.13: - Midroll AdUnitCode Fix
      @4.0.14: - Midroll Targeting Return Fix
      @4.0.15: - Options Structure Update
      @4.0.16: - Bid Targeting Reliability
      @4.0.17: - Prebid 3.13 update
       ------------------------------------------------------
      GDPR Status: Blocked
      CCPA Status: Blocked
   */

  var MODULE_NAME = 'Prebid Module';
  var MODULE_VERSION = 'v4.0.17';
  var mergeDeep = window.AdFuelUtils.mergeDeep;
  var isIntl = window.AdFuelUtils.isIntl;
  var IsMobile = window.AdFuelUtils.isMobile;
  var getConsent = window.AdFuelUtils.getConsent;
  var getUserConsentRegion = window.AdFuelUtils.getUserConsentRegion;
  var getURLParam = window.AdFuelUtils.getURLParam;
  var getLogger = window.AdFuelUtils.getLogger;
  var addEvent = window.AdFuelUtils.addEvent;
  var pbLogger;
  var initEventSet = false;
  var libraryConfigured = false;
  var RUBICON_SIZE_MAPPING = {
    '728x90': 2,
    '160x600': 9,
    '300x600': 10,
    '300x250': 15,
    '320x50': 43,
    '970x90': 55,
    '970x250': 57
  };
  var PREBID_VIDEO_TARGETING = {
    hb_uuid: '',
    hb_bidder: '',
    hb_adid: '',
    hb_pb: '',
    hb_size: '',
    hb_source: ''
  };
  var PREBID_VIDEO_REFRESHED_TARGETING = {
    hb_uuid: '',
    hb_bidder: '',
    hb_adid: '',
    hb_pb: '',
    hb_size: '',
    hb_source: ''
  };
  var PREBID_MIDROLL_VIDEO_TARGETING = {
    hb_pb_cat_dur: [],
    hb_cache_id: ''
  };
  var REQUESTED_AD_UNITS = {
    banner: [],
    "native": []
  };
  var BUILT_AD_UNITS = [];
  var CONFIGURATION = {
    BIDDERS: {
      CLIENT: {
        DOM: [],
        INTL: []
      },
      NATIVE: {
        DOM: [],
        INTL: []
      },
      S2S: {
        DOM: [],
        INTL: []
      }
    },
    TIMEOUTS: {
      DISPLAY: {
        DESKTOP: 1150,
        MOBILE: 750
      },
      VIDEO: {
        DEFAULT: 500,
        MIDROLL: 750,
        REFRESH: 1000
      }
    },
    VENDOR: {
      APPNEXUS: {
        ACCOUNT_ID: {
          DOM: 0,
          INTL: 0
        }
      },
      CRITEO: {},
      IX: {
        SITE_ID: {
          DOM: {
            DESKTOP: {},
            MOBILE: {}
          },
          INTL: {
            DESKTOP: {},
            MOBILE: {}
          }
        }
      },
      OPENX: {
        UNIT_MAPPING: {
          DOM: {
            DESKTOP: {},
            MOBILE: {}
          },
          INTL: {
            DESKTOP: {},
            MOBILE: {}
          }
        }
      },
      PANGAEA: {
        ACCOUNT_ID: {
          DOM: 0,
          INTL: 0
        }
      },
      RUBICON: {
        ACCOUNT_ID: {
          DOM: 0,
          INTL: 0
        },
        SITE_ID: {
          DOM: {
            DESKTOP: 0,
            MOBILE: 0
          },
          INTL: {
            DESKTOP: 0,
            MOBILE: 0
          }
        },
        ZONE_MAPPING: {
          DOM: {
            DESKTOP: {
              HP: {},
              ROS: {}
            },
            MOBILE: {}
          },
          INTL: {
            DESKTOP: {
              HP: {},
              ROS: {}
            },
            MOBILE: {}
          }
        }
      },
      SHARETHROUGH: {
        UNIT_MAPPING: {
          DOM: {
            DESKTOP: {},
            MOBILE: {}
          },
          INTL: {
            DESKTOP: {},
            MOBILE: {}
          }
        }
      },
      TRUSTX: {
        UID: {
          DOM: {
            DESKTOP: {},
            MOBILE: {}
          },
          INTL: {
            DESKTOP: {},
            MOBILE: {}
          }
        }
      }
    }
  };
  var APPROVED_BIDDERS = {
    CLIENT: {
      DOM: ['appnexus', 'rubicon', 'criteo', 'ix', 'openx', 'trustx'],
      INTL: ['appnexus', 'pangaea', 'ix', 'openx', 'rubicon', 'sharethrough', 'criteo', 'trustx']
    },
    NATIVE: {
      DOM: ['appnexus'],
      INTL: ['appnexus', 'pangaea']
    },
    S2S: {
      DOM: ['openx', 'ix'],
      INTL: ['openx', 'pangaea', 'sharethrough', 'ix']
    }
  };
  var REQUIRED_CONFIGURATION_KEYS = ['BIDDERS'];
  var bidMocks = {
    appnexus: {
      bidder: 'appnexus',
      params: {
        invCode: '',
        member: isIntl() ? CONFIGURATION.VENDOR.APPNEXUS.ACCOUNT_ID.INTL : CONFIGURATION.VENDOR.APPNEXUS.ACCOUNT_ID.DOM,
        reserve: 0.01
      }
    },
    criteo: {
      bidder: 'criteo',
      params: {
        networkId: 4157
      }
    },
    pangaea: {
      bidder: 'pangaea',
      params: {
        invCode: '',
        member: isIntl() ? CONFIGURATION.VENDOR.PANGAEA.ACCOUNT_ID.INTL : CONFIGURATION.VENDOR.PANGAEA.ACCOUNT_ID.DOM,
        reserve: 0.01
      }
    },
    ix: {
      bidder: 'ix',
      params: {
        siteId: '',
        size: []
      }
    },
    openx: {
      bidder: 'openx',
      params: {
        unit: '',
        delDomain: 'turnereu1-d.openx.net',
        customParams: {}
      }
    },
    rubicon: {
      bidder: 'rubicon',
      // Fastlane (US and EU) and AppNexus (EU ONLY)
      params: {
        accountId: isIntl() ? CONFIGURATION.VENDOR.RUBICON.ACCOUNT_ID.INTL : CONFIGURATION.VENDOR.RUBICON.ACCOUNT_ID.DOM,
        // Toggle based on location
        siteId: 26792,
        // Get From Mapping
        zoneId: 231942,
        // Get From Mapping
        position: 'btf' // Parse from Div Id

      }
    },
    sharethrough: {
      bidder: 'sharethrough',
      params: {
        pkey: ''
      }
    },
    trustx: {
      bidder: 'trustx',
      params: {
        uid: 0
      }
    }
  };

  var validateConfiguration = function validateConfiguration(config) {
    var errors = [];
    var status = true; // Validate required keys

    REQUIRED_CONFIGURATION_KEYS.forEach(function (key) {
      if (!config[key]) {
        errors.push("MISSING REQUIRED CONFIGURATION KEY: ".concat(key));
        status = false;
      }
    });
    pbLogger.log('Configured Vendors: ', config.VENDOR); // Validate Bidders

    var configuredBidderTypes = Object.keys(config.BIDDERS);
    pbLogger.log('Configured Bidder Types: ', configuredBidderTypes);
    configuredBidderTypes.forEach(function (bidderType) {
      pbLogger.log('Bidder Type: ', bidderType);
      var configuredLocationBidders = Object.keys(config.BIDDERS[bidderType]);
      pbLogger.log('Configured Bidder Type Locations: ', configuredLocationBidders);
      configuredLocationBidders.forEach(function (location) {
        var configuredBidders = config.BIDDERS[bidderType][location];
        pbLogger.log('Configured Bidders: ', configuredBidders);
        configuredBidders.forEach(function (bidder) {
          pbLogger.log('Bidder: ', bidder);

          if (APPROVED_BIDDERS[bidderType][location].indexOf(bidder) < 0) {
            errors.push("INVALID ".concat(bidderType, " BIDDER: ").concat(bidder));
            status = false;
          }

          if (!config.VENDOR[bidder.toUpperCase()]) {
            errors.push("NO CONFIGURATION PROVIDED FOR VENDOR: ".concat(bidder));
            status = false;
          }
        });
      });
    });
    var response = {
      status: status,
      errors: errors
    };

    if (response.status !== false) {
      var finalConfig = mergeDeep(CONFIGURATION, config);
      response.config = finalConfig;
      CONFIGURATION = finalConfig;
    }

    return response;
  };

  var getVideoBids = function getVideoBids(slotName, timeout, targeting) {
    return new Promise(function (resolve, reject) {
      pbLogger.log('Building Video AdUnit...');
      slotName = slotName || 'cnn_homepage_video1';
      timeout = timeout || CONFIGURATION.TIMEOUTS.VIDEO.DEFAULT;
      var videoBid = {
        code: 'video1',
        mediaTypes: {
          video: {
            context: 'instream',
            playerSize: [640, 480]
          }
        },
        bids: [{
          bidder: 'appnexus',
          params: {
            invCode: slotName,
            member: isIntl() ? CONFIGURATION.VENDOR.APPNEXUS.ACCOUNT_ID.INTL : CONFIGURATION.VENDOR.APPNEXUS.ACCOUNT_ID.DOM,
            video: {
              skippable: true,
              playback_methods: ['auto_play_sound_off']
            }
          }
        }]
      };
      pbLogger.log('Adding Video AdUnit: ', videoBid);
      window.pbjs.que.push(function () {
        if (BUILT_AD_UNITS.indexOf(videoBid.code) >= 0) {
          pbLogger.log('Removing Video Ad Unit: ', videoBid.code);
          window.pbjs.removeAdUnit(videoBid.code);
          BUILT_AD_UNITS.splice(BUILT_AD_UNITS.indexOf(videoBid.code), 1);
        }

        pbLogger.log('Adding Video Ad Unit: ', videoBid.code);
        window.pbjs.addAdUnits(videoBid);
        BUILT_AD_UNITS.push(videoBid.code);
        pbLogger.log('Requesting Video Bids...', videoBid);

        var videoBidsBackHandler = function videoBidsBackHandler() {
          try {
            var highestCmpBids = window.pbjs.getHighestCpmBids(['video1']);
            var uuid = '';
            var targetBid = highestCmpBids[0];
            highestCmpBids.forEach(function (bid) {
              pbLogger.log("Found highest cmp bid for 'video'...");

              if (bid.videoCacheKey && uuid !== '') {
                pbLogger.log('Returning Video Cache Key...');
                uuid = targetBid.videoCacheKey;
              }
            });
            pbLogger.log('Received Bids...');
            PREBID_VIDEO_TARGETING = window.pbjs.getAdserverTargeting().video1;

            if (uuid !== '') {
              PREBID_VIDEO_TARGETING.hb_uuid = uuid;
            }

            resolve(PREBID_VIDEO_TARGETING);
          } catch (err) {
            pbLogger.warn("Could not get highest cmp bid for 'video1'...", err);
            reject(err);
          }
        };

        window.pbjs.setConfig({
          adpod: {
            brandCategoryExclusion: false
          }
        });
        window.pbjs.requestBids({
          adUnitCodes: ['video1'],
          bidsBackHandler: videoBidsBackHandler,
          timeout: timeout
        });
      });
    });
  };

  var getRefreshedVideoBids = function getRefreshedVideoBids(slotName, timeout, targeting) {
    return new Promise(function (resolve, reject) {
      slotName = slotName || 'cnn_homepage_video1';
      timeout = timeout || CONFIGURATION.TIMEOUTS.VIDEO.REFRESH;
      pbLogger.log('Building Video AdUnit...');
      var videoBid = {
        code: 'video2',
        mediaTypes: {
          video: {
            context: 'instream',
            playerSize: [640, 480]
          }
        },
        bids: [{
          bidder: 'appnexus',
          params: {
            invCode: slotName,
            member: isIntl() ? CONFIGURATION.VENDOR.APPNEXUS.ACCOUNT_ID.INTL : CONFIGURATION.VENDOR.APPNEXUS.ACCOUNT_ID.DOM,
            video: {
              skippable: true,
              playback_methods: ['auto_play_sound_off']
            }
          }
        }]
      };
      window.pbjs.que.push(function () {
        if (BUILT_AD_UNITS.indexOf(videoBid.code) >= 0) {
          pbLogger.log('Removing Video Ad Unit: ', videoBid.code);
          window.pbjs.removeAdUnit(videoBid.code);
          BUILT_AD_UNITS.splice(BUILT_AD_UNITS.indexOf(videoBid.code), 1);
        }

        pbLogger.log('Adding Video Ad Unit: ', videoBid.code);
        window.pbjs.addAdUnits(videoBid);
        BUILT_AD_UNITS.push(videoBid.code);
        pbLogger.log('Requesting Video Bids...', videoBid);

        var videoBidsBackHandler = function videoBidsBackHandler(bids) {
          try {
            var highestCmpBids = window.pbjs.getHighestCpmBids(['video2']);
            var targetBid = highestCmpBids[0];
            var uuid = '';
            highestCmpBids.forEach(function (bid) {
              pbLogger.log("Found highest cmp bid for 'video'...");

              if (bid.videoCacheKey && uuid === '') {
                pbLogger.log('Returning Video Cache Key...');
                uuid = targetBid.videoCacheKey;
              }
            });
            pbLogger.log('Received Bids...');
            PREBID_VIDEO_REFRESHED_TARGETING = window.pbjs.getAdserverTargeting().video2;

            if (uuid !== '') {
              PREBID_VIDEO_REFRESHED_TARGETING.hb_uuid = uuid;
            }

            resolve(PREBID_VIDEO_REFRESHED_TARGETING);
          } catch (err) {
            pbLogger.warn("Could not get highest cmp bid for 'video1'...", err);
            reject(err);
          }
        };

        window.pbjs.setConfig({
          adpod: {
            brandCategoryExclusion: false
          }
        });
        window.pbjs.requestBids({
          adUnitCodes: ['video1'],
          bidsBackHandler: videoBidsBackHandler,
          timeout: timeout
        });
      });
    });
  };

  var getMidRollVideoBids = function getMidRollVideoBids() {
    var slotName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'cnn_homepage_midroll';
    var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CONFIGURATION.TIMEOUTS.VIDEO.MIDROLL;
    var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;
    var durationRange = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [15, 30];
    var playerSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [640, 480];
    var targeting = arguments.length > 5 ? arguments[5] : undefined;
    return new Promise(function (resolve, reject) {
      var slotId = window.AdFuelUtils.generateCacheBuster();
      pbLogger.log('Building Video AdUnit...');
      var videoBid = {
        code: "midroll".concat(slotId),
        mediaTypes: {
          video: {
            context: 'adpod',
            playerSize: playerSize,
            adPodDurationSec: duration,
            durationRangeSec: durationRange
          }
        },
        bids: [{
          bidder: 'appnexus',
          params: {
            invCode: slotName,
            member: isIntl() ? CONFIGURATION.VENDOR.APPNEXUS.ACCOUNT_ID.INTL : CONFIGURATION.VENDOR.APPNEXUS.ACCOUNT_ID.DOM,
            video: {
              skippable: true,
              playback_methods: ['auto_play_sound_off']
            }
          }
        }]
      };
      pbLogger.log('Adding Video AdUnit: ', videoBid);

      var innerFunc = function innerFunc() {
        if (BUILT_AD_UNITS.indexOf(videoBid.code) >= 0) {
          pbLogger.log('Removing Video Ad Unit: ', videoBid.code);
          BUILT_AD_UNITS.splice(BUILT_AD_UNITS.indexOf(videoBid.code), 1);
          window.pbjs.removeAdUnit(videoBid.code);
        }

        pbLogger.log('Adding Video Ad Unit: ', videoBid.code);
        window.pbjs.addAdUnits(videoBid);
        BUILT_AD_UNITS.push(videoBid.code);
        pbLogger.log('Requesting Video Bids...', videoBid);

        var videoBidsBackHandler = function videoBidsBackHandler() {
          pbLogger.log('Calling pbjs.adServers.freewheel.getTargeting...');
          window.pbjs.adServers.freewheel.getTargeting({
            codes: ["midroll".concat(slotId)],
            callback: function callback(err, targeting) {
              if (err) {
                pbLogger.error('Freewheel Targeting Error: ', err);
                reject(err);
              }

              pbLogger.log('FreewheelTargeting: ', targeting);
              var response = {
                hb_cache_id: '',
                hb_pb_cat_dur: []
              };

              if (Array.isArray(targeting["midroll".concat(slotId)])) {
                targeting["midroll".concat(slotId)].forEach(function (target) {
                  Object.keys(target).forEach(function (key) {
                    if (Array.isArray(response[key])) {
                      response[key].push(target[key]);
                    } else if (typeof response[key] !== 'undefined') {
                      response[key] = target[key];
                    }
                  });
                });
              }

              PREBID_MIDROLL_VIDEO_TARGETING = response;
              pbLogger.log('Returning Video Targeting: ', PREBID_MIDROLL_VIDEO_TARGETING);
              resolve(PREBID_MIDROLL_VIDEO_TARGETING);
            }
          });
        };

        window.pbjs.setConfig({
          adpod: {
            brandCategoryExclusion: true,
            prioritizeDeals: true,
            dealTier: {
              appnexus: {
                prefix: 'tier',
                minDealTier: 6
              }
            }
          }
        });
        window.pbjs.requestBids({
          adUnitCodes: ["midroll".concat(slotId)],
          bidsBackHandler: videoBidsBackHandler,
          timeout: timeout
        });
      };

      pbLogger.log('LibraryConfigured: ', libraryConfigured);

      if (libraryConfigured) {
        window.pbjs.que.push(innerFunc);
      }
    });
  };

  var buildPrebidAdUnits = function buildPrebidAdUnits(asset) {
    var adUnits = [];
    var nativeAdUnits = [];
    asset.forEach(function (slot) {
      if (slot.rktr_ad_id) {
        var bannerAdUnitMock = {
          code: '',
          mediaTypes: {
            banner: {
              sizes: []
            }
          },
          bids: []
        };
        var nativeMediaType = {
          title: {
            required: true,
            len: 80
          },
          body: {
            required: true
          },
          image: {
            required: true,
            aspect_ratios: [{
              min_width: 300,
              min_height: 225,
              ratio_width: 4,
              ratio_height: 3
            }]
          },
          sponsoredBy: {
            required: true
          },
          clickUrl: {
            required: true
          },
          icon: {
            required: true,
            aspect_ratios: [{
              min_width: 15,
              min_height: 15,
              ratio_width: 1,
              ratio_height: 1
            }]
          },
          cta: {
            required: false
          }
        };

        if (!slot.monetization) {
          slot.monetization = {
            isMonetized: true,
            filteredSizes: slot.sizes
          };
        }

        if (slot.monetization.isMonetized) {
          var sizeMapArray = [];

          for (var sIndex = 0; sIndex < slot.monetization.filteredSizes.length; sIndex++) {
            sizeMapArray.push(RUBICON_SIZE_MAPPING[slot.monetization.filteredSizes[sIndex].join('x')]);
          }

          var adUnitArray = slot.rktr_ad_id.toLowerCase().split('/');
          var criteoPubSubId = adUnitArray[0] + (adUnitArray[1] ? '_' + adUnitArray[1] : '');
          var invCodeArray = slot.rktr_ad_id.split('/');
          var invCode = invCodeArray[0].toLowerCase() + (invCodeArray[1] ? '_' + invCodeArray[1].toLowerCase() : '');
          var posValue = '';
          var position = 'atf';
          var slotTargets = slot.targeting || [];

          for (var tIndex = 0; tIndex < slotTargets.length; tIndex++) {
            var target = slotTargets[tIndex];

            if (target[0] === 'pos') {
              if (Array.isArray(target[1])) {
                posValue = target[1][0];
                position = target[1][0].split('_')[1];
              } else {
                posValue = target[1];
                position = target[1].split('_')[1];
              }
            }
          }

          var isHomepage = slot.rktr_ad_id.indexOf('/homepage') >= 0 || slot.rktr_ad_id.indexOf('/business/landing') >= 0;
          bannerAdUnitMock.code = slot.originalElementId || slot.rktr_slot_id;
          bannerAdUnitMock.mediaTypes.banner.sizes = slot.monetization.filteredSizes.map(function (fSize) {
            return fSize.map(function (size) {
              return parseInt(size, 10);
            });
          });
          posValue = JSON.parse(JSON.stringify(posValue)).replace(/"/g, '');
          pbLogger.log('POS: ', posValue);
          var BIDDERS = isIntl() ? CONFIGURATION.BIDDERS.CLIENT.INTL : CONFIGURATION.BIDDERS.CLIENT.DOM;
          pbLogger.log('Bidders: ', BIDDERS);
          BIDDERS.forEach(function (bidder) {
            pbLogger.log('Bidder: ', bidder);
            var bannerBidMock = Object.assign({}, bidMocks[bidder]);
            bannerAdUnitMock.code = slot.originalElementId || slot.rktr_slot_id;

            switch (bidder) {
              case 'appnexus':
                bannerBidMock.params.invCode = invCode + '_' + posValue;
                bannerBidMock.params.member = isIntl() ? CONFIGURATION.VENDOR.APPNEXUS.ACCOUNT_ID.INTL : CONFIGURATION.VENDOR.APPNEXUS.ACCOUNT_ID.DOM;

                if (window.CNN && window.CNN.cep_topics) {
                  bannerBidMock.params.keywords = window.CNN.cep_topics;
                }

                pbLogger.log('Pushing AppNexus Bid: ', bannerBidMock);

                if (CONFIGURATION.BIDDERS.NATIVE[isIntl() ? 'INTL' : 'DOM'].indexOf(bidder) >= 0) {
                  bannerAdUnitMock.mediaTypes["native"] = nativeMediaType;
                }

                bannerAdUnitMock.bids.push(JSON.parse(JSON.stringify(bannerBidMock)));
                break;

              case 'criteo':
                if (CONFIGURATION.BIDDERS.NATIVE[isIntl() ? 'INTL' : 'DOM'].indexOf(bidder) >= 0) {
                  bannerAdUnitMock.mediaTypes["native"] = nativeMediaType;
                }

                bannerBidMock.params.networkId = isIntl() ? CONFIGURATION.VENDOR.CRITEO.ACCOUNT_ID.INTL : CONFIGURATION.VENDOR.CRITEO.ACCOUNT_ID.DOM;
                bannerBidMock.params.publisherSubId = "".concat(criteoPubSubId, "_").concat(slot.rktr_slot_id);
                bannerAdUnitMock.bids.push(JSON.parse(JSON.stringify(bannerBidMock)));
                break;

              case 'pangaea':
                bannerBidMock.params.invCode = invCode + '_' + posValue;
                bannerBidMock.params.member = isIntl() ? CONFIGURATION.VENDOR.PANGAEA.ACCOUNT_ID.INTL : CONFIGURATION.VENDOR.PANGAEA.ACCOUNT_ID.DOM;
                pbLogger.log('Pushing Pangaea Bid: ', bannerBidMock);

                if (CONFIGURATION.BIDDERS.NATIVE[isIntl() ? 'INTL' : 'DOM'].indexOf(bidder) >= 0) {
                  bannerAdUnitMock.mediaTypes["native"] = nativeMediaType;
                }

                bannerAdUnitMock.bids.push(JSON.parse(JSON.stringify(bannerBidMock)));
                break;

              case 'rubicon':
                bannerBidMock.params.siteId = isIntl() ? IsMobile.any ? CONFIGURATION.VENDOR.RUBICON.SITE_ID.INTL.MOBILE : CONFIGURATION.VENDOR.RUBICON.SITE_ID.INTL.DESKTOP : IsMobile.any ? CONFIGURATION.VENDOR.RUBICON.SITE_ID.DOM.MOBILE : CONFIGURATION.VENDOR.RUBICON.SITE_ID.DOM.DESKTOP;

                if (IsMobile.any) {
                  if (isHomepage) {
                    bannerBidMock.params.zoneId = isIntl() ? CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.INTL.MOBILE.HP[position] ? CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.INTL.MOBILE.HP[position] : CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.INTL.MOBILE.HP : CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.DOM.MOBILE.HP[position] ? CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.DOM.MOBILE.HP[position] : CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.DOM.MOBILE.HP;
                  } else {
                    bannerBidMock.params.zoneId = isIntl() ? CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.INTL.MOBILE.ROS[position] ? CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.INTL.MOBILE.ROS[position] : CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.INTL.MOBILE.ROS : CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.DOM.MOBILE.ROS[position] ? CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.DOM.MOBILE.ROS[position] : CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.DOM.MOBILE.ROS;
                  }
                } else {
                  if (isHomepage) {
                    bannerBidMock.params.zoneId = isIntl() ? CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.INTL.DESKTOP.HP[position] ? CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.INTL.DESKTOP.HP[position] : CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.INTL.DESKTOP.HP : CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.DOM.DESKTOP.HP[position] ? CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.DOM.DESKTOP.HP[position] : CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.DOM.DESKTOP.HP;
                  } else {
                    bannerBidMock.params.zoneId = isIntl() ? CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.INTL.DESKTOP.ROS[position] ? CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.INTL.DESKTOP.ROS[position] : CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.INTL.DESKTOP.ROS : CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.DOM.DESKTOP.ROS[position] ? CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.DOM.DESKTOP.ROS[position] : CONFIGURATION.VENDOR.RUBICON.ZONE_MAPPING.DOM.DESKTOP.ROS;
                  }
                }

                bannerBidMock.params.position = position;
                bannerBidMock.params.sizes = sizeMapArray;
                pbLogger.log('Pushing Rubicon Bid: ', bannerBidMock);

                if (CONFIGURATION.BIDDERS.NATIVE[isIntl() ? 'INTL' : 'DOM'].indexOf(bidder) >= 0) {
                  bannerAdUnitMock.mediaTypes["native"] = nativeMediaType;
                }

                bannerAdUnitMock.bids.push(JSON.parse(JSON.stringify(bannerBidMock)));
                break;

              case 'ix':
                slot.monetization.filteredSizes.forEach(function (fSize) {
                  var ixBidMock = {
                    bidder: 'ix',
                    params: {
                      siteId: '',
                      size: []
                    }
                  };
                  var formattedSize = fSize.join('x');
                  fSize = fSize.map(function (size) {
                    return parseInt(size, 10);
                  });
                  ixBidMock.params.siteId = IsMobile.any ? isIntl() ? CONFIGURATION.VENDOR.IX.SITE_ID.INTL.MOBILE[position][formattedSize] || '' : CONFIGURATION.VENDOR.IX.SITE_ID.DOM.MOBILE[position][formattedSize] || '' : isIntl() ? CONFIGURATION.VENDOR.IX.SITE_ID.INTL.DESKTOP[position][formattedSize] || '' : CONFIGURATION.VENDOR.IX.SITE_ID.DOM.DESKTOP[position][formattedSize] || '';
                  ixBidMock.params.size = JSON.parse(JSON.stringify(fSize));

                  if (ixBidMock.params.siteId !== '') {
                    pbLogger.log('Pushing IX Bid: ', ixBidMock);

                    if (CONFIGURATION.BIDDERS.NATIVE[isIntl() ? 'INTL' : 'DOM'].indexOf(bidder) >= 0) {
                      bannerAdUnitMock.mediaTypes["native"] = nativeMediaType;
                    }

                    bannerAdUnitMock.bids.push(JSON.parse(JSON.stringify(ixBidMock)));
                  }
                });
                break;

              case 'trustx':
                slot.monetization.filteredSizes.forEach(function (fSize) {
                  var formattedSize = fSize.join('x');
                  var trustxBidMock = {
                    bidder: 'trustx',
                    params: {
                      uid: 0
                    }
                  };
                  trustxBidMock.params.uid = window.AdFuelUtils.isMobile.any ? window.AdFuelUtils.isIntl() ? CONFIGURATION.VENDOR.TRUSTX.UID.INTL.MOBILE[position][formattedSize] || '' : CONFIGURATION.VENDOR.TRUSTX.UID.DOM.MOBILE[position][formattedSize] || '' : window.AdFuelUtils.isIntl() ? CONFIGURATION.VENDOR.TRUSTX.UID.INTL.DESKTOP[position][formattedSize] || '' : CONFIGURATION.VENDOR.TRUSTX.UID.DOM.DESKTOP[position][formattedSize] || '';

                  if (trustxBidMock.params.uid !== '') {
                    pbLogger.log('Pushing TRUSTX Bid: ', trustxBidMock);

                    if (CONFIGURATION.BIDDERS.NATIVE[isIntl() ? 'INTL' : 'DOM'].indexOf(bidder) >= 0) {
                      bannerAdUnitMock.mediaTypes["native"] = nativeMediaType;
                    }

                    bannerAdUnitMock.bids.push(JSON.parse(JSON.stringify(trustxBidMock)));
                  }
                });
                break;

              case 'openx':
                bannerAdUnitMock.mediaTypes.banner.sizes.forEach(function (filteredSize) {
                  var openXBidMock = {
                    bidder: 'openx',
                    params: {
                      unit: '',
                      delDomain: 'turnereu1-d.openx.net',
                      customParams: {}
                    }
                  };
                  var formattedSize = filteredSize.join('x');
                  openXBidMock.params.unit = IsMobile.any ? isIntl() ? CONFIGURATION.VENDOR.OPENX.UNIT_MAPPING.INTL.MOBILE[formattedSize] : CONFIGURATION.VENDOR.OPENX.UNIT_MAPPING.DOM.MOBILE[formattedSize] : isIntl() ? CONFIGURATION.VENDOR.OPENX.UNIT_MAPPING.INTL.DESKTOP[formattedSize] : CONFIGURATION.VENDOR.OPENX.UNIT_MAPPING.DOM.DESKTOP[formattedSize];
                  var exists = false;
                  bannerAdUnitMock.bids.forEach(function (bid) {
                    if (bid.bidder === 'openx') {
                      if (bid.params.unit === openXBidMock.params.unit) {
                        exists = true;
                      }

                      exists = true;
                    }
                  });

                  if (!exists) {
                    pbLogger.log('Pushing OpenX Bid: ', openXBidMock);

                    if (CONFIGURATION.BIDDERS.NATIVE[isIntl() ? 'INTL' : 'DOM'].indexOf(bidder) >= 0) {
                      bannerAdUnitMock.mediaTypes["native"] = nativeMediaType;
                    }

                    bannerAdUnitMock.bids.push(JSON.parse(JSON.stringify(openXBidMock)));
                  }
                });
                break;

              case 'sharethrough':
                bannerAdUnitMock.mediaTypes.banner.sizes.forEach(function (filteredSize) {
                  var sharethroughBidMock = bannerBidMock;
                  var formattedSize = filteredSize.join('x');
                  sharethroughBidMock.params.pkey = IsMobile.any ? isIntl() ? CONFIGURATION.VENDOR.SHARETHROUGH.UNIT_MAPPING.INTL.MOBILE[formattedSize] : CONFIGURATION.VENDOR.SHARETHROUGH.UNIT_MAPPING.DOM.MOBILE[formattedSize] : isIntl() ? CONFIGURATION.VENDOR.SHARETHROUGH.UNIT_MAPPING.INTL.DESKTOP[formattedSize] : CONFIGURATION.VENDOR.SHARETHROUGH.UNIT_MAPPING.DOM.DESKTOP[formattedSize];
                  var exists = false;
                  bannerAdUnitMock.bids.forEach(function (bid) {
                    if (bid.bidder === 'sharethrough') {
                      if (bid.params.pkey === sharethroughBidMock.params.pkey) {
                        exists = true;
                      }
                    }
                  });

                  if (!exists && sharethroughBidMock.params.pkey !== '') {
                    pbLogger.log("Pushing Sharethrough Bid for ".concat(bannerAdUnitMock.code), sharethroughBidMock);

                    if (CONFIGURATION.BIDDERS.NATIVE[isIntl() ? 'INTL' : 'DOM'].indexOf(bidder) >= 0) {
                      bannerAdUnitMock.mediaTypes["native"] = nativeMediaType;
                    }

                    bannerAdUnitMock.bids.push(JSON.parse(JSON.stringify(sharethroughBidMock)));
                  }
                });
                break;
            }
          });
          pbLogger.log('Banner Ad Unit: ', bannerAdUnitMock);
          pbLogger.log('Built Ad Units: ', BUILT_AD_UNITS);

          if (BUILT_AD_UNITS.indexOf(JSON.parse(JSON.stringify(bannerAdUnitMock.code))) < 0) {
            BUILT_AD_UNITS.push(JSON.parse(JSON.stringify(bannerAdUnitMock.code)));
            adUnits.push(JSON.parse(JSON.stringify(bannerAdUnitMock)));
          } else {
            nativeAdUnits.push(JSON.parse(JSON.stringify(bannerAdUnitMock)));
          }
        }
      }
    });
    pbLogger.log('Built Ad Units: ', JSON.parse(JSON.stringify({
      banner: adUnits,
      "native": nativeAdUnits
    })));
    return {
      banner: adUnits,
      "native": nativeAdUnits
    };
  };

  var preQueueCallback = function preQueueCallback(asset) {
    var preQueuePromise = new Promise(function (resolve) {
      var callbackExecuted = false;

      if (asset.length > 0) {
        var adUnits = buildPrebidAdUnits(asset);
        var bannerAdUnits = adUnits.banner.filter(function (adUnit) {
          return adUnit.bids.length > 0 && REQUESTED_AD_UNITS.banner.indexOf(adUnit) === -1;
        });

        var pbQueueFunction = function pbQueueFunction() {
          if (bannerAdUnits.length > 0) {
            pbLogger.log('Adding Banner Ad Units...', JSON.parse(JSON.stringify(bannerAdUnits)));
            window.pbjs.addAdUnits(JSON.parse(JSON.stringify(bannerAdUnits)));
            bannerAdUnits.forEach(function (bau) {
              REQUESTED_AD_UNITS.banner.push(bau);
            });
          }

          pbLogger.log('Requesting Bids...');
          var requestedSlots = asset.map(function (rockSlot) {
            return rockSlot.rktr_slot_id;
          });
          pbLogger.log('Requested slots...', requestedSlots);
          var slots = bannerAdUnits.map(function (adUnit) {
            pbLogger.log('Checking AdUnit: ', adUnit);
            return requestedSlots.indexOf(adUnit.code) >= 0 ? adUnit.code : null;
          }).filter(function (item) {
            return item !== null;
          });

          var bidsBackHandlerFunc = function bidsBackHandlerFunc(bids) {
            pbLogger.log('SETTING TARGETING:', slots);
            window.pbjs.setTargetingForGPTAsync(slots);

            if (!callbackExecuted) {
              callbackExecuted = true;
              resolve(bids || window.pbjs.getAdserverTargeting());
            }
          };

          pbLogger.log('Banner Ad Units: ', bannerAdUnits);
          pbLogger.log('Slots: ', slots);

          if (slots.length > 0) {
            window.pbjs.setConfig({
              adpod: {
                brandCategoryExclusion: false
              }
            });
            pbLogger.log('REQUESTING TARGETING:', bannerAdUnits);
            window.pbjs.requestBids({
              adUnitCodes: bannerAdUnits.map(function (adUnit) {
                return adUnit.code;
              }),
              timeout: IsMobile.any ? CONFIGURATION.TIMEOUTS.DISPLAY.MOBILE : CONFIGURATION.TIMEOUTS.DISPLAY.DESKTOP,
              bidsBackHandler: bidsBackHandlerFunc
            });
            bannerAdUnits.length = 0;
          } else {
            resolve({
              msg: 'No Slots'
            });
          }
        };

        window.pbjs.que.push(pbQueueFunction);
      } else {
        if (!callbackExecuted) {
          callbackExecuted = true;
          resolve({
            msg: 'No Registry'
          });
        }
      }
    });
    preQueuePromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    preQueuePromise.monetized = true;
    return preQueuePromise;
  };

  var preDispatchCallback = function preDispatchCallback(asset) {
    var preDispatchPromise = new Promise(function (resolve) {
      setGeoTargeting();
      resolve({
        msg: 'GeoTargeting Set'
      });
    });
    preDispatchPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    preDispatchPromise.monetized = true;
    return preDispatchPromise;
  };

  var preRefreshCallback = function preRefreshCallback(asset) {
    var preRefreshPromise = new Promise(function (resolve) {
      var callbackExecuted = false;

      if (asset.length > 0) {
        var adUnits = buildPrebidAdUnits(asset);
        pbLogger.log('Pre-Refresh Asset: ', asset);
        var refreshedPageSlots = asset.map(function (pageSlot) {
          pbLogger.log('Page Slot: ', pageSlot, pageSlot.rktr_slot_id);
          return pageSlot.rktr_slot_id;
        });
        pbLogger.log('Refreshed Page Slots: ', refreshedPageSlots);

        if (adUnits.banner.length > 0 || adUnits["native"].length > 0) {
          var adUnitCodes = adUnits.banner.map(function (adUnit) {
            return adUnit.code;
          });

          if (adUnitCodes.length <= 0) {
            adUnitCodes = adUnits["native"].map(function (adUnit) {
              return adUnit.code;
            });
          }

          window.pbjs.setConfig({
            adpod: {
              brandCategoryExclusion: false
            }
          });
          pbLogger.log('Requesting Bids...', adUnitCodes);
          window.pbjs.requestBids({
            adUnitCodes: adUnitCodes,
            timeout: IsMobile.any ? CONFIGURATION.TIMEOUTS.DISPLAY.MOBILE : CONFIGURATION.TIMEOUTS.DISPLAY.DESKTOP,
            bidsBackHandler: function bidsBackHandler(bids) {
              pbLogger.log('GOT BIDS: ', bids, adUnitCodes);
              window.googletag.cmd.push(function () {
                window.pbjs.setTargetingForGPTAsync(adUnitCodes);

                if (!callbackExecuted) {
                  callbackExecuted = true;
                  resolve(bids || window.pbjs.getAdserverTargeting());
                }
              });
            }
          });
        } else {
          pbLogger.log('No Ad Units to Refresh.', adUnits);

          if (!callbackExecuted) {
            callbackExecuted = true;
            resolve({
              msg: 'No Ad Units'
            });
          }
        }
      } else {
        if (!callbackExecuted) {
          callbackExecuted = true;
          resolve({
            msg: 'No Slots'
          });
        }
      }
    });
    preRefreshPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    preRefreshPromise.monetized = true;
    return preRefreshPromise;
  };

  var destroySlotsCallback = function destroySlotsCallback(slotIds) {
    var destroySlotsPromise = new Promise(function (resolve) {
      var rAU = Object.assign({}, REQUESTED_AD_UNITS);
      var bAU = [].concat(BUILT_AD_UNITS);
      slotIds.forEach(function (slotId) {
        rAU.banner.forEach(function (adUnit, index) {
          pbLogger.log('rAU AdUnit: ', adUnit);

          if (adUnit.code === slotId) {
            pbLogger.log('Destroying Slot Requested Record: ', slotId);
            REQUESTED_AD_UNITS.banner.splice(index, 1);
          }
        });
        bAU.forEach(function (adUnit, index) {
          pbLogger.log('bAU AdUnit: ', adUnit);

          if (adUnit === slotId) {
            pbLogger.log('Destroying Slot Built Record: ', slotId);
            BUILT_AD_UNITS.splice(index, 1);
          }
        });
      });
      resolve({
        msg: 'Slots Destroyed'
      });
    });
    destroySlotsPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    return destroySlotsPromise;
  };

  var setGeoTargeting = function setGeoTargeting(forceIntl) {
    var setGeoTarget = function setGeoTarget() {
      pbLogger.log('Setting GeoTargeting... ', isIntl() || forceIntl);

      if (isIntl()) {
        pbLogger.log('Setting Geo Target: EU');

        if (window.AdFuel) {
          window.AdFuel.addPageLevelTarget('hbg', 'EU');
        } else {
          window.googletag.pubads().setTargeting('hbg', 'EU');
        }
      } else if (forceIntl) {
        pbLogger.log('Setting Geo Target: EU');

        if (window.AdFuel) {
          window.AdFuel.addPageLevelTarget('hbg', 'EU');
        } else {
          window.googletag.pubads().setTargeting('hbg', 'EU');
        }
      } else {
        pbLogger.log('Setting Geo Target: US');

        if (window.AdFuel) {
          window.AdFuel.addPageLevelTarget('hbg', 'US');
        } else {
          window.googletag.pubads().setTargeting('hbg', 'US');
        }
      }
    };

    if (window.googletag && window.googletag.apiReady) {
      setGeoTarget();
    } else {
      window.googletag.cmd.push(setGeoTarget);
    }
  };

  var registerModuleWithAdFuel = function registerModuleWithAdFuel() {
    pbLogger.log('Registering ' + MODULE_NAME + ' module with AdFuel', CONFIGURATION);
    window.AdFuel.registerModule(MODULE_NAME, {
      preQueueCallback: preQueueCallback,
      preDispatchCallback: preDispatchCallback,
      preRefreshCallback: preRefreshCallback,
      destroySlotsCallback: destroySlotsCallback
    }, MODULE_VERSION, CONFIGURATION, true);
  };

  var configurePrebidLibrary = function configurePrebidLibrary(prebidConfig, initConfig) {
    if (!libraryConfigured) {
      window.pbjs = window.pbjs || {};
      window.pbjs.que = window.pbjs.que || [];
      libraryConfigured = true;
      bidMocks.appnexus.params.member = isIntl() ? CONFIGURATION.VENDOR.APPNEXUS.ACCOUNT_ID.INTL : CONFIGURATION.VENDOR.APPNEXUS.ACCOUNT_ID.DOM;
      bidMocks.pangaea.params.member = isIntl() ? CONFIGURATION.VENDOR.PANGAEA.ACCOUNT_ID.INTL : CONFIGURATION.VENDOR.PANGAEA.ACCOUNT_ID.DOM;
      bidMocks.rubicon.params.accountId = isIntl() ? CONFIGURATION.VENDOR.RUBICON.ACCOUNT_ID.INTL : CONFIGURATION.VENDOR.RUBICON.ACCOUNT_ID.DOM;
      var displayPriceBuckets = {
        buckets: [{
          precision: 2,
          min: 0,
          max: 5,
          increment: 0.01
        }, {
          precision: 2,
          min: 5,
          max: 30,
          increment: 0.05
        }, {
          precision: 2,
          min: 30,
          max: isIntl() ? 50 : 115,
          increment: 1.0
        }]
      };
      var videoPriceBuckets = {
        buckets: [{
          precision: 2,
          min: 4,
          max: 50,
          increment: 1
        }, {
          precision: 2,
          min: 50,
          max: 100,
          increment: 5
        }]
      };
      var mediaTypePriceBuckets = {
        banner: displayPriceBuckets,
        video: videoPriceBuckets,
        "native": displayPriceBuckets
      };
      var priceBuckets = {
        buckets: [{
          precision: 2,
          min: 0,
          max: 5,
          increment: 0.01
        }, {
          precision: 2,
          min: 5,
          max: 30,
          increment: 0.05
        }, {
          precision: 2,
          min: 30,
          max: isIntl() ? 50 : 115,
          increment: 1.0
        }]
      };
      var sendAllBids = true; // isIntl ? false : true;

      var innerFunc = function innerFunc() {
        var checkConsent = typeof initConfig.USER_CONSENT !== 'undefined' ? initConfig.USER_CONSENT.ENABLED === true : false;
        var prebidConfigObject = {
          priceGranularity: priceBuckets,
          mediaTypePriceGranularity: mediaTypePriceBuckets,
          enableSendAllBids: sendAllBids,
          sendNativeTargetingKeys: false,
          bidderTimeout: IsMobile.any ? prebidConfig.TIMEOUTS.DISPLAY.MOBILE : prebidConfig.TIMEOUTS.DISPLAY.DESKTOP,
          cache: {
            url: 'https://prebid.adnxs.com/pbc/v1/cache'
          },
          adpod: {
            brandCategoryExclusion: true,
            prioritizeDeals: true,
            dealTier: {
              appnexus: {
                prefix: 'tier',
                minDealTier: 6
              }
            }
          },
          userSync: {
            filterSettings: {
              iframe: {
                bidders: '*',
                // '*' means all bidders
                filter: 'include'
              }
            }
          }
        };
        var s2sBidders = prebidConfig.BIDDERS.S2S[isIntl() ? 'INTL' : 'DOM'];
        pbLogger.log('Fire S2S: ', s2sBidders.length > 0);

        if (s2sBidders.length > 0) {
          prebidConfigObject.s2sConfig = {
            accountId: 'f7c6e556-48f6-4b8c-9fb6-921c12c9362f',
            enabled: true,
            bidders: prebidConfig.BIDDERS.S2S[isIntl() ? 'INTL' : 'DOM'],
            timeout: IsMobile.any ? prebidConfig.TIMEOUTS.DISPLAY.MOBILE : prebidConfig.TIMEOUTS.DISPLAY.DESKTOP,
            adapter: 'prebidServer',
            endpoint: 'https://prebid.adnxs.com/pbs/v1/openrtb2/auction',
            syncEndpoint: 'https://prebid.adnxs.com/pbs/v1/cookie_sync'
          };
        }

        var bidderSettings = {
          appnexus: {
            suppressEmptyKeys: true,
            adserverTargeting: [{
              key: 'hb_appnexus_tier',
              val: function val(bidResponse) {
                if (bidResponse.appnexus.dealPriority != null) {
                  return bidResponse.appnexus.dealPriority;
                }
              }
            }]
          }
        };

        if (!isIntl()) {
          bidderSettings.rubicon = {
            alwaysUseBid: true,
            suppressEmptyKeys: true,
            adserverTargeting: [{
              key: 'hb_db_rubicon',
              val: function val(bidResponse) {
                var keyvalue;

                if (bidResponse.adserverTargeting && bidResponse.adserverTargeting['rpfl_' + (isIntl() ? prebidConfig.VENDOR.RUBICON.ACCOUNT_ID.INTL : prebidConfig.VENDOR.RUBICON.ACCOUNT_ID.DOM)]) {
                  keyvalue = bidResponse.adserverTargeting['rpfl_' + (isIntl() ? prebidConfig.VENDOR.RUBICON.ACCOUNT_ID.INTL : prebidConfig.VENDOR.RUBICON.ACCOUNT_ID.DOM)];
                } else if (bidResponse.rubiconTargeting && bidResponse.rubiconTargeting['rpfl_' + (isIntl() ? prebidConfig.VENDOR.RUBICON.ACCOUNT_ID.INTL : prebidConfig.VENDOR.RUBICON.ACCOUNT_ID.DOM)]) {
                  keyvalue = bidResponse.rubiconTargeting['rpfl_' + (isIntl() ? prebidConfig.VENDOR.RUBICON.ACCOUNT_ID.INTL : prebidConfig.VENDOR.RUBICON.ACCOUNT_ID.DOM)];
                } else {
                  return;
                }

                var dealTier = keyvalue.substring(keyvalue.indexOf('_') + 1);
                return dealTier;
              }
            }]
          };
        }

        Object.keys(bidMocks).forEach(function (bidder) {
          bidderSettings[bidder] = bidderSettings[bidder] || {};
          bidderSettings[bidder].sendStandardTargeting = false;
        });

        if (checkConsent) {
          var consentGranted = getConsent();
          var consentRegion = getUserConsentRegion();
          pbLogger.log('Checking for GDPR Consent...');

          if (consentGranted || consentRegion === 'gdpr') {
            if (consentRegion === 'gdpr') {
              pbLogger.log('Setting consentManagement config...');
              prebidConfigObject.consentManagement = {
                cmpApi: 'iab',
                timeout: 750,
                allowAuctionWithoutConsent: false
              };
            }

            pbLogger.log('Setting config...', prebidConfigObject);
            window.pbjs.setConfig(prebidConfigObject);
            pbLogger.log('Setting Bidder Settings...', bidderSettings);
            window.pbjs.bidderSettings = bidderSettings;
            pbLogger.log('Adding alias for Pangaea...');
            window.pbjs.aliasBidder('appnexus', 'pangaea');
          }
        } else {
          pbLogger.log('Skipping User Consent Check...');
          pbLogger.log('Setting config...', prebidConfigObject);
          window.pbjs.setConfig(prebidConfigObject);
          pbLogger.log('Setting Bidder Settings...', bidderSettings);
          window.pbjs.bidderSettings = bidderSettings;
          pbLogger.log('Adding alias for Pangaea...');
          window.pbjs.aliasBidder('appnexus', 'pangaea');
        }
      };

      window.pbjs.que.push(innerFunc);
      window.AdFuelVideoAPI = window.AdFuelVideoAPI || {};
      window.AdFuelVideoAPI.Prebid = window.PrebidVideoAPI = {
        getTargetingData: getVideoBids,
        getRefreshedTargetingData: getMidRollVideoBids,
        getPreRollTargetingData: getVideoBids,
        getMidRollTargetingData: getMidRollVideoBids,
        getRefreshedPreRollTargetingData: getRefreshedVideoBids,
        getRefreshedMidRollTargetingData: getMidRollVideoBids,
        __VERSION__: MODULE_VERSION
      };
      var timeoutOverride = getURLParam('mdt');

      if (timeoutOverride) {
        Object.keys(prebidConfig.TIMEOUTS).forEach(function (type) {
          Object.keys(prebidConfig.TIMEOUTS[type]).forEach(function (platform) {
            prebidConfig.TIMEOUTS[type][platform] = parseInt(timeoutOverride, 10);
          });
        });
        pbLogger.log('Overriding Max Duration Time: ', prebidConfig.TIMEOUTS);
      }
    }
  };

  var init = function init(config) {
    var initPromise = new Promise(function (resolve) {
      pbLogger = getLogger(MODULE_NAME, MODULE_VERSION, 'prebid', 'color: #58f53f; padding: 2px', config.PREBID.DEBUG);
      var consentGranted = getConsent();
      var consentRegion = getUserConsentRegion();

      if (consentRegion === 'ccpa' && !consentGranted) {
        pbLogger.log('Preventing Initialization due to CCPA Restrictions.');
        resolve();
      } else {
        var validation = validateConfiguration(config.PREBID);

        if (validation.status) {
          pbLogger.log('Configuration Validated: ', config.PREBID);
          configurePrebidLibrary(CONFIGURATION, config);

          if (window.AdFuel && window.AdFuel.cmd) {
            // AdFuel loaded first
            window.AdFuel.cmd.push(registerModuleWithAdFuel);
          } else if (window.AdFuel && window.AdFuel.registerModule) {
            registerModuleWithAdFuel();
          } else {
            addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
          }
        } else {
          validation.errors.forEach(function (error) {
            pbLogger.error(error);
          });
        }

        resolve();
      }
    });
    initPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    return initPromise;
  };

  if (window.AdFuelOptions) {
    if (window.AdFuelOptions.USER_CONSENT.ENABLED) {
      var callInit = function callInit() {
        setTimeout(function () {
          if (window.WM.UserConsent && window.WM.UserConsent.isReady()) {
            if (window.WM.UserConsent.getRegion() === 'ccpa') {
              init(window.AdFuelOptions);
            } else {
              if (initEventSet) {
                init(window.AdFuelOptions);
              } else {
                addEvent(window, 'optanonLoaded', callInit);
                initEventSet = true;
              }
            }
          }
        }, 100);
      };

      if (window.WM && window.WM.UserConsent && window.WM.UserConsent.isReady()) {
        callInit();
      } else {
        addEvent(window, 'userConsentReady', callInit);
      }
    } else {
      init(window.AdFuelOptions);
    }
  }

  var index = {
    getTargetingData: getVideoBids,
    getRefreshedTargetingData: getMidRollVideoBids,
    getPreRollTargetingData: getVideoBids,
    getMidRollTargetingData: getMidRollVideoBids,
    getRefreshedPreRollTargetingData: getRefreshedVideoBids,
    getRefreshedMidRollTargetingData: getMidRollVideoBids,
    init: init,
    preQueueCallback: preQueueCallback,
    preDispatchCallback: preDispatchCallback,
    preRefreshCallback: preRefreshCallback,
    buildSlot: function buildSlot(slotData) {
      var buildPromise = new Promise(function (resolve) {
        preQueueCallback(slotData);
      });
      buildPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return buildPromise;
    },
    runAuction: function runAuction() {
      var auctionPromise = new Promise(function (resolve) {
        resolve();
      });
      auctionPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return auctionPromise;
    },
    setTargeting: function setTargeting(slotData) {
      var targetingPromise = new Promise(function (resolve) {
        preDispatchCallback();
      });
      targetingPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return targetingPromise;
    },
    __VERSION__: MODULE_VERSION,
    __NAME__: MODULE_NAME
  };
  return index;
}); ////////////////////////////////////////////
// AD Manual A9 for 2.0
////////////////////////////////////////////


(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof4(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.AmazonA9 = factory());
})(void 0, function () {
  'use strict';
  /*
    Amazon A9 Module - Version 4.0.19
    @4.0.0:  - Initialization Update for GDPR
    @4.0.1:  - Fix for init when SLOTNAMES.PREPEND_ADUNIT is false
    @4.0.2:  - Fix for unresolving promises
    @4.0.3:  - IsIntl Fix
    @4.0.4:  - Page-Level filtering
    @4.0.5:  - Monetized Slot filtering
    @4.0.6:  - Pre-roll before consent fix
    @4.0.7:  - Dupe request fix
    @4.0.8:  - Dupes correctly removed fix
    @4.0.9:  - refreshSlots clones bidSlots instead of builtSlots
    @4.0.10: - Fix for AdUnit Prepending
    @4.0.11: - True Fix for AdUnit Prepending
    @4.0.12: - Bug Fixes
    @4.0.13: - Bid Targeting Reliability
    @4.0.14: - hasVideo addition
    @4.0.15: - Manual Targeting
    @4.0.16: - OptanonLoaded Timing Fix
    @4.0.17: - CNNE Domestic Restriction
    @4.0.18: - CNNE Domestic Restriction FIXED
    @4.0.19: - Default to Manual Targeting
    -------------------------------------------------------------
    GDPR Status: Blocked
    CCPA Status: Blocked
  */

  var MODULE_NAME = 'Amazon A9 Module';
  var MODULE_VERSION = 'v4.0.19';
  var mergeDeep = window.AdFuelUtils.mergeDeep;
  var getLogger = window.AdFuelUtils.getLogger;
  var setIsIntl = window.AdFuelUtils.setIsIntl;
  var getURLParam = window.AdFuelUtils.getURLParam;
  var getUserConsentRegion = window.AdFuelUtils.getUserConsentRegion;
  var getConsent = window.AdFuelUtils.getConsent;
  var getConsentString = window.AdFuelUtils.getConsentString;
  var isIntl = window.AdFuelUtils.isIntl;
  var isCNNE = window.AdFuelUtils.isCNNE;
  var addEvent = window.AdFuelUtils.addEvent;
  var hasVideo = window.AdFuelUtils.hasVideo;
  var logger;
  var scriptIncluded = false;
  var scriptInitialized = false;
  var initEventSet = false;
  var CONFIGURATION = {
    ACCOUNT_IDS: {
      DOM: '3159',
      INTL: '3288'
    },
    TIMEOUTS: {
      DESKTOP: {
        DISPLAY: {
          INITIAL: 1150,
          REFRESH: 1150
        },
        VIDEO: {
          INITIAL: 500,
          REFRESH: 750,
          MIDROLL: 750
        }
      },
      MOBILE: {
        DISPLAY: {
          INITIAL: 750,
          REFRESH: 750
        },
        VIDEO: {
          INITIAL: 500,
          REFRESH: 750,
          MIDROLL: 750
        }
      }
    },
    SLOTNAMES: {
      PREROLL: 'aps-preroll',
      MIDROLL: 'aps-midroll',
      PREPEND_ADUNIT: false
    }
  };
  var blocked = false;
  var builtSlots = [];
  var refreshSlots = [];
  var defaultTimeout;
  var defaultRefreshTimeout;
  var siSection = '';

  var getTargetingData = function getTargetingData(timeout) {
    if (blocked) {
      logger.log('Blocked...');
      return new Promise(function (resolve) {
        return resolve({
          amznbid: '',
          amzniid: ''
        });
      });
    } else {
      timeout = timeout || defaultTimeout;
      var timeoutOverride = getURLParam('mdt');

      if (timeoutOverride) {
        timeout = timeoutOverride;
        logger.log('Overriding Max Duration Time: ', timeout);
      }

      var timeoutFunction = function timeoutFunction(resolve, reject) {
        window.targetingTimeoutId = setTimeout(function () {
          logger.log('getTargetingData timed out after ' + timeout + 'ms.');
          clearTimeout(window.targetingTimeoutId);
          reject('getTargetingData timed out after ' + timeout + 'ms.');
        }, timeout);
      };

      var wrappedFunction = function wrappedFunction(resolve) {
        logger.log('Getting Video targeting...');

        var innerFunction = function innerFunction(bids) {
          logger.log('Clearing Timeout: ', window.targetingTimeoutId);
          clearTimeout(window.targetingTimeoutId);
          var targetBid = {};
          logger.log('Pre-Roll Bids: ', bids);

          if (bids) {
            bids.forEach(function (bid) {
              if (bid.slotID.indexOf('aps-preroll') >= 0) {
                targetBid = bid;
              }
            });
          }

          var result = targetBid.targeting || {
            amznbid: '',
            amzniid: ''
          };
          logger.log('Returning Targeting: ', result);
          resolve(result);
        };

        window.A9VideoAPI._targetingPromise.then(function (bids) {
          resolve(innerFunction(bids));
        });
      };

      var wrappedCallback = new Promise(wrappedFunction);
      var timeoutCallback = new Promise(timeoutFunction); // Returns a race between the timeout and the passed in promise

      return Promise.race([timeoutCallback, wrappedCallback]);
    }
  };

  var getRefreshedTargetingData = function getRefreshedTargetingData(slotName, timeout) {
    if (blocked) {
      return new Promise(function (resolve) {
        return resolve({
          amznbid: '',
          amzniid: ''
        });
      });
    } else {
      timeout = timeout || defaultRefreshTimeout;
      slotName = slotName ? slotName + (window.AdFuelUtils.isMobile.phone ? '-mobile' : '') : window.AdFuelUtils.isMobile.phone ? 'aps-midroll-mobile' : 'aps-midroll';
      var timeoutOverride = getURLParam('mdt');
      var slotNameOverride = getURLParam('slotname');

      if (timeoutOverride) {
        timeout = timeoutOverride;
        logger.log('Overriding Max Duration Time: ', timeout);
      }

      if (slotNameOverride) {
        logger.log('Overriding Slot Name: ', slotName);
        slotName = slotNameOverride;
      }

      var timeoutFunction = function timeoutFunction(resolve, reject) {
        window.targetingTimeoutId = setTimeout(function () {
          logger.log('getRefreshedTargetingData timed out after ' + timeout + 'ms.');
          clearTimeout(window.targetingTimeoutId);
          reject('getRefreshedTargetingData timed out after ' + timeout + 'ms.');
        }, timeout);
      };

      var wrappedFunction = function wrappedFunction(resolve) {
        window.A9VideoAPI._refreshedTargetingPromise = new Promise(function (resolve) {
          window.apstag.fetchBids({
            params: {
              si_section: 'video'
            },
            slots: [{
              slotID: slotName,
              slotName: slotName,
              mediaType: 'video'
            }],
            timeout: timeout
          }, resolve);
        });

        var innerFunction = function innerFunction(bids) {
          clearTimeout(window.targetingTimeoutId);
          var targetBid = {};
          bids.forEach(function (bid) {
            if (bid.slotID === slotName) {
              targetBid = bid;
            }
          });
          var result = targetBid.targeting || {
            amznbid: '',
            amzniid: ''
          };
          logger.log('Returning Refreshed Targeting: ', result);
          resolve(result);
        };

        logger.log('Refreshing Video targeting...');

        window.A9VideoAPI._refreshedTargetingPromise.then(innerFunction);
      };

      var wrappedCallback = new Promise(wrappedFunction);
      var timeoutCallback = new Promise(timeoutFunction); // Returns a race between the timeout and the passed in promise

      return Promise.race([timeoutCallback, wrappedCallback]);
    }
  };

  var getPreRollTargetingData = function getPreRollTargetingData(timeout) {
    if (blocked) {
      logger.log('Blocked...');
      return new Promise(function (resolve) {
        return resolve({
          amznbid: '',
          amzniid: ''
        });
      });
    } else {
      timeout = timeout || defaultTimeout;
      var timeoutOverride = getURLParam('mdt');
      var slotNameOverride = getURLParam('slotname');
      var slotName = 'aps-preroll' + (window.AdFuelUtils.isMobile.phone ? '-mobile' : '');

      if (timeoutOverride) {
        timeout = timeoutOverride;
        logger.log('Overriding Max Duration Time: ', timeout);
      }

      if (slotNameOverride) {
        logger.log('Overriding Slot Name: ', slotName);
        slotName = slotNameOverride;
      }

      var timeoutFunction = function timeoutFunction(resolve, reject) {
        window.targetingTimeoutId = setTimeout(function () {
          logger.log('getTargetingData timed out after ' + timeout + 'ms.');
          clearTimeout(window.targetingTimeoutId);
          reject('getTargetingData timed out after ' + timeout + 'ms.');
        }, timeout);
      };

      var wrappedFunction = function wrappedFunction(resolve) {
        logger.log('Getting A9 Video targeting...');

        var innerFunction = function innerFunction(bids) {
          clearTimeout(window.targetingTimeoutId);
          var targetBid = {};
          logger.log('Bids: ', bids);
          bids.forEach(function forEachBid(bid) {
            if (bid.slotID === (slotNameOverride || (window.AdFuelUtils.isMobile.phone ? 'aps-preroll-mobile' : 'aps-preroll'))) {
              targetBid = bid;
            }
          });
          var result = targetBid.targeting || {
            amznbid: '',
            amzniid: ''
          };
          logger.log('Returning Targeting: ', result);
          return result;
        };

        if (window.A9VideoAPI._preRollTargetingPromise) {
          window.A9VideoAPI._preRollTargetingPromise.then(function (bids) {
            resolve(innerFunction(bids));
          });
        } else {
          window.apstag.fetchBids({
            params: {
              si_section: 'video'
            },
            slots: [{
              slotID: slotName,
              slotName: slotName,
              mediaType: 'video'
            }],
            timeout: timeout
          }, resolve);
        }
      };

      var wrappedCallback = new Promise(wrappedFunction);
      var timeoutCallback = new Promise(timeoutFunction); // Returns a race between the timeout and the passed in promise

      return Promise.race([timeoutCallback, wrappedCallback]);
    }
  };

  var getRefreshedPreRollTargetingData = function getRefreshedPreRollTargetingData(slotName, timeout) {
    if (blocked) {
      logger.log('Blocked...');
      return new Promise(function (resolve) {
        return resolve({
          amznbid: '',
          amzniid: ''
        });
      });
    } else {
      timeout = timeout || defaultRefreshTimeout;
      var timeoutOverride = getURLParam('mdt');
      var slotNameOverride = getURLParam('slotname');

      var _slotName = 'aps-preroll' + (window.AdFuelUtils.isMobile.phone ? '-mobile' : '');

      if (timeoutOverride) {
        timeout = timeoutOverride;
        logger.log('Overriding Max Duration Time: ', timeout);
      }

      if (slotNameOverride) {
        logger.log('Overriding Slot Name: ', slotNameOverride);
        _slotName = slotNameOverride;
      }

      var timeoutFunction = function timeoutFunction(resolve, reject) {
        window.targetingTimeoutId = setTimeout(function () {
          logger.log('getRefreshedTargetingData timed out after ' + timeout + 'ms.');
          clearTimeout(window.targetingTimeoutId);
          reject('getRefreshedTargetingData timed out after ' + timeout + 'ms.');
        }, timeout);
      };

      var wrappedFunction = function wrappedFunction(resolve) {
        window.A9VideoAPI._refreshedPreRollTargetingPromise = new Promise(function (resolve) {
          window.apstag.fetchBids({
            params: {
              si_section: 'video'
            },
            slots: [{
              slotID: _slotName,
              slotName: _slotName,
              mediaType: 'video'
            }],
            timeout: defaultRefreshTimeout
          }, resolve);
        });

        var innerFunction = function innerFunction(bids) {
          clearTimeout(window.targetingTimeoutId);
          var targetBid = {};
          bids.forEach(function forEachBid(bid) {
            if (bid.slotID === (slotNameOverride || (window.AdFuelUtils.isMobile.phone ? 'aps-midroll-mobile' : 'aps-midroll'))) {
              targetBid = bid;
            }
          });
          var result = targetBid.targeting || {
            amznbid: '',
            amzniid: ''
          };
          logger.log('Returning Targeting: ', result);
          resolve(result);
        };

        logger.log('Refreshing Video targeting...');

        window.A9VideoAPI._refreshedPreRollTargetingPromise.then(innerFunction);
      };

      var wrappedCallback = new Promise(wrappedFunction);
      var timeoutCallback = new Promise(timeoutFunction); // Returns a race between the timeout and the passed in promise

      return Promise.race([timeoutCallback, wrappedCallback]);
    }
  };

  var getMidRollTargetingData = function getMidRollTargetingData(slotName, timeout) {
    if (blocked) {
      return new Promise(function (resolve) {
        return resolve({
          amznbid: '',
          amzniid: ''
        });
      });
    } else {
      timeout = timeout || defaultRefreshTimeout;
      var timeoutOverride = getURLParam('mdt');
      var slotNameOverride = getURLParam('slotname');

      var _slotName2 = 'aps-midroll' + (window.AdFuelUtils.isMobile.phone ? '-mobile' : '');

      if (timeoutOverride) {
        timeout = timeoutOverride;
        logger.log('Overriding Max Duration Time: ', timeout);
      }

      if (slotNameOverride) {
        logger.log('Overriding Slot Name: ', slotNameOverride);
        _slotName2 = slotNameOverride;
      }

      var timeoutFunction = function timeoutFunction(resolve, reject) {
        window.targetingTimeoutId = setTimeout(function () {
          logger.log('getRefreshedTargetingData timed out after ' + timeout + 'ms.');
          clearTimeout(window.targetingTimeoutId);
          reject('getRefreshedTargetingData timed out after ' + timeout + 'ms.');
        }, timeout);
      };

      var wrappedFunction = function wrappedFunction(resolve) {
        window.A9VideoAPI._midRollTargetingPromise = new Promise(function (resolve) {
          window.apstag.fetchBids({
            params: {
              si_section: 'video'
            },
            slots: [{
              slotID: _slotName2,
              mediaType: 'video'
            }],
            timeout: defaultRefreshTimeout
          }, resolve);
        });

        var innerFunction = function innerFunction(bids) {
          clearTimeout(window.targetingTimeoutId);
          var targetBid = {};
          bids.forEach(function (bid) {
            if (bid.slotID === (slotNameOverride || (window.AdFuelUtils.isMobile.phone ? 'aps-midroll-mobile' : 'aps-midroll'))) {
              targetBid = bid;
            }
          });
          var result = targetBid.targeting || {
            amznbid: '',
            amzniid: ''
          };
          logger.log('Returning Targeting: ', result);
          resolve(result);
        };

        logger.log('Refreshing Video targeting...');

        window.A9VideoAPI._midRollTargetingPromise.then(innerFunction);
      };

      var wrappedCallback = new Promise(wrappedFunction);
      var timeoutCallback = new Promise(timeoutFunction); // Returns a race between the timeout and the passed in promise

      return Promise.race([timeoutCallback, wrappedCallback]);
    }
  };

  var getRefreshedMidRollTargetingData = function getRefreshedMidRollTargetingData(slotName, timeout) {
    if (blocked) {
      return new Promise(function (resolve) {
        return resolve({
          amznbid: '',
          amzniid: ''
        });
      });
    } else {
      timeout = timeout || defaultRefreshTimeout;
      var timeoutOverride = getURLParam('mdt');
      var slotNameOverride = getURLParam('slotname');

      var _slotName3 = 'aps-midroll' + (window.AdFuelUtils.isMobile.phone ? '-mobile' : '');

      if (timeoutOverride) {
        timeout = timeoutOverride;
        logger.log('Overriding Max Duration Time: ', timeout);
      }

      if (slotNameOverride) {
        logger.log('Overriding Slot Name: ', slotNameOverride);
        _slotName3 = slotNameOverride;
      }

      var timeoutFunction = function timeoutFunction(resolve, reject) {
        window.targetingTimeoutId = setTimeout(function () {
          logger.log('getRefreshedTargetingData timed out after ' + timeout + 'ms.');
          clearTimeout(window.targetingTimeoutId);
          reject('getRefreshedTargetingData timed out after ' + timeout + 'ms.');
        }, timeout);
      };

      var wrappedFunction = function wrappedFunction(resolve) {
        window.A9VideoAPI._refreshedMidRollTargetingPromise = new Promise(function (resolve) {
          window.apstag.fetchBids({
            params: {
              si_section: 'video'
            },
            slots: [{
              slotID: _slotName3,
              mediaType: 'video'
            }],
            timeout: defaultRefreshTimeout
          }, resolve);
        });

        var innerFunction = function innerFunction(bids) {
          clearTimeout(window.targetingTimeoutId);
          var targetBid = {};
          bids.forEach(function (bid) {
            if (bid.slotID === (slotNameOverride || (window.AdFuelUtils.isMobile.phone ? 'aps-midroll-mobile' : 'aps-midroll'))) {
              targetBid = bid;
            }
          });
          var result = targetBid.targeting || {
            amznbid: '',
            amzniid: ''
          };
          resolve(result);
        };

        logger.log('Refreshing Video targeting...');

        window.A9VideoAPI._refreshedMidRollTargetingPromise.then(innerFunction);
      };

      var wrappedCallback = new Promise(wrappedFunction);
      var timeoutCallback = new Promise(timeoutFunction); // Returns a race between the timeout and the passed in promise

      return Promise.race([timeoutCallback, wrappedCallback]);
    }
  };

  var preQueueCallback = function preQueueCallback(asset) {
    var preQueuePromise = new Promise(function (resolve) {
      var bidSlots = [];

      if (asset && asset.length > 0) {
        logger.time('Slot Building');

        for (var x = 0; x < asset.length; x++) {
          var slot = asset[x];

          if (slot.rktr_ad_id && slot.monetization) {
            if (slot.monetization.isMonetized) {
              if (siSection === '') {
                var adUnitArray = slot.rktr_ad_id.split('/');

                if (adUnitArray.length > 1 && adUnitArray[1] !== 'homepage') {
                  siSection = adUnitArray[0] + (adUnitArray[1] ? '/' + adUnitArray[1] : '');
                }
              }

              var slotId = slot.rktr_slot_id;
              var slotName = slotId;

              if (CONFIGURATION.SLOTNAMES.PREPEND_ADUNIT) {
                logger.log('Prepending Ad Unit To SlotName...');
                slotName = "".concat(slot.rktr_ad_id, "_").concat(slotId);
              }

              var obj = {
                slotID: slotId,
                slotName: slotName,
                sizes: slot.monetization.filteredSizes
              };
              logger.log('A9 Slot Object: ', obj);

              if (builtSlots.indexOf(obj.slotID) < 0) {
                bidSlots.push(obj);
                builtSlots.push(obj.slotID);
              }
            }
          }
        }

        logger.timeEnd('Slot Building');
      } else if (asset && typeof asset.rktr_ad_id !== 'undefined') {
        logger.time('Slot Building');
        var _slot = asset;

        if (_slot.monetization && _slot.monetization.isMonetized) {
          if (siSection === '') {
            var _adUnitArray = _slot.rktr_ad_id.split('/');

            if (_adUnitArray.length > 1 && _adUnitArray[1] !== 'homepage') {
              siSection = _adUnitArray[0] + (_adUnitArray[1] ? '/' + _adUnitArray[1] : '');
            }
          }

          var _slotId = _slot.rktr_slot_id;
          var _slotName4 = _slotId;

          if (CONFIGURATION.SLOTNAMES.PREPEND_ADUNIT) {
            logger.log('Prepending Ad Unit To Slot ID...');
            _slotName4 = "".concat(_slot.rktr_ad_id, "_").concat(_slotId);
          }

          var _obj = {
            slotID: _slotId,
            slotName: _slotName4,
            sizes: _slot.monetization.filteredSizes
          };
          logger.log('A9 Slot Object: ', _obj);

          if (builtSlots.indexOf(_obj.slotID) < 0) {
            bidSlots.push(_obj);
            builtSlots.push(_obj.slotID);
          }
        }

        logger.timeEnd('Slot Building');
      } else {
        resolve({
          msg: 'No Slots',
          asset: asset
        });
      }

      var processBids = function processBids(bids) {
        if (bids.length > 0) {
          bids.forEach(function (bid) {
            var slotId = bid.slotID;
            var targets = Object.keys(bid.targeting);
            logger.log('Setting targeting for slot: ', slotId);
            targets.forEach(function (target) {
              logger.log("Setting target [".concat(target, "] with value: ").concat(bid.targeting[target]));
              window.AdFuel.addSlotLevelTarget(slotId, target, bid.targeting[target]);
            });
          });
        }

        bidSlots.length = 0;
        resolve(bids || {
          msg: 'No Bids',
          asset: asset
        });
      };

      if (bidSlots.length > 0) {
        var fetchBidsConfig = {
          slots: bidSlots,
          timeout: window.AdFuelUtils.isMobile.any ? CONFIGURATION.TIMEOUTS.MOBILE.DISPLAY.INITIAL : CONFIGURATION.TIMEOUTS.DESKTOP.DISPLAY.INITIAL
        };

        if (siSection !== '') {
          fetchBidsConfig.params = {
            si_section: siSection
          };
        }

        logger.log('REQUESTING TARGETING:', fetchBidsConfig);
        window.apstag.fetchBids(fetchBidsConfig, processBids);
        refreshSlots = [].concat(_toConsumableArray2(refreshSlots), bidSlots);
        logger.log('Setting refreshable slots to: ', refreshSlots);
      } else {
        logger.log('No valid slots.');
        resolve({
          msg: 'No monetization.',
          asset: asset
        });
      }
    });
    preQueuePromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    preQueuePromise.monetized = true;
    return preQueuePromise;
  };

  var preRefreshCallback = function preRefreshCallback(asset) {
    var preRefreshPromise = new Promise(function (resolve) {
      logger.time('Refreshing Bids');
      asset.forEach(function (slot) {
        if (siSection === '') {
          var adUnitArray = slot.rktr_ad_id.split('/');
          siSection = adUnitArray[0] + (adUnitArray[1] ? '/' + adUnitArray[1] : '');
        }
      });
      logger.log('Refresh Slots: ', refreshSlots);

      var removeDuplicateObjects = function removeDuplicateObjects(input) {
        var strings = input.map(function (item) {
          return JSON.stringify(item);
        });
        strings = _toConsumableArray2(new Set(strings));
        var results = strings.map(function (item) {
          return JSON.parse(item);
        });
        return results;
      };

      var slotsToRefresh = removeDuplicateObjects(refreshSlots);
      var fetchBidsConfig = {
        slots: slotsToRefresh,
        timeout: window.AdFuelUtils.isMobile.any ? CONFIGURATION.TIMEOUTS.MOBILE.DISPLAY.REFRESH : CONFIGURATION.TIMEOUTS.DESKTOP.DISPLAY.REFRESH
      };

      if (siSection !== '') {
        fetchBidsConfig.params = {
          si_section: siSection
        };
      }

      if (slotsToRefresh.length > 0) {
        logger.log('Fetching Bids... ', fetchBidsConfig);
        window.apstag.fetchBids(fetchBidsConfig, function (bids) {
          logger.log('Setting Display Bids...');
          window.apstag.setDisplayBids();
          logger.timeEnd('Refreshing Bids');
          resolve({
            msg: 'refreshed slots',
            bids: bids
          });
        });
      } else {
        logger.log('No slots to refresh: ', asset, refreshSlots);
        logger.timeEnd('Refreshing Bids');
        resolve({
          msg: 'No slots to refresh'
        });
      }
    });
    preRefreshPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    preRefreshPromise.monetized = true;
    return preRefreshPromise;
  };

  var registerModuleWithAdFuel = function registerModuleWithAdFuel() {
    if (!blocked) {
      logger.log('Registering module with AdFuel');
      window.AdFuel.registerModule(MODULE_NAME, {
        preQueueCallback: preQueueCallback,
        preRefreshCallback: preRefreshCallback
      }, MODULE_VERSION, CONFIGURATION, true);
    } else {
      logger.log('A9 Module Registration is Blocked!', blocked);
    }
  };

  var configureA9Library = function configureA9Library(a9Config) {
    defaultTimeout = window.AdFuelUtils.isMobile.any ? CONFIGURATION.TIMEOUTS.MOBILE.VIDEO.INITIAL : CONFIGURATION.TIMEOUTS.DESKTOP.VIDEO.INITIAL;
    defaultRefreshTimeout = window.AdFuelUtils.isMobile.any ? CONFIGURATION.TIMEOUTS.MOBILE.VIDEO.REFRESH : CONFIGURATION.TIMEOUTS.DESKTOP.VIDEO.REFRESH;
    var consentRegion = getUserConsentRegion();

    if (consentRegion === 'ccpa' || consentRegion === 'gdpr') {
      logger.log('Checking User Consent...');
      var consentStatus = getConsent();
      logger.log('User Consent Granted: ', consentStatus);
      logger.log('Exposing AdFuelVideoAPI.A9 and A9VideoAPI');
      window.A9VideoAPI = {
        getTargetingData: getTargetingData,
        getRefreshedTargetingData: getRefreshedTargetingData,
        getPreRollTargetingData: getPreRollTargetingData,
        getMidRollTargetingData: getMidRollTargetingData,
        getRefreshedPreRollTargetingData: getRefreshedPreRollTargetingData,
        getRefreshedMidRollTargetingData: getRefreshedMidRollTargetingData,
        __VERSION__: MODULE_VERSION
      };
      var pubId = CONFIGURATION.ACCOUNT_IDS.DOM;

      if (isIntl()) {
        pubId = CONFIGURATION.ACCOUNT_IDS.INTL;
      }

      logger.log('Final Pub ID: ', pubId);
      var bidTimeout = window.AdFuelUtils.isMobile.any ? CONFIGURATION.TIMEOUTS.MOBILE.VIDEO.INITIAL : CONFIGURATION.TIMEOUTS.DESKTOP.VIDEO.INITIAL;
      var timeoutOverride = getURLParam('mdt');

      if (timeoutOverride) {
        bidTimeout = timeoutOverride;
        logger.log('Overriding Max Duration Time: ', bidTimeout);
      }

      var slotName = window.AdFuelUtils.isMobile.phone ? CONFIGURATION.SLOTNAMES.PREROLL + '-mobile' : CONFIGURATION.SLOTNAMES.PREROLL;
      var slotNameOverride = getURLParam('slotname');

      if (slotNameOverride) {
        slotName = slotNameOverride;
        logger.log('Overriding Slot Name: ', slotName);
      }

      var _a9Config = {
        pubID: pubId,
        adServer: 'googletag',
        videoAdServer: 'freeWheel',
        deals: true
      };

      if (!blocked && consentStatus) {
        if (consentRegion === 'gdpr') {
          logger.log('Enabling GDPR...');
          var consent = getConsentString();
          _a9Config.gdpr = {
            enabled: true,
            consent: consent
          };
        }

        if (!scriptIncluded) {
          scriptIncluded = true;

          (function (a9, a, p, s, t, A, g) {
            if (a[a9]) return;

            function q(c, r) {
              a[a9]._Q.push([c, r]);
            }

            a[a9] = {
              init: function init() {
                q('i', arguments);
              },
              fetchBids: function fetchBids() {
                q('f', arguments);
              },
              _Q: []
            };
            A = p.createElement(s);
            A.async = !0;
            A.src = t;
            g = p.getElementsByTagName(s)[0];
            g.parentNode.insertBefore(A, g);
          })('apstag', window, document, 'script', '//c.amazon-adsystem.com/aax2/apstag.js');
        }

        if (!scriptInitialized) {
          scriptInitialized = true;
          logger.log('Initializing APSTAG Library...');
          window.apstag.init(_a9Config);

          if (hasVideo()) {
            window.A9VideoAPI._preRollTargetingPromise = window.A9VideoAPI._targetingPromise = new Promise(function (resolve) {
              window.apstag.fetchBids({
                params: {
                  si_section: 'video'
                },
                slots: [{
                  slotID: slotName,
                  slotName: slotName,
                  mediaType: 'video'
                }],
                timeout: bidTimeout
              }, resolve);
            });
          } else {
            logger.log('No video tag found. Not sending automatic pre-roll request.');
            window.A9VideoAPI._preRollTargetingPromise = window.A9VideoAPI._targetingPromise = new Promise(function (resolve) {
              return resolve();
            });
          }

          if (window.AdFuel && window.AdFuel.cmd) {
            // AdFuel loaded first
            window.AdFuel.cmd.push(registerModuleWithAdFuel);
          } else if (window.AdFuel) {
            registerModuleWithAdFuel();
          } else {
            // wait for AdFuel to load
            addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
          }
        }
      } else {
        if (!consentStatus) logger.log('A9 is blocked due to GDPR restrictions.');
        blocked = true;
        logger.log('Exposing AdFuelVideoAPI.A9 and A9VideoAPI');
        window.AdFuelVideoAPI = window.AdFuelVideoAPI || {};
        window.AdFuelVideoAPI.A9 = window.A9VideoAPI = {
          getTargetingData: getTargetingData,
          getRefreshedTargetingData: getRefreshedTargetingData,
          getPreRollTargetingData: getPreRollTargetingData,
          getMidRollTargetingData: getMidRollTargetingData,
          getRefreshedPreRollTargetingData: getRefreshedPreRollTargetingData,
          getRefreshedMidRollTargetingData: getRefreshedMidRollTargetingData,
          __VERSION__: MODULE_VERSION
        };
      }
    } else {
      logger.log('Skipping User Consent Check...');
      logger.log('Exposing AdFuelVideoAPI.A9 and A9VideoAPI');
      window.AdFuelVideoAPI = window.AdFuelVideoAPI || {};
      window.AdFuelVideoAPI.A9 = window.A9VideoAPI = {
        getTargetingData: getTargetingData,
        getRefreshedTargetingData: getRefreshedTargetingData,
        getPreRollTargetingData: getPreRollTargetingData,
        getMidRollTargetingData: getMidRollTargetingData,
        getRefreshedPreRollTargetingData: getRefreshedPreRollTargetingData,
        getRefreshedMidRollTargetingData: getRefreshedMidRollTargetingData,
        __VERSION__: MODULE_VERSION
      };
      var _pubId = CONFIGURATION.ACCOUNT_IDS.DOM;

      if (isIntl()) {
        _pubId = CONFIGURATION.ACCOUNT_IDS.INTL;
      }

      logger.log('Final Pub ID: ', _pubId);
      var _bidTimeout = defaultTimeout;

      var _timeoutOverride = getURLParam('mdt');

      if (_timeoutOverride) {
        _bidTimeout = _timeoutOverride;
        logger.log('Overriding Max Duration Time: ', _bidTimeout);
      }

      var _slotName5 = window.AdFuelUtils.isMobile.phone ? 'aps-preroll-mobile' : 'aps-preroll';

      var _slotNameOverride = getURLParam('slotname');

      if (_slotNameOverride) {
        _slotName5 = _slotNameOverride;
        logger.log('Overriding Slot Name: ', _slotName5);
      }

      var _a9Config2 = {
        pubID: _pubId,
        adServer: 'googletag',
        videoAdServer: 'freeWheel',
        deals: true
      };

      if (!scriptIncluded) {
        scriptIncluded = true;

        (function (a9, a, p, s, t, A, g) {
          if (a[a9]) return;

          function q(c, r) {
            a[a9]._Q.push([c, r]);
          }

          a[a9] = {
            init: function init() {
              q('i', arguments);
            },
            fetchBids: function fetchBids() {
              q('f', arguments);
            },
            _Q: []
          };
          A = p.createElement(s);
          A.async = !0;
          A.src = t;
          g = p.getElementsByTagName(s)[0];
          g.parentNode.insertBefore(A, g);
        })('apstag', window, document, 'script', '//c.amazon-adsystem.com/aax2/apstag.js');
      }

      if (!scriptInitialized) {
        scriptInitialized = true;
        logger.log('Initializing APSTAG Library...');
        window.apstag.init(_a9Config2);

        if (hasVideo()) {
          window.A9VideoAPI._preRollTargetingPromise = window.A9VideoAPI._targetingPromise = new Promise(function (resolve) {
            window.apstag.fetchBids({
              params: {
                si_section: 'video'
              },
              slots: [{
                slotID: _slotName5,
                slotName: _slotName5,
                mediaType: 'video'
              }],
              timeout: _bidTimeout
            }, resolve);
          });
        } else {
          logger.log('No video tag found. Not sending automatic pre-roll request.');
          window.A9VideoAPI._preRollTargetingPromise = window.A9VideoAPI._targetingPromise = new Promise(function (resolve) {
            return resolve();
          });
        }

        if (window.AdFuel && window.AdFuel.cmd) {
          // AdFuel loaded first
          window.AdFuel.cmd.push(registerModuleWithAdFuel);
        } else if (window.AdFuel) {
          registerModuleWithAdFuel();
        } else {
          // wait for AdFuel to load
          addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
        }
      }
    }
  };

  var validateConfiguration = function validateConfiguration(config) {
    var errors = [];

    if (config.ACCOUNT_IDS) {
      Object.keys(CONFIGURATION.ACCOUNT_IDS).forEach(function (location) {
        logger.log('Config Account ID for Location: ', {
          location: location,
          config: config.ACCOUNT_IDS
        });

        if (!config.ACCOUNT_IDS[location]) {
          errors.push("Missing Account ID for Location: ".concat(location));
        }
      });
    }

    if (config.TIMEOUTS) {
      Object.keys(CONFIGURATION.TIMEOUTS).forEach(function (platform) {
        logger.log('Config Timeout for Platform: ', {
          platform: platform,
          config: config.TIMEOUTS
        });

        if (!config.TIMEOUTS[platform]) {
          errors.push("Missing Timeout Platform: ".concat(platform));
        }

        Object.keys(CONFIGURATION.TIMEOUTS[platform]).forEach(function (type) {
          logger.log('Config Timeout for Platform and Type: ', {
            platform: platform,
            type: type,
            config: config.TIMEOUTS
          });

          if (!config.TIMEOUTS[platform][type]) {
            errors.push("Missing Timeout Platform [".concat(platform, "] Type: ").concat(type));
          }
        });
      });
    }

    if (config.SLOTNAMES) {
      Object.keys(CONFIGURATION.SLOTNAMES).forEach(function (type) {
        logger.log('Config Slotname for Type: ', {
          type: type,
          config: config.SLOTNAMES
        });

        if (typeof config.SLOTNAMES[type] === 'undefined') {
          errors.push("Missing Slot Name Type: ".concat(type));
        }
      });
    }

    var response = {
      status: errors.length === 0,
      errors: errors
    };

    if (response.status) {
      CONFIGURATION = mergeDeep(CONFIGURATION, config);
      response.config = CONFIGURATION;
    }

    return response;
  };

  var init = function init(config) {
    logger = getLogger(MODULE_NAME, MODULE_VERSION, 'a9', 'color: #58f53f; padding: 2px', config.A9.DEBUG);
    setIsIntl && setIsIntl();
    var initPromise = new Promise(function (resolve, reject) {
      var consentRegion = getUserConsentRegion();
      var consentStatus = getConsent();

      if (consentRegion === 'ccpa' && !consentStatus) {
        logger.log('Preventing Initialization due to CCPA Restrictions.');
        return;
      } // Per CSD-2486, A domestic visitor to CNNE should not cause A9 to fire.


      if (!isIntl() && isCNNE()) {
        logger.log('Disabling A9 due to domestic restriction on CNN Español.');
        blocked = true;
      }

      logger.log('Initializing Module...', config);
      var validation = validateConfiguration(config.A9);
      logger.log('Config Validation: ', validation);

      if (validation.status) {
        configureA9Library();
        resolve({
          config: config
        });
      } else {
        validation.errors.forEach(function (error) {
          logger.error(error);
        });
        reject(validation.errors);
      }
    });
    initPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    return initPromise;
  };

  if (window.AdFuelOptions) {
    if (window.AdFuelOptions.USER_CONSENT.ENABLED) {
      var callInit = function callInit() {
        setTimeout(function () {
          if (window.WM.UserConsent && window.WM.UserConsent.isReady()) {
            if (window.WM.UserConsent.getRegion() === 'ccpa') {
              init(window.AdFuelOptions);
            } else {
              if (initEventSet || window.WM.UserConsent.isOptanonLoaded()) {
                init(window.AdFuelOptions);
              } else {
                addEvent(window, 'optanonLoaded', callInit);
                initEventSet = true;
              }
            }
          }
        }, 100);
      };

      if (window.WM && window.WM.UserConsent && window.WM.UserConsent.isReady()) {
        callInit();
      } else {
        addEvent(window, 'userConsentReady', callInit);
      }
    } else {
      init(window.AdFuelOptions);
    }
  }

  var index = {
    getTargetingData: getTargetingData,
    getRefreshedTargetingData: getRefreshedTargetingData,
    getPreRollTargetingData: getPreRollTargetingData,
    getMidRollTargetingData: getMidRollTargetingData,
    getRefreshedPreRollTargetingData: getRefreshedPreRollTargetingData,
    getRefreshedMidRollTargetingData: getRefreshedMidRollTargetingData,
    preQueueCallback: preQueueCallback,
    preRefreshCallback: preRefreshCallback,
    registerModuleWithAdFuel: registerModuleWithAdFuel,
    init: init,
    __NAME__: MODULE_NAME,
    __VERSION__: MODULE_VERSION
  };
  return index;
}); ////////////////////////////////////////////
// CreativeReview for 2.0
////////////////////////////////////////////


(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof4(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.CEP = factory());
})(void 0, function () {
  'use strict';
  /* global XMLHttpRequest, Blob, FormData, FileReader */

  var MODULE_NAME = 'Creative Review Module';
  var MODULE_VERSION = 'v4.0.1';
  var getViewport = window.AdFuelUtils.getViewport;
  var getBrowser = window.AdFuelUtils.getBrowser;
  var IsMobile = window.AdFuelUtils.isMobile;
  var cdnRoot = window.AdFuelUtils.cdnRoot;
  var addEvent = window.AdFuelUtils.addEvent;
  var performance = window.AdFuelUtils.performance;
  var getLogger = window.AdFuelUtils.getLogger;
  var logger;
  var initEventSet = false;

  var checkHash = function checkHash() {
    if (window.location.hash.indexOf('doh') >= 0) {
      if (toolRendered) {
        _renderTool();
      }

      _renderTool();
    } else if (toolRendered) {
      _renderTool();
    }
  };

  var siteConfig = null;
  var deviceInfo = null;
  var locationInfo = null;

  var setDevice = function setDevice() {
    if (deviceInfo !== null) {
      return deviceInfo;
    }

    logger.time('Getting Device Information');
    var viewport = getViewport();
    deviceInfo = {
      availHeight: window.screen.availHeight,
      availLeft: window.screen.availLeft,
      availTop: window.screen.availTop,
      availWidth: window.screen.availWidth,
      colorDepth: window.screen.colorDepth,
      height: window.screen.height,
      orientation: {
        angle: window.screen.orientation ? window.screen.orientation.angle : 0,
        onchange: window.screen.orientation ? window.screen.orientation.onchange : null,
        type: window.screen.orientation ? window.screen.orientation.type : null
      },
      pixelDepth: window.screen.pixelDepth,
      width: window.screen.width,
      os: window.navigator.platform ? window.navigator.platform : 'Unknown',
      browser: getBrowser(),
      "class": 'Desktop',
      viewport: viewport.join('x')
    };

    if (IsMobile.amazon.device) {
      deviceInfo.os = 'Amazon';

      if (IsMobile.amazon.phone) {
        deviceInfo["class"] = 'Phone';
      }

      if (IsMobile.amazon.tablet) {
        deviceInfo["class"] = 'Tablet';
      }
    }

    if (IsMobile.android.device) {
      deviceInfo.os = 'Android';

      if (IsMobile.android.phone) {
        deviceInfo["class"] = 'Phone';
      }

      if (IsMobile.android.tablet) {
        deviceInfo["class"] = 'Tablet';
      }
    }

    if (IsMobile.apple.device) {
      deviceInfo.os = 'iOS';

      if (IsMobile.apple.ipod) {
        deviceInfo["class"] = 'iPod';
      }

      if (IsMobile.apple.phone) {
        deviceInfo["class"] = 'Phone';
      }

      if (IsMobile.apple.tablet) {
        deviceInfo["class"] = 'Tablet';
      }
    }

    if (IsMobile.windows.device) {
      deviceInfo.os = 'Windows';

      if (IsMobile.windows.phone) {
        deviceInfo["class"] = 'Phone';
      }

      if (IsMobile.windows.tablet) {
        deviceInfo["class"] = 'Tablet';
      }
    }

    if (IsMobile.other.blackberry) {
      deviceInfo.os = 'Blackberry';
      deviceInfo["class"] = 'Phone';
    }

    if (IsMobile.other.blackberry10) {
      deviceInfo.os = 'Blackberry10';
      deviceInfo["class"] = 'Phone';
    }

    if (IsMobile.other.chrome) {
      deviceInfo.os = 'Chrome';
      deviceInfo["class"] = 'Phone';
    }

    if (IsMobile.other.firefox) {
      deviceInfo.os = 'Firefox';
      deviceInfo["class"] = 'Phone';
    }

    if (IsMobile.other.opera) {
      deviceInfo.os = 'Opera';
      deviceInfo["class"] = 'Phone';
    }

    logger.timeEnd('Getting Device Information');
    return deviceInfo;
  };

  var setConfig = function setConfig(config) {
    logger.log('Setting Site Config: ', config);
    siteConfig = config;
  }; // var hostname = document.location.hostname;


  var fileUploadOK = window.File && window.FileReader && window.FileList && window.Blob;
  var toolRendered = false;
  var _appliedTargeting = [];
  var sites = ['', 'Adult Swim', 'Bleacher Report', 'Cartoon Network', 'CNN', 'CNN Arabic', 'CNN Espanol', 'CNN International', 'CNN Money', 'ELEAGUE', 'Great Big Story', 'HLN', 'NBA', 'NBA International', 'NCAA', 'PGA', 'Ryder Cup', 'TBS', 'TCM', 'Team Coco', 'TNT', 'TruTV'];
  var firstPanelElements = [{
    type: 'inputText',
    name: 'Name',
    value: '',
    label: 'Your Name',
    required: true
  }, {
    type: 'inputEmail',
    name: 'Email',
    value: '',
    label: 'Your Email',
    required: true
  }, {
    type: 'fileUpload',
    name: 'Screenshot',
    value: '',
    label: 'Upload Screenshot',
    required: false
  }];
  var secondPanelElements = [{
    type: 'listLabel',
    name: 'Reason',
    label: 'Issue Being Reported',
    required: false
  }, {
    type: 'list',
    name: 'Issue(s)',
    required: false,
    items: [{
      type: 'checkbox',
      name: 'Issue',
      value: 'block list violation',
      label: 'Ad violates block list',
      required: false
    }, {
      type: 'checkbox',
      name: 'Issue',
      value: 'video plays in display ad',
      label: 'Video plays in ad',
      required: false
    }, {
      type: 'checkbox',
      name: 'Issue',
      value: 'ad disrupts content',
      label: 'Ad disrupts content',
      required: false
    }, {
      type: 'checkbox',
      name: 'Issue',
      value: 'ad incorrectly sized',
      label: 'Ad incorrectly sized',
      required: false
    }, {
      type: 'checkbox',
      name: 'Issue',
      value: 'download initiated',
      label: 'Ad initiates download',
      required: false
    }, {
      type: 'checkbox',
      name: 'Issue',
      value: 'blank ad',
      label: 'Blank ad',
      required: false
    }, {
      type: 'checkbox',
      name: 'Issue',
      value: 'low quality',
      label: 'Low-quality ad',
      required: false
    }, {
      type: 'checkbox',
      name: 'Issue',
      value: 'audio auto-starts',
      label: 'Audio auto-starts',
      required: false
    }, {
      type: 'checkbox',
      name: 'Issue',
      value: 'broken ad',
      label: 'Broken ad',
      required: false
    }]
  }];
  var thirdPanelElements = [{
    type: 'select',
    name: 'Brand',
    label: 'Affected Brand',
    required: true,
    options: sites
  }, {
    type: 'textarea',
    name: 'Comments',
    label: 'Issue Description',
    required: true
  }];
  var head = document.getElementsByTagName('head')[0];
  var body = document.getElementsByTagName('body')[0];

  var checkbox = function checkbox(name, value, text) {
    var el = document.createElement('div');
    var cb = document.createElement('input');
    cb.type = 'checkbox';
    cb.name = name;
    cb.id = name + '_' + value;
    cb.style["float"] = 'left';
    cb.style['margin-right'] = '2px';
    cb.style.position = 'relative';
    cb.style.top = '3px';
    cb.value = value;
    var lab = document.createElement('div');
    lab.style.width = 'calc(100% - 18px)';
    lab.appendChild(document.createTextNode(text));
    el.appendChild(cb);
    el.appendChild(lab);
    return el;
  };

  var element = function element(name, text, className) {
    var el = document.createElement(name);
    el.innerHTML = text;
    el.className = className;
    return el;
  };

  var button = function button(item) {
    var el = document.createElement('button');
    el.onclick = item.action;
    el.id = item.name;
    el.appendChild(document.createTextNode(item.value));
    el.className = 'btn btn-sm btn-primary';
    return el;
  };

  var _renderTool = function _renderTool() {
    var container;
    var iconStylesheet;
    var toolContainer;
    var toolFiller;
    var toolStylesheet;

    if (!toolRendered) {
      // Load stylesheets and add elements to page.
      iconStylesheet = document.createElement('link');
      iconStylesheet.type = 'text/css';
      iconStylesheet.rel = 'stylesheet';
      iconStylesheet.href = '//fonts.googleapis.com/icon?family=Material+Icons';
      iconStylesheet.id = 'material-icons-font';
      toolStylesheet = document.createElement('link');
      toolStylesheet.rel = 'stylesheet';
      toolStylesheet.href = '//' + cdnRoot() + '/ads/adfuel/css/creativeReview-3.0.css'; // toolStylesheet.href = '/css/creativeReview-3.0.css';

      toolStylesheet.id = 'adfuel-creative-review-stylesheet';
      container = document.createElement('div');
      container.className = 'adfuel-creative-review-button-container adfuel-open-creative-review-button-container';
      var actionButton = document.createElement('a');
      actionButton.className = 'adfuel-creative-review-button';
      var buttonIcon = document.createElement('i');
      buttonIcon.className = 'adfuel-creative-review-button-icon material-icons';
      buttonIcon.innerHTML = 'view_module';
      buttonIcon.innerText = 'view_module';
      toolFiller = document.createElement('div');
      toolFiller.className = 'adfuel-creative-review-filler';
      toolContainer = document.createElement('div');
      toolContainer.className = 'adfuel-creative-review';
      actionButton.appendChild(buttonIcon);
      container.appendChild(actionButton);
      head.appendChild(iconStylesheet);
      head.appendChild(toolStylesheet);
      body.appendChild(container);
      body.appendChild(toolFiller);
      body.appendChild(toolContainer);

      if (locationInfo === null) {
        (function (callback) {
          var a = document;
          var b = a.createElement('script');
          var c = a.getElementsByTagName('script')[0];
          var d = /^(complete|loaded)$/;
          var e = false;
          var f = document.location.protocol === 'https:';
          b.type = 'text/javascript';
          b.async = true;
          b.src = (f ? 'https:' : 'http:') + '//www.geoplugin.net/javascript.gp';

          b.onload = b.onreadystatechange = function () {
            if (!e && !('readyState' in b && d.test(b.readyState))) {
              b.onload = b.onreadystatechange = null;
              e = true;
              callback();
            }
          };

          c.parentNode.insertBefore(b, c);
        })(function () {
          var geoCountry, geoCity, geoRegion, geoLat, geoLong;
          var valueSet = false;

          if (window.geoplugin_countryCode) {
            geoCountry = window.geoplugin_countryCode();
            valueSet = true;
          }

          if (window.geoplugin_city) {
            geoCity = window.geoplugin_city();
            valueSet = true;
          }

          if (window.geoplugin_region) {
            geoRegion = window.geoplugin_region();
            valueSet = true;
          }

          if (window.geoplugin_latitude) {
            geoLat = window.geoplugin_latitude();
            valueSet = true;
          }

          if (window.geoplugin_longitude) {
            geoLong = window.geoplugin_longitude();
            valueSet = true;
          }

          if (valueSet === true) {
            locationInfo = {
              city: geoCity,
              region: geoRegion,
              country: geoCountry,
              latitude: geoLat,
              longitude: geoLong
            };
          }
        });
      }

      _buildToolContainer(toolContainer);

      addEvent(actionButton, 'click', _openTool);
      toolRendered = true;
    } else {
      // Remove stylesheets and elements from page.
      iconStylesheet = document.getElementById('material-icons-font');
      toolStylesheet = document.getElementById('adfuel-creative-review-stylesheet');
      container = document.querySelector('div.adfuel-creative-review-button-container');
      toolFiller = document.querySelector('div.adfuel-creative-review-filler');
      toolContainer = document.querySelector('div.adfuel-creative-review');
      head.removeChild(iconStylesheet);
      head.removeChild(toolStylesheet);
      body.removeChild(container);
      body.removeChild(toolFiller);
      body.removeChild(toolContainer);
      toolRendered = false;
    }
  };

  var _buildToolContainer = function _buildToolContainer(container) {
    var closeContainer = document.createElement('div');
    closeContainer.className = 'adfuel-creative-review-button-container';
    closeContainer.id = 'adfuel-close-creative-review-button-container';
    var actionButton = document.createElement('a');
    actionButton.className = 'adfuel-creative-review-button-plain';
    actionButton.id = 'adfuel-close-creative-review-button';
    var buttonIcon = document.createElement('i');
    buttonIcon.className = 'adfuel-creative-review-button-icon material-icons';
    buttonIcon.innerHTML = buttonIcon.innerText = 'close';
    var consoleBanner = document.createElement('div');
    consoleBanner.id = 'adfuel-creative-review-banner';
    var consoleTabContainer = document.createElement('div');
    consoleTabContainer.className = 'adfuel-creative-review-tab-link-container';
    actionButton.appendChild(buttonIcon);
    closeContainer.appendChild(actionButton);
    addEvent(actionButton, 'click', _closeTool);
    consoleBanner.appendChild(closeContainer);
    var title = document.createElement('div');
    title.className = 'adfuel-creative-review-banner-title';
    var titleText = siteConfig.ADFUEL ? 'AdFuel Creative Review' : 'Adcelerator Creative Review';
    var titleContainer = document.createElement('div');
    titleContainer.appendChild(document.createTextNode(titleText));
    var subtitle = document.createElement('div');
    subtitle.className = 'adfuel-creative-review-banner-subtitle';
    subtitle.innerHTML = 'Report an issue on this page by submitting the form below.&nbsp;&nbsp;&nbsp;A copy will be sent to the email address provided.';
    titleContainer.appendChild(subtitle);
    title.appendChild(titleContainer);
    consoleBanner.appendChild(title);
    consoleBanner.appendChild(consoleTabContainer);
    container.appendChild(consoleBanner);
  };

  var _openTool = function _openTool() {
    var toolFiller = document.querySelector('div.adfuel-creative-review-filler');
    var toolContainer = document.querySelector('div.adfuel-creative-review');
    var openContainer = document.querySelector('div.adfuel-creative-review-button-container');
    var closeContainer = document.querySelector('div#adfuel-close-creative-review-button-container');
    openContainer.style.display = 'none';
    closeContainer.style.display = 'inline-block';
    toolFiller.style.display = 'block';
    toolContainer.style.display = 'inline-block';

    _buildToolContent(toolContainer);

    _showToolContent();
  };

  var _closeTool = function _closeTool() {
    logger.log('Closing Tool...');
    var openContainer = document.querySelector('div.adfuel-creative-review-button-container');
    var openButton = document.querySelector('body > div.adfuel-creative-review-button-container > a');
    var toolFiller = document.querySelector('div.adfuel-creative-review-filler');
    var toolContainer = document.querySelector('div.adfuel-creative-review');
    logger.log('Closing Tool...', toolFiller, toolContainer);
    toolFiller.style.display = 'none';
    toolContainer.style.display = 'none';

    if (openContainer && openButton) {
      openContainer.style.display = 'inline-block';
      openButton.style.display = 'inline-block';
      addEvent(openButton, 'click', _openTool);
      window.AdFuel.openTool = _openTool;
    }
  };

  var _showToolContent = function _showToolContent() {
    var panel = document.createElement('div');
    var container = document.getElementsByClassName('adfuel-creative-review')[0];
    panel.id = 'adfuel-creative-review-content';
    panel.className = 'adfuel-creative-review-content';
    panel.style.width = '100%';
    panel.style.padding = '0';
    panel.style.margin = '0';
    panel.style.height = '80%';
    panel.style.minHeight = '250px';
    panel.style.overflowY = 'auto';
    panel.style.display = 'block';
    container.appendChild(panel);
  };

  var _buildToolContent = function _buildToolContent(container) {
    if (!container) {
      container = document.getElementsByClassName('adfuel-creative-review')[0];
    }

    if (!container) {
      logger.log('Error: No AdFuel-Creative-Review container.');
      return false;
    }

    var panelContainer = document.createElement('div');
    panelContainer.id = 'adfuel-creative-review-content';
    panelContainer.className = 'adfuel-creative-review-content';

    _buildCreativeReviewForm(panelContainer);

    container.appendChild(panelContainer);
    var adXVendorData = {
      queryIds: {}
    };
    document.querySelectorAll('div[data-google-query-id]').forEach(function (node) {
      adXVendorData.queryIds[node.id] = node.dataset.googleQueryId;
    });
  };

  var setSubmitMessage = function setSubmitMessage(header, message) {
    // set the message
    var el = document.createElement('p');

    if (message !== '') {
      el.style.color = 'white';
      el.style.fontSize = '.95em';
      el.style.textAlign = 'center';
      el.innerHTML = message;
    }

    header.innerHTML = '';
    header.appendChild(el);
    header.style.display = 'block'; // clear the message after 5 sec.

    window.setTimeout(function () {
      header.innerHTML = '';
      header.style.display = 'none';
    }, 5000);
  };

  var setSuccessMessage = function setSuccessMessage(header, message) {
    // set the message
    var el = document.createElement('p');
    header.style.backgroundColor = 'green';

    if (message !== '') {
      el.style.color = 'white';
      el.style.fontSize = '.95em';
      el.style.textAlign = 'center';
      el.style.fontWeight = 'normal';
      el.style.fontFamily = 'Helvetica';
      el.innerHTML = message;
    }

    header.innerHTML = '';
    header.appendChild(el);
    header.style.display = 'block'; // clear the message after 5 sec.

    window.setTimeout(function () {
      header.innerHTML = '';
      header.style.display = 'none';
    }, 5000);
  };

  var validateEmail = function validateEmail(email) {
    var re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
  };

  var buildPanel = function buildPanel(panel, container, elements) {
    for (var i = 0; i < elements.length; i++) {
      var item = elements[i];
      var inputContainer = void 0;
      var inputLabel = void 0;
      var listContainer = void 0;
      var textareaContainer = void 0;
      var textareaLabel = void 0;
      var listLabel = void 0;
      var listEl = void 0;
      var selectContainer = void 0;
      var panelLabel = void 0;

      switch (item.type) {
        case 'textarea':
          textareaContainer = element('div', '', 'adfuel-creative-review-textarea-container');
          textareaLabel = element('div', (item.required === true ? "<span style='color: red;'>*</span> " : '') + item.label + ': ', 'adfuel-creative-review-form-label adfuel-creative-review-textarea-label');
          textareaContainer.appendChild(textareaLabel);
          textareaContainer.appendChild(item.element = document.createElement('textarea'));
          item.element.name = item.name || '';

          if (item.required === true) {
            item.element.attributes.required = 'required';
          }

          panel.appendChild(textareaContainer);
          break;

        case 'inputText':
          inputContainer = element('div', '', 'adfuel-creative-review-input-element-container');
          inputLabel = element('div', (item.required === true ? "<span style='color: red;'>*</span> " : '') + item.label + ': ', 'adfuel-creative-review-form-label adfuel-creative-review-input-label');
          inputContainer.appendChild(inputLabel);
          item.element = document.createElement('input');
          item.element.name = item.name || '';
          item.element.type = 'text';

          if (item.required === true) {
            item.element.setAttribute('required', 'required');
          }

          inputContainer.appendChild(item.element);
          panel.appendChild(inputContainer);
          break;

        case 'inputEmail':
          inputContainer = element('div', '', 'adfuel-creative-review-input-element-container');
          inputLabel = element('div', (item.required === true ? "<span style='color: red;'>*</span> " : '') + item.label + ': ', 'adfuel-creative-review-form-label adfuel-creative-review-input-label');
          inputContainer.appendChild(inputLabel);
          item.element = document.createElement('input');
          item.element.type = 'email';
          item.element.name = item.name || '';

          if (item.required === true) {
            item.element.setAttribute('required', 'required');
          }

          inputContainer.appendChild(item.element);
          panel.appendChild(inputContainer);
          break;

        case 'listLabel':
          listContainer = element('div', '', 'adfuel-creative-review-list-element-container');
          listLabel = element('div', (item.required === true ? "<span style='color: red;'>*</span> " : '') + item.label + ': ', 'adfuel-creative-review-form-label adfuel-creative-review-list-label');
          listContainer.appendChild(listLabel);
          panel.append(listContainer);
          break;

        case 'list':
          listContainer = panel.querySelector('#cr_panel_2 > div.adfuel-creative-review-list-element-container');
          listEl = element('div', '', 'adfuel-creative-review-checkbox-list');

          for (var x = 0; x < item.items.length; x++) {
            var listItem = item.items[x];
            var checkboxWrapper = checkbox(listItem.name, listItem.value, listItem.label);
            var checkboxEl = checkboxWrapper.firstChild;
            item.items[x].element = checkboxEl;
            listEl.appendChild(checkboxWrapper);
          }

          listContainer.appendChild(listEl);
          break;

        case 'select':
          selectContainer = element('div', '', 'adfuel-creative-review-select-container');
          panelLabel = element('div', (item.required === true ? "<span style='color: red;'>*</span> " : '') + item.label + ': ', 'adfuel-creative-review-form-label adfuel-creative-review-select-label');
          selectContainer.appendChild(panelLabel);
          item.element = document.createElement('select');
          item.element.name = item.name;

          for (var optionIndex = 0; optionIndex < item.options.length; optionIndex++) {
            var option = element('option', item.options[optionIndex]);
            option.value = item.options[optionIndex];
            item.element.appendChild(option);
          }

          selectContainer.appendChild(item.element);
          panel.appendChild(selectContainer);
          break;

        case 'button':
          panel.appendChild(button(item));
          break;

        case 'fileUpload':
          if (fileUploadOK) {
            inputContainer = element('div', '', 'adfuel-creative-review-input-element-container');
            inputLabel = element('div', item.label + ': ' + (item.required === true ? ' *' : ''), 'adfuel-creative-review-form-label adfuel-creative-review-file-label');
            inputContainer.appendChild(inputLabel);
            item.element = document.createElement('input');
            item.element.name = item.name || '';
            item.element.type = 'file';
            item.element.accept = 'image/*';
            inputContainer.appendChild(item.element);
            panel.appendChild(inputContainer);
          }

          break;

        default:
          break;
      }
    }

    logger.log('Appending Panel to Container: ', panel, container);
    container.appendChild(panel);
  };

  var _buildCreativeReviewForm = function _buildCreativeReviewForm(panel) {
    if (!panel) return;
    panel.innerHTML = '';
    panel.style.padding = '0';
    var header = document.createElement('div');
    header.className = 'adfuel-creative-review-panel';
    header.id = 'cr_panel_header';
    var validationText = document.createElement('p');
    validationText.className = 'adfuel-creative-review-panel-header-text';
    header.appendChild(validationText);
    panel.appendChild(header);
    var formElement = document.createElement('form');
    panel.appendChild(formElement);
    var panel1 = document.createElement('div');
    panel1.className = 'adfuel-creative-review-panel';
    panel1.id = 'cr_panel_1';
    buildPanel(panel1, formElement, firstPanelElements);
    var panel2 = document.createElement('div');
    panel2.className = 'adfuel-creative-review-panel';
    panel2.id = 'cr_panel_2';
    buildPanel(panel2, formElement, secondPanelElements);
    var panel3 = document.createElement('div');
    panel3.className = 'adfuel-creative-review-panel';
    panel3.id = 'cr_panel_3';
    buildPanel(panel3, formElement, thirdPanelElements);
    var footer = document.createElement('div');
    footer.className = 'adfuel-creative-review-panel';
    footer.id = 'cr_panel_footer';
    var submitContainer = document.createElement('div'); // submit confirmation alert box

    var confirmAlert = document.createElement('div');
    confirmAlert.className = 'cr-confirm-alert';
    confirmAlert.style.visibility = 'hidden';
    var confirmAlertText = document.createElement('div');
    confirmAlertText.className = 'cr-confirm-alert-text';
    var today = new Date();
    var dayOfWeek = today.getDay();
    var hour = today.getHours();
    var offHours = dayOfWeek === 0 || dayOfWeek === 6 || hour < 8 || hour > 17;
    var responseTime = offHours ? '2 hours outside of' : '1 hour during';
    confirmAlertText.innerHTML = 'Your report has been successfully submitted to Ad Operations. If you do not get a response within ' + responseTime + ' normal business hours (8am - 6pm Eastern), further contact information can be found in the confirmation email that has been sent to you.';
    confirmAlert.appendChild(confirmAlertText);
    confirmAlert.appendChild(document.createElement('br'));
    var confirmAlertBtn = document.createElement('button');
    confirmAlertBtn.className = 'btn btn-primary btn-sm';
    confirmAlertBtn.innerHTML = 'OK';

    confirmAlertBtn.onclick = function (e) {
      e.preventDefault();

      _closeTool();

      confirmAlert.style.visibility = 'hidden'; // clear all inputs

      formElement.reset();
    };

    confirmAlert.appendChild(confirmAlertBtn);
    panel.appendChild(confirmAlert);
    var submitButton = document.createElement('button');
    submitButton.type = 'submit';
    submitButton.className = 'btn btn-primary btn-sm cr-confirm-alert-btn';

    submitButton.onclick = function (e) {
      e.preventDefault(); // validate inputs

      if (formElement.elements.Name.value === '' || formElement.elements.Comments.value === '' || formElement.elements.Email.value === '' || formElement.elements.Brand.value === '') {
        setSubmitMessage(header, 'Please fill out all required fields.');
      } else if (!validateEmail(formElement.elements.Email.value)) {
        setSubmitMessage(header, 'Email address is not valid.');
      } else {
        submitCreativeReviewForm(formElement, function () {
          setSuccessMessage(header, 'Your report has been successfully submitted to Ad Operations.<hr />If you do not get a response within 2 hours outside of normal business hours (8am - 6pm Eastern), further contact information can be found in the confirmation email that has been sent to you.');
        });
      }
    };

    submitButton.innerHTML = 'SUBMIT';
    submitContainer.appendChild(submitButton);
    footer.appendChild(submitContainer);
    panel.appendChild(footer);
    panel.appendChild(confirmAlert);
  };

  var setRenderCompleteListener = function setRenderCompleteListener() {
    window.googletag = window.googletag || {};
    window.googletag.cmd = window.googletag.cmd || [];
    window.googletag.cmd.push(function () {
      window.googletag.pubads().addEventListener('slotRenderEnded', function (event) {
        try {
          var detail = {};

          if (event.slot) {
            detail.asset = event.slot;

            if (event.slot.getTargeting('pos')) {
              detail.pos = event.slot.getTargeting('pos');
            }
          }

          if (event.isEmpty) {
            detail.empty = true;
          } else {
            detail.empty = false;
          }

          if (event.size) {
            detail.renderedSize = event.size;
          }

          if (event.creativeId) {
            detail.creativeId = event.creativeId;
          }

          if (event.lineItemId) {
            detail.lineItemId = event.lineItemId;
          }

          if (event.serviceName) {
            detail.serviceName = event.serviceName;
          }

          if (event.slot && event.slot.getSlotElementId()) {
            detail.divId = event.slot.getSlotElementId();
          }

          var info = window.AdFuel.pageSlots[detail.divId] ? window.AdFuel.pageSlots[detail.divId].getResponseInformation() : {
            campaignId: null,
            advertiserId: null
          };
          detail.campaignId = info ? info.campaignId : null;
          detail.advertiserId = info ? info.advertiserId : null;
        } catch (ex) {
          console.warn('Warning: Error reading slotRenderEnded event', {
            message: ex
          });
        }
      });
    });
  };

  var _addTargetingForCreativeExtraction = function _addTargetingForCreativeExtraction(slots, callback) {
    for (var slotIndex = 1; slotIndex < slots.length; slotIndex++) {
      var slot = slots[slotIndex];

      if (_appliedTargeting.indexOf(slot.rktr_slot_id) < 0) {
        window.AdFuel.addSlotLevelTarget(slot.rktr_slot_id, 'elemId', slot.rktr_slot_id);

        _appliedTargeting.push(slot.rktr_slot_id);
      }
    }

    addEvent(document, 'SlotIdChange', function (e) {
      if (e.detail.newId !== e.detail.originalId) {
        if (_appliedTargeting.indexOf(e.detail.newId) < 0) {
          window.AdFuel.addSlotLevelTarget(e.detail.newId, 'elemId', e.detail.newId);

          _appliedTargeting.push(e.detail.newId);
        }
      }
    });
    callback();
  };

  var serialize = function serialize(form) {
    if (!form || form.nodeName !== 'FORM') {
      return;
    }

    var j;
    var q = [];
    var t = {};

    for (var i = form.elements.length - 1; i >= 0; i = i - 1) {
      if (form.elements[i].name === '') {
        continue;
      }

      switch (form.elements[i].nodeName) {
        case 'INPUT':
          switch (form.elements[i].type) {
            case 'email':
            case 'text':
            case 'hidden':
            case 'password':
            case 'button':
            case 'reset':
            case 'submit':
              q.push(form.elements[i].name + '=' + encodeURIComponent(form.elements[i].value));
              t[form.elements[i].name] = form.elements[i].value;
              break;

            case 'file':
              if (form.elements[i].files.length > 0) {
                q.push(form.elements[i].name + '=' + encodeURIComponent(form.elements[i].value));
                t[form.elements[i].name] = form.elements[i].files[0]; // FileList object

                t[form.elements[i].name + 'FileName'] = t[form.elements[i].name].name;
              }

              break;

            case 'checkbox':
              if (form.elements[i].checked) {
                q.push(form.elements[i].name + '=' + encodeURIComponent(form.elements[i].value)); // to support multiple checkboxes in a group, store the values as an array

                if (t[form.elements[i].name]) {
                  t[form.elements[i].name].push(form.elements[i].value);
                } else {
                  t[form.elements[i].name] = [form.elements[i].value];
                }
              }

              break;

            case 'radio':
              if (form.elements[i].checked) {
                q.push(form.elements[i].name + '=' + encodeURIComponent(form.elements[i].value));
                t[form.elements[i].name] = form.elements[i].value;
              }

              break;

            default:
              break;
          }

          break;

        case 'TEXTAREA':
          q.push(form.elements[i].name + '=' + encodeURIComponent(form.elements[i].value));
          t[form.elements[i].name] = form.elements[i].value;
          break;

        case 'SELECT':
          switch (form.elements[i].type) {
            case 'select-one':
              q.push(form.elements[i].name + '=' + encodeURIComponent(form.elements[i].value));
              t[form.elements[i].name] = form.elements[i].value;
              break;

            case 'select-multiple':
              for (j = form.elements[i].options.length - 1; j >= 0; j = j - 1) {
                if (form.elements[i].options[j].selected) {
                  q.push(form.elements[i].name + '=' + encodeURIComponent(form.elements[i].options[j].value));
                  t[form.elements[i].name] = form.elements[i].options[j].value;
                }
              }

              break;

            default:
              break;
          }

          break;

        case 'BUTTON':
          switch (form.elements[i].type) {
            case 'reset':
            case 'submit':
            case 'button':
              q.push(form.elements[i].name + '=' + encodeURIComponent(form.elements[i].value));
              t[form.elements[i].name] = form.elements[i].value;
              break;

            default:
              break;
          }

          break;

        default:
          break;
      }
    }

    return t;
  };

  var submitCreativeReviewForm = function submitCreativeReviewForm(form, callback) {
    var data = serialize(form);

    var processData = function processData() {
      // callback(true);
      var xhr = new XMLHttpRequest();

      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {
          var response = xhr.status === 200;
          callback(response);
        }
      };

      var formBlob = new Blob([JSON.stringify(data, null, 2)], {
        type: 'application/json'
      });
      var registryBlob = new Blob([JSON.stringify(window.AdFuel.registry, null, 2)], {
        type: 'application/json'
      });
      var browserData = {
        availHeight: window.screen.availHeight,
        availLeft: window.screen.availLeft,
        availTop: window.screen.availTop,
        availWidth: window.screen.availWidth,
        colorDepth: window.screen.colorDepth,
        height: window.screen.height,
        orientation: {
          angle: window.screen.orientation ? window.screen.orientation.angle : 0,
          onchange: window.screen.orientation ? window.screen.orientation.onchange : null,
          type: window.screen.orientation ? window.screen.orientation.type : ''
        },
        pixelDepth: window.screen.pixelDepth,
        width: window.screen.width
      };
      var slotData = JSON.parse(JSON.stringify(performance.slotDetails));
      var slotsBlob = new Blob([JSON.stringify(slotData, null, 2)], {
        type: 'application/json'
      });
      var cookiesBlob = new Blob([JSON.stringify(document.cookie, null, 2)], {
        type: 'application/json'
      });
      var browserBlob = new Blob([JSON.stringify(browserData, null, 2)], {
        type: 'application/json'
      });
      var requestBlob = new Blob([JSON.stringify(window.AdFuel.requestScriptText, null, 2)], {
        type: 'application/json'
      });
      var urlBlob = new Blob([JSON.stringify(window.location.href, null, 2)], {
        type: 'application/json'
      });
      var fdata = new FormData();
      fdata.append('formData', formBlob);
      fdata.append('registry', registryBlob);
      fdata.append('slots', slotsBlob);
      fdata.append('cookies', cookiesBlob);
      fdata.append('request', requestBlob);
      fdata.append('browser', browserBlob);
      fdata.append('url', urlBlob);
      var url = 'https://adfuel.turnerapps.com/api/v2/email';
      xhr.open('POST', url, true);
      xhr.send(fdata);
    };

    if (data.Screenshot) {
      // Only process image files.
      if (!data.Screenshot.type.match('image.*')) {
        processData();
      }

      var reader = new FileReader(); // Closure to capture the file information.

      reader.onload = function (data) {
        return function (e) {
          data.Screenshot = e.target.result;
          processData();
        };
      }(data); // Read in the image file as a data URL.


      reader.readAsDataURL(data.Screenshot);
    } else {
      processData();
    }
  };

  var parseMessage = function parseMessage(msg) {
    var data = {};

    if (msg.data && typeof msg.data.indexOf === 'function' && msg.data.indexOf('{') === 0 && msg.data.indexOf('googMsgType') < 0) {
      try {
        data = JSON.parse(msg.data);
      } catch (err) {
        return;
      }
    }

    if (data.divId) {
      if (Array.isArray(data.divId) && data.divId.length > 1) {
        data.divId = data.divId[0];
      }
    }
  };

  var addKeypressModule = function addKeypressModule() {
    var renderCreativeReviewConsole = function renderCreativeReviewConsole() {
      logger.log('Rendering Creative Review Console...');

      _renderTool();
    };

    var initializeKeypressListeners = function initializeKeypressListeners() {
      // d-o-h to open just Creative Review
      var defaults = {
        prevent_default: false,
        prevent_repeat: false,
        is_sequence: true,
        is_exclusive: true,
        is_solitary: true
      };
      var options = {
        keys: siteConfig.CREATIVE_REVIEW.HOTKEY || '^ d o h $',
        on_keydown: renderCreativeReviewConsole
      };
      logger.log('Initializing Keypress Listener...', {
        defaults: defaults,
        options: options
      });
      var feedbackListener = new window.keypress.Listener(window, defaults);
      feedbackListener.register_combo(options);
    };

    if (!window.keypress) {
      var a = document;
      var b = a.createElement('script');
      var c = a.getElementsByTagName('script')[0];
      var d = /^(complete|loaded)$/;
      var e = false;
      var f = window.location.protocol === 'https:';
      b.type = 'text/javascript';
      b.async = true;
      b.src = (f ? 'https:' : 'http:') + '//' + cdnRoot() + '/ads/adfuel/modules/keypress.js';

      b.onload = b.onreadystatechange = function () {
        if (!e && !('readyState' in b && d.test(b.readyState))) {
          b.onload = b.onreadystatechange = null;
          e = true;
          initializeKeypressListeners();
        }
      };

      c.parentNode.insertBefore(b, c);
    } else {
      initializeKeypressListeners();
    }
  };

  var registerModuleWithAdFuel = function registerModuleWithAdFuel(config) {
    logger.log('Registering Module with AdFuel...');
    window.AdFuel.registerModule(MODULE_NAME, {
      postQueueCallback: _addTargetingForCreativeExtraction
    }, MODULE_VERSION, config);
    setRenderCompleteListener();
  };

  var init = function init(config) {
    var initPromise = new Promise(function (resolve) {
      logger = getLogger(MODULE_NAME, MODULE_VERSION, 'adreview', 'color: #00e1e1; padding: 2px', config.CREATIVE_REVIEW.DEBUG);
      setConfig(config);
      setDevice();
      addEvent(window, 'message', parseMessage);
      addEvent(window, 'hashchange', checkHash);
      addKeypressModule();
      checkHash();
      addEvent(document, 'AdFuelCreated', function () {
        registerModuleWithAdFuel(config.CREATIVE_REVIEW);
      });
      resolve();
    });
    initPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
  };

  if (window.AdFuelOptions) {
    if (window.AdFuelOptions.USER_CONSENT.ENABLED) {
      var callInit = function callInit() {
        setTimeout(function () {
          if (window.WM.UserConsent && window.WM.UserConsent.isReady()) {
            if (window.WM.UserConsent.getRegion() === 'ccpa') {
              init(window.AdFuelOptions);
            } else {
              if (initEventSet || window.WM.UserConsent.isOptanonLoaded()) {
                init(window.AdFuelOptions);
              } else {
                addEvent(window, 'optanonLoaded', callInit);
                initEventSet = true;
              }
            }
          }
        }, 100);
      };

      if (window.WM && window.WM.UserConsent && window.WM.UserConsent.isReady()) {
        callInit();
      } else {
        addEvent(window, 'userConsentReady', callInit);
      }
    } else {
      init(window.AdFuelOptions);
    }
  }

  var index = {
    init: init,
    addTargetingForCreativeExtraction: _addTargetingForCreativeExtraction,
    buildSlot: function buildSlot() {
      var buildPromise = new Promise(function (resolve) {
        return resolve();
      });
      buildPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return buildPromise;
    },
    setTargeting: function setTargeting(asset) {
      var targetingPromise = new Promise(function (resolve) {
        _addTargetingForCreativeExtraction(asset, resolve);
      });
      targetingPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return targetingPromise;
    },
    runAuction: function runAuction() {
      var auctionPromise = new Promise(function (resolve) {
        return resolve();
      });
      auctionPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return auctionPromise;
    },
    __NAME__: MODULE_NAME,
    __VERSION__: MODULE_VERSION
  };
  return index;
}); ////////////////////////////////////////////
// GUID for 2.0
////////////////////////////////////////////


(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof4(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.GUID = factory());
})(void 0, function () {
  'use strict';
  /*
      GUID Module - Version 4.0.1
      @4.0.0: - Initialization Update for GDPR/CCPA
      @4.0.1: - OptanonLoaded timing fix
  */

  var MODULE_NAME = 'Turner GUID Module';
  var MODULE_VERSION = 'v4.0.1';
  var addEvent = window.AdFuelUtils.addEvent;
  var hasCookie = window.AdFuelUtils.hasCookie;
  var getLogger = window.AdFuelUtils.getLogger;
  var getUserConsentRegion = window.AdFuelUtils.getUserConsentRegion;
  var getConsent = window.AdFuelUtils.getConsent;
  var readCookie = window.AdFuelUtils.readCookie;
  var consentTags = ['data-store', 'ads-contextual', 'ads-person-prof', 'ads-person', 'content-person-prof', 'content-person', 'measure-ads', 'measure-content', 'measure-market', 'product-develop'];
  var tGetGuid;
  var logger;
  var enableGuid = true;
  var targetingSet = false;
  var initEventSet = false;
  var siteConfig;

  function setGUIDTargeting(asset) {
    var preDispatchPromise = new Promise(function (resolve) {
      var guid = window.turner_getGuid();

      if (!targetingSet) {
        logger.log('Setting GUID Targeting: ', guid);

        if (window.AdFuel) {
          window.AdFuel.addPageLevelTarget('guid', guid);
        } else {
          window.googletag.cmd.push(function () {
            window.googletag.pubads().setTargeting('guid', guid);
          });
        }

        logger.log('targetingSet set to true...');
        targetingSet = true;
      }

      resolve(guid);
    });
    preDispatchPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    return preDispatchPromise;
  }

  function gdprInit() {
    logger.log('Initializing Module...');

    if (window) {
      window.turner_getGuid = tGetGuid;
    }

    var gdprProcessCookie = function gdprProcessCookie() {
      function registerModuleWithAdFuel() {
        // todo: remove AdFuel.readCookie("ug") once everyone is on new ais.js
        window.AdFuel.registerModule(MODULE_NAME, {
          preDispatchCallback: setGUIDTargeting
        }, MODULE_VERSION, siteConfig.GUID);
        var guid = window.turner_getGuid();
        logger.log('setting guid targeting', {
          guid: guid
        });
      }

      if (window.AdFuel) {
        // AdFuel loaded first
        registerModuleWithAdFuel();
      } else {
        // wait for AdFuel to load
        addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
      }
    };

    if (hasCookie('ugs')) {
      gdprProcessCookie();
    } else {
      // execute script to set cookie
      var guidUrl = '//www.ugdturner.com/xd.sjs';
      var a = document;
      var b = a.createElement('script');
      var c = a.getElementsByTagName('script')[0];
      var d = /^(complete|loaded)$/;
      var e = false;
      b.type = 'text/javascript';
      b.async = true;
      b.src = guidUrl;

      b.onload = b.onreadystatechange = function () {
        if (!e && !('readyState' in b && d.test(b.readyState))) {
          b.onload = b.onreadystatechange = null;
          e = true;
          gdprProcessCookie();
        }
      };

      c.parentNode.insertBefore(b, c);
    }
  }

  function processCookie() {
    if (window) {
      window.turner_getGuid = tGetGuid;
    }

    function registerModuleWithAdFuel() {
      // todo: remove AdFuel.readCookie("ug") once everyone is on new ais.js
      window.AdFuel.registerModule(MODULE_NAME, {
        preDispatchCallback: setGUIDTargeting
      }, MODULE_VERSION, siteConfig.GUID);
    }

    if (window.AdFuel) {
      // AdFuel loaded first
      registerModuleWithAdFuel();
    } else {
      // wait for AdFuel to load
      addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
    }
  }

  function init() {
    logger.log('Initializing Module...');

    if (hasCookie('ugs')) {
      processCookie();
    } else {
      // execute script to set cookie
      var guidUrl = '//www.ugdturner.com/xd.sjs';
      var a = document;
      var b = a.createElement('script');
      var c = a.getElementsByTagName('script')[0];
      var d = /^(complete|loaded)$/;
      var e = false;
      b.type = 'text/javascript';
      b.async = true;
      b.src = guidUrl;

      b.onload = b.onreadystatechange = function () {
        if (!e && !('readyState' in b && d.test(b.readyState))) {
          b.onload = b.onreadystatechange = null;
          e = true;
          processCookie();
        }
      };

      c.parentNode.insertBefore(b, c);
    }
  }

  var initialize = function initialize(config) {
    var initPromise = new Promise(function (resolve) {
      logger = getLogger(MODULE_NAME, MODULE_VERSION, 'guid', 'color: #d2b000; padding: 2px', config.GUID.DEBUG);
      logger.log('Initializing GUID Module...');
      var consentRegion = getUserConsentRegion();
      var consentStatus = getConsent(consentTags);
      siteConfig = config;

      if (siteConfig.USER_CONSENT && siteConfig.USER_CONSENT.ENABLED) {
        logger.log('UserConsent Enabled...');

        if (consentRegion === 'gdpr' && !consentStatus) {
          logger.log('Disabling GUID due to User Consent restrictions.');
          enableGuid = false;
        }

        if (enableGuid) {
          // used by freewheel helper
          tGetGuid = function tGetGuid() {
            return readCookie('ug');
          };

          gdprInit();
        }
      } else {
        // used by freewheel helper
        tGetGuid = function tGetGuid() {
          return readCookie('ug');
        };

        init();
      }

      resolve();
    });
    initPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    return initPromise;
  };

  if (window.AdFuelOptions) {
    if (window.AdFuelOptions.USER_CONSENT.ENABLED) {
      var callInit = function callInit() {
        setTimeout(function () {
          if (window.WM.UserConsent && window.WM.UserConsent.isReady()) {
            if (window.WM.UserConsent.getRegion() === 'ccpa') {
              initialize(window.AdFuelOptions);
            } else {
              if (initEventSet || window.WM.UserConsent.isOptanonLoaded()) {
                initialize(window.AdFuelOptions);
              } else {
                addEvent(window, 'optanonLoaded', callInit);
                initEventSet = true;
              }
            }
          }
        }, 100);
      };

      if (window.WM && window.WM.UserConsent && window.WM.UserConsent.isReady()) {
        callInit();
      } else {
        addEvent(window, 'userConsentReady', callInit);
      }
    } else {
      initialize(window.AdFuelOptions);
    }
  }

  var index = {
    init: initialize,
    runAuction: function runAuction() {
      var auctionPromise = new Promise(function (resolve) {
        resolve();
      });
      auctionPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return auctionPromise;
    },
    buildSlot: function buildSlot() {
      var buildPromise = new Promise(function (resolve) {
        setGUIDTargeting();
        resolve();
      });
      buildPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return buildPromise;
    },
    setTargeting: function setTargeting() {
      var targetingPromise = new Promise(function (resolve) {
        resolve();
      });
      targetingPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return targetingPromise;
    },
    __NAME__: MODULE_NAME,
    __VERSION__: MODULE_VERSION
  };
  return index;
}); ////////////////////////////////////////////
// In View Refresh for 2.0
////////////////////////////////////////////


(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof4(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.InViewRefresh = factory());
})(void 0, function () {
  'use strict';
  /*
      In-View Refresh Module - Version 4.0.2
      @4.0.0: - Initialization Update for GDPR/CCPA
      @4.0.1: - minor bug - slot.hasInViewRefresh properly set
      @4.0.2: - OptanonLoaded timing fix
  */

  var MODULE_NAME = 'In-View Refresh Module';
  var MODULE_VERSION = 'v4.0.2';
  var addEvent = window.AdFuelUtils.addEvent;
  var getLogger = window.AdFuelUtils.getLogger;
  var logger;
  var initEventSet = false;
  var _refreshableInViewSlots = {};
  var _focused = true;
  var TARGET_DISPLAY_MILLISECONDS;
  var TARGET_DISPLAY_PERCENT;
  var registeredSlots = [];
  var renderedCreativeIds = {};
  var renderedLineItemIds = {};
  var invalidSlotIds = [];
  var _viewabilityListenersStarted = false;

  var startViewabilityListeners = function startViewabilityListeners() {
    if (!_viewabilityListenersStarted) {
      window.googletag.cmd.push(function startViewabilityListeners() {
        window.googletag.pubads().addEventListener('impressionViewable', function impressionViewableFunc(event) {
          var detail = event;
          var divId = detail.slot.getSlotElementId();
          logger.log('Refreshable In View Slots: ', _refreshableInViewSlots);

          if (typeof _refreshableInViewSlots[divId] === 'undefined' || !_refreshableInViewSlots[divId].listenersSet) {
            logger.log('Refreshable In View Slot listeners have not been set: ', divId, {
              object: _refreshableInViewSlots[divId]
            });

            _createInViewRefreshObject(detail);
          } else {
            logger.log('Refreshable In View Slot listeners have already been set for: ', divId, {
              object: _refreshableInViewSlots[divId]
            });
          }
        });
        window.googletag.pubads().addEventListener('slotVisibilityChanged', function slotVisibilityChangedFunc(event) {
          var detail = event;

          _visibilityChanged(detail);
        });
        window.googletag.pubads().addEventListener('slotRenderEnded', function slotRenderEndedFunc(event) {
          var detail = event;
          var divId = detail.slot.getSlotElementId();
          var renderedSize = detail.size ? detail.size.join('x') : '0x0';
          var creativeId = event.creativeId || event.sourceAgnosticCreativeId;
          var lineItemId = event.lineItemId || event.sourceAgnosticLineItemId;
          var creativeIds = renderedCreativeIds[divId] || [];
          var lineItemIds = renderedLineItemIds[divId] || [];
          logger.log('----------Slot: [' + divId + ']----------');
          logger.log('Rendered Size: ', renderedSize);
          logger.log('Creative Ids: ', {
            selected: creativeId,
            "native": event.creativeId,
            agnostic: event.sourceAgnosticCreativeId
          });

          if (creativeIds.indexOf(creativeId) >= 0) {
            delete _refreshableInViewSlots[divId];
            registeredSlots.splice(registeredSlots.indexOf(divId), 1);
            invalidSlotIds.push(divId);
            logger.log('Duplicate Creative [' + creativeId + '] returned for slot [' + divId + '].  Stopping refresh.', registeredSlots);
          } else if (['970x66', '970x90', '970x250'].indexOf(renderedSize) >= 0) {
            delete _refreshableInViewSlots[divId];
            registeredSlots.splice(registeredSlots.indexOf(divId), 1);
            invalidSlotIds.push(divId);
            logger.log('Rendered size [' + renderedSize + '] for slot [' + divId + '] is invalid for IVR.  Stopping refresh.', registeredSlots);
          } else {
            if (creativeId && creativeIds.indexOf(creativeId) < 0) {
              creativeIds.push(creativeId);
            }

            if (lineItemId && lineItemIds.indexOf(lineItemId) < 0) {
              lineItemIds.push(lineItemId);
            }

            renderedCreativeIds[divId] = creativeIds;
            renderedLineItemIds[divId] = lineItemIds;
            logger.log('Rendered Creatives: ', renderedCreativeIds[divId]);
            logger.log('Rendered LineItems: ', renderedLineItemIds[divId]);
          }
        });
      });
      addEvent(document, 'visibilitychange', _visibilityChangeEvent);
      _viewabilityListenersStarted = true;
      logger.log('Listeners Started!');
    }
  };

  var _visibilityChangeEvent = function _visibilityChangeEvent(event) {
    logger.log('Visibility Change Event: ', event);
    logger.log('Relaying to _focusChanged...');
    _focused = !document.hidden;

    _focusChanged();
  };

  var _focusChanged = function _focusChanged() {
    var hidden = document.hidden;

    if (hidden) {
      logger.log('Page is hidden.  Destroying all intervals...');
      destroyInterval();
    } else {
      logger.log('Page is not hidden. Checking Intervals...');
      Object.keys(_refreshableInViewSlots).forEach(function (slotIndex) {
        logger.log({
          index: slotIndex,
          slot: _refreshableInViewSlots[slotIndex]
        });
        var interval = getInterval(slotIndex);

        if (interval) {
          logger.log('Interval exists...', slotIndex); // destroyInterval(slotIndex);
        } else {
          logger.log('Creating Interval...', slotIndex);

          _detectInView();
        }
      });
    }
  };

  var _visibilityChanged = function _visibilityChanged(obj) {
    var percent = obj.inViewPercentage || 0;
    var elementId = obj.slot.getSlotElementId();
    var interval = getInterval(elementId);

    if (percent >= TARGET_DISPLAY_PERCENT) {
      logger.log('Element [' + elementId + '] Meets In-View Percentage Requirements', percent);

      if (_focused) {
        logger.log('... and page has focus');

        if (!interval) {
          logger.log('... interval does not exist. Creating Interval...');
          createInterval(elementId);
        }
      } else {
        logger.log('... but page does not have focus.  Not creating interval.');
      }
    } else {
      logger.log('Element [' + elementId + '] Does NOT Meet In-View Percentage Requirements', percent);

      if (interval) {
        logger.log('Found Interval for Element [' + elementId + ']... Destroying Interval.');
        destroyInterval(elementId);
      }
    }
  };

  var getInterval = function getInterval(elementId) {
    logger.log('Getting Interval for: ', elementId);
    return _refreshableInViewSlots[elementId] && _refreshableInViewSlots[elementId].timer === null ? false : _refreshableInViewSlots[elementId] ? _refreshableInViewSlots[elementId].timer : false;
  };

  var createInterval = function createInterval(elementId) {
    logger.log('Refreshable In-View Slots: ', _refreshableInViewSlots);

    if (_refreshableInViewSlots[elementId]) {
      var slot = _refreshableInViewSlots[elementId];
      slot.inViewRefreshCounter = _refreshableInViewSlots[elementId].inViewRefreshCounter || 0;
      logger.log('Creating Interval for: ', elementId);
      slot.timer = window.setInterval(function () {
        logger.log('Slot: ', slot);

        if (typeof slot !== 'undefined' && slot !== null) {
          if (slot.inViewRefreshCount > 0) {
            slot.el = slot.el || document.getElementById(elementId);
            var elId = slot.el.id;
            slot.inViewRefreshCount--;
            slot.inViewRefreshCounter++;

            if (slot.inViewRefreshCount >= 0) {
              var googleSlot = window.googletag.pubads().getSlots().filter(function (slot) {
                return slot.getSlotElementId() === elId;
              })[0];
              logger.log('GoogleSlot: ', googleSlot);
              logger.log('Slot [' + elId + '] is in view and is being refreshed.');
              logger.log('Starting Targeting Keys: ', googleSlot.getTargetingKeys());
              logger.log('Clearing targeting on slot [' + elId + ']...', slot);
              googleSlot.clearTargeting();
              logger.log('Cleared Targeting Keys: ', googleSlot.getTargetingKeys());
              logger.log('Setting rfv count targeting on slot [' + elId + ']: ', slot.inViewRefreshCounter);
              googleSlot.setTargeting('rfv', slot.inViewRefreshCounter);
              googleSlot.setTargeting('pos', elId.replace('ad_', ''));

              if (invalidSlotIds.indexOf(elId) < 0) {
                logger.log('Calling refresh On slot[' + elId + ']...', slot);
                window.AdFuel.refresh([elId]);
                logger.log('Slot [' + slot.el.id + '] is in view, was just refreshed, and still has ' + slot.inViewRefreshCount + ' refreshes remaining.');
              } else {
                logger.log('Slot [' + slot.el.id + '] is invalid for refresh.');
              }
            }
          } else {
            logger.log('Slot [' + elementId + '] is in view but has no refreshes remaining.', slot, slot.inViewRefreshCount);
          }
        } else {
          logger.log('Slot refresh prevented due to rendered size.');
        }
      }, TARGET_DISPLAY_MILLISECONDS);
      logger.log('Done.');
    }
  };

  var destroyInterval = function destroyInterval(elementId) {
    var slot;

    if (elementId) {
      logger.log('Destroying interval for: ', elementId);
      slot = _refreshableInViewSlots[elementId];
      window.clearInterval(slot.timer);
      slot.timer = null;
      slot.inView = false;
    } else {
      logger.log('Destroying All Intervals');
      Object.keys(_refreshableInViewSlots).forEach(function (slotIndex) {
        logger.log('Destroying interval for: ', slotIndex);
        slot = _refreshableInViewSlots[slotIndex];
        window.clearInterval(slot.timer);
        slot.timer = null;
        slot.inView = false;
      });
    }
  };

  var _createInViewRefreshObject = function _createInViewRefreshObject(event) {
    logger.log('Checking Element: ', {
      event: event
    });
    var divId = event.slot.getSlotElementId();
    var el = document.getElementById(divId);

    if (registeredSlots.indexOf(divId) !== -1 && _refreshableInViewSlots[divId]) {
      logger.log('Slot is registered with InView Refresh');
      _refreshableInViewSlots[divId].inView = false;
      _refreshableInViewSlots[divId].el = el; // _refreshableInViewSlots[divId].mouseover = _refreshableInViewSlots[divId].mouseover || addEvent(el, 'mouseover', _mouseoverFunction);
      // _refreshableInViewSlots[divId].mouseout = _refreshableInViewSlots[divId].mouseout || addEvent(el, 'mouseout', _mouseoutFunction);

      _refreshableInViewSlots[divId].refreshCount = 0;
      _refreshableInViewSlots[divId].listenersSet = true;
    } else {
      logger.log('Slot is NOT registered with InView Refresh');
    }
  };

  var _isInsideBounds = function _isInsideBounds(clientX1, clientX2, clientY1, clientY2, elX1, elX2, elY1, elY2) {
    var a = Math.max(clientY1, elY1); // 287

    var b = Math.min(clientY2, elY2); // 377

    var c = Math.max(clientX1, elX1); // 587.5

    var d = Math.min(clientX2, elX2); // 1315.5

    var viewableArea = 0;
    var aCheck = a >= clientY1 && a <= clientY2;
    var bCheck = b >= clientY1 && b <= clientY2;
    var cCheck = c >= clientX1 && c <= clientX2;
    var dCheck = d >= clientX1 && d <= clientX2;

    if (aCheck && bCheck && cCheck && dCheck) {
      viewableArea = (b - a) * (d - c);
    }

    var elArea = (elX2 - elX1) * (elY2 - elY1);
    var ratioArea = 0;

    if (elArea > 0) {
      ratioArea = viewableArea / elArea;
    }

    return ratioArea;
  };

  var _getPercentInView = function _getPercentInView(el) {
    var clientWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
    var clientHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
    var clientX1 = window.pageXOffset || document.body.scrollLeft || document.documentElement.scrollLeft;
    var clientY1 = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;
    clientWidth = parseInt(clientWidth, 10);
    clientHeight = parseInt(clientHeight, 10);
    clientX1 = parseInt(clientX1, 10);
    clientY1 = parseInt(clientY1, 10);
    var elWidth = parseInt(el.clientWidth);
    var elHeight = parseInt(el.clientHeight);
    var elXy = el.getBoundingClientRect();
    var elX1 = elXy.left + document.body.scrollLeft;
    var elY1 = elXy.top + document.body.scrollTop;
    var elX2 = elX1 + elWidth;
    var elY2 = elY1 + elHeight;
    var clientX2 = clientX1 + clientWidth;
    var clientY2 = clientY1 + clientHeight;

    var viewablePercent = _isInsideBounds(clientX1, clientX2, clientY1, clientY2, elX1, elX2, elY1, elY2);

    return viewablePercent * 100;
  };

  var _detectInView = function _detectInView() {
    logger.log('Detecting In View Slots.');

    if (_refreshableInViewSlots.length < 1) {
      logger.log('No registered slots have been rendered yet.');
    }

    Object.keys(_refreshableInViewSlots).forEach(function (divId) {
      var slot = _refreshableInViewSlots[divId];
      var el = slot.el || document.getElementById(divId);
      var viewTest = false;

      if (el) {
        viewTest = el && _focused && _getPercentInView(el) >= TARGET_DISPLAY_PERCENT && parseInt(_refreshableInViewSlots[divId].inViewRefreshCount) > 0;
      }

      var interval = getInterval(divId);

      if (viewTest && !interval) {
        createInterval(divId);
      }
    });
  };

  var preQueueCallbackForIVR = function preQueueCallbackForIVR(asset) {
    var preQueuePromise = new Promise(function (resolve) {
      var startListeners = false;
      logger.time('IVR Pre-Queue Process Start');

      for (var x = 0; x < asset.length; x++) {
        var slot = asset[x];
        slot.hasInViewRefresh = slot.hasInViewRefresh === 'true' || false;

        if (slot.hasInViewRefresh === true) {
          logger.log('Slot has In-View Refresh...');
          slot.inViewRefreshCounter = 0;
          startListeners = true;
          registeredSlots.push(slot.rktr_slot_id);
        }
      }

      if (startListeners) {
        logger.log('Starting IVR Listeners...');
        startViewabilityListeners();
      }

      logger.timeEnd('IVR Pre-Queue Process Start');
      resolve();
    });
    preQueuePromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    return preQueuePromise;
  };

  var preDispatchCallbackForIVR = function preDispatchCallbackForIVR(queue) {
    var preDispatchPromise = new Promise(function (resolve) {
      for (var qId = 0; qId < queue.length; qId++) {
        var rocketeerSlot = queue[qId];

        if (rocketeerSlot.hasInViewRefresh === true) {
          logger.log('Slot is configured for in view refresh.  Creating refresh object for slot [' + rocketeerSlot.rktr_slot_id + ']');
          _refreshableInViewSlots[rocketeerSlot.rktr_slot_id] = rocketeerSlot;
        } else {
          logger.log('Slot is not configured for in view refresh. [' + rocketeerSlot.rktr_slot_id + ']');
        }
      }

      resolve();
    });
    preDispatchPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    return preDispatchPromise;
  };

  var registerModuleWithAdFuel = function registerModuleWithAdFuel(config) {
    window.AdFuelUtils = window.AdFuelUtils || {};
    window.AdFuelUtils.startViewabilityListeners = startViewabilityListeners;
    window.AdFuel.registerModule('In View Refresh', {
      preQueueCallback: preQueueCallbackForIVR,
      preDispatchCallback: preDispatchCallbackForIVR
    }, MODULE_VERSION, config);
  };

  var init = function init(siteConfig) {
    logger = getLogger(MODULE_NAME, MODULE_VERSION, 'ivr', 'color: #00e1e1; padding: 2px', siteConfig.IVR.DEBUG);
    _focused = typeof document !== 'undefined' ? !document.hidden : false;
    TARGET_DISPLAY_MILLISECONDS = siteConfig.IVR.DEFAULT_DISPLAY_MILLISECONDS;
    TARGET_DISPLAY_PERCENT = siteConfig.IVR.DEFAULT_DISPLAY_PERCENT;

    if (window.AdFuel) {
      // AdFuel loaded first
      registerModuleWithAdFuel(siteConfig.IVR);
    } else {
      // wait for AdFuel to load
      addEvent(document, 'AdFuelCreated', function () {
        registerModuleWithAdFuel(siteConfig.IVR);
      });
    }
  };

  if (window.AdFuelOptions) {
    if (window.AdFuelOptions.USER_CONSENT.ENABLED) {
      var callInit = function callInit() {
        setTimeout(function () {
          if (window.WM.UserConsent && window.WM.UserConsent.isReady()) {
            if (window.WM.UserConsent.getRegion() === 'ccpa') {
              init(window.AdFuelOptions);
            } else {
              if (initEventSet || window.WM.UserConsent.isOptanonLoaded()) {
                init(window.AdFuelOptions);
              } else {
                addEvent(window, 'optanonLoaded', callInit);
                initEventSet = true;
              }
            }
          }
        }, 100);
      };

      if (window.WM && window.WM.UserConsent && window.WM.UserConsent.isReady()) {
        callInit();
      } else {
        addEvent(window, 'userConsentReady', callInit);
      }
    } else {
      init(window.AdFuelOptions);
    }
  }

  var index = {
    init: init,
    preQueueCallback: preQueueCallbackForIVR,
    preDispatchCallback: preDispatchCallbackForIVR,
    buildSlot: function buildSlot(slotData) {
      var buildPromise = new Promise(function (resolve) {
        preQueueCallbackForIVR(slotData);
      });
      buildPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return buildPromise;
    },
    runAuction: function runAuction() {
      var auctionPromise = new Promise(function (resolve) {
        resolve();
      });
      auctionPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return auctionPromise;
    },
    setTargeting: function setTargeting(slotData) {
      var targetingPromise = new Promise(function (resolve) {
        startViewabilityListeners();
        preDispatchCallbackForIVR(slotData);
      });
      targetingPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return targetingPromise;
    },
    startViewabilityListeners: startViewabilityListeners,
    __NAME__: MODULE_NAME,
    __VERSION__: MODULE_VERSION
  };
  return index;
}); ////////////////////////////////////////////
// Integral Ad Science for 2.0
////////////////////////////////////////////


(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof4(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.IAS = factory());
})(void 0, function () {
  'use strict';
  /*
      Integral Ad Science Module - Version 4.0.4
      @4.0.0: - Initialization Update for GDPR/CCPA
      @4.0.1: - Unresolving promise fix?
      @4.0.2: - Split request/targeting
      @4.0.3: - Updated video targeting response to include `custom` targeting
      @4.0.4: - OptanonLoaded timing fix
       ------------------------------------------------------
      GDPR Status: Blocked
      CCPA Status: Allowed
  */

  var MODULE_NAME = 'Integral Ad Science Module';
  var MODULE_VERSION = 'v4.0.4';
  var isIntl = window.AdFuelUtils.isIntl;
  var getLogger = window.AdFuelUtils.getLogger;
  var getUserConsentRegion = window.AdFuelUtils.getUserConsentRegion;
  var getConsent = window.AdFuelUtils.getConsent;
  var addEvent = window.AdFuelUtils.addEvent;
  var logger;
  var iasActive = false;
  var initEventSet = false;
  var DOMESTIC_PUB_ID = 0;
  var INTERNATIONAL_PUB_ID = 0;
  var registeredSlots = {}; // Added new variable to detect unique slots

  var getTargetingForVideo = function getTargetingForVideo() {
    var ssid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'cnn.com_politics_carousel_t1';
    var videoTargetingPromise = new Promise(function (resolve, reject) {
      logger.log('Getting Video targeting...');
      var videoSlot = {
        adSlotId: 'video1',
        size: [1, 1],
        type: 'video',
        adUnitPath: ssid || ''
      };

      window.__iasPET.queue.push({
        adSlots: [videoSlot],
        dataHandler: function dataHandler(targeting) {
          if (!targeting) {
            logger.warn('No IAS Targeting For Video');
            reject(new Error('No Targeting Returned'));
          }

          try {
            var parsedTargeting = JSON.parse(targeting);

            var response = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, parsedTargeting), parsedTargeting.brandSafety), parsedTargeting.slots.video1), parsedTargeting.custom);

            delete response.brandSafety;
            delete response.slots;
            delete response.custom;
            logger.log('IAS Video Targeting', response);
            resolve(response);
          } catch (err) {
            logger.error('Error Parsing IAS Targeting: ', err);
            reject(err);
          }
        }
      });
    });
    videoTargetingPromise.id = 'IAS Video Targeting Promise';
    return videoTargetingPromise;
  };

  var preQueueCallback = function preQueueCallback(asset) {
    window.AdFuelUtils.IASFallbackTimeout = window.AdFuelUtils.IASFallbackTimeout || [];
    var preQueuePromise = new Promise(function (resolve) {
      logger.log('Building slots for IAS...', asset);
      var adSlots = [];
      var queueId = '0';
      var promiseResolved = false;

      if (Array.isArray(asset) && asset.length > 0) {
        for (var x = 0; x < asset.length; x++) {
          if (!registeredSlots[asset[x].rktr_slot_id] && asset[x].rktr_slot_id !== 'page' && asset[x].sizes.length > 0) {
            registeredSlots[asset[x].rktr_slot_id] = true;
            queueId = asset[x].queue_id;
            logger.log('Pushing Slot: ', {
              adSlotId: asset[x].rktr_slot_id,
              size: asset[x].sizes.map(function (size) {
                return size[0] === 'fluid' ? [1, 1] : size;
              }),
              adUnitPath: '/8663477/' + asset[x].rktr_ad_id
            }, queueId);
            adSlots.push({
              adSlotId: asset[x].rktr_slot_id,
              size: asset[x].sizes.map(function (size) {
                return size[0] === 'fluid' ? [1, 1] : size;
              }),
              adUnitPath: '/8663477/' + asset[x].rktr_ad_id
            });
          }
        }
      } else {
        if (asset && asset.sizes && asset.sizes.length > 0) {
          queueId = asset.queue_id;
          adSlots.push({
            adSlotId: asset.rktr_slot_id,
            size: asset.sizes.map(function (size) {
              return size[0] === 'fluid' ? [1, 1] : size;
            }),
            adUnitPath: '/8663477/' + asset.rktr_ad_id
          });
        }
      }

      if (adSlots.length > 0) {
        window.AdFuelUtils.IASFallbackTimeout[queueId] = setTimeout(function () {
          if (!promiseResolved) {
            delete window.AdFuelUtils.IASFallbackTimeout[queueId];
            resolve({
              msg: 'Fallback timeout',
              queueId: queueId
            });
            promiseResolved = true;
          }
        }, window.AdFuelUtils.isMobile.any ? window.AdFuelOptions.ADFUEL.DEFAULT_MOBILE_TIMEOUT : window.AdFuelOptions.ADFUEL.DEFAULT_DESKTOP_TIMEOUT);

        window.__iasPET.queue.push({
          adSlots: adSlots,
          dataHandler: function dataHandler(targeting) {
            if (!targeting) {
              logger.warn('No IAS Targeting', queueId);

              if (!promiseResolved) {
                clearTimeout(window.AdFuelUtils.IASFallbackTimeout[queueId]);
                delete window.AdFuelUtils.IASFallbackTimeout[queueId];
                resolve({
                  msg: 'No IAS Targeting',
                  queueId: queueId
                });
                promiseResolved = true;
              }
            }

            var parsedTargeting = targeting;

            try {
              parsedTargeting = JSON.parse(targeting);
            } catch (err) {
              logger.error('Error Parsing IAS Targeting: ', err, queueId, targeting);
            }

            logger.log('Setting IAS Targeting...', parsedTargeting, queueId);

            window.__iasPET.setTargetingForGPT();

            if (!promiseResolved) {
              clearTimeout(window.AdFuelUtils.IASFallbackTimeout[queueId]);
              delete window.AdFuelUtils.IASFallbackTimeout[queueId];
              resolve(targeting, queueId);
              promiseResolved = true;
            }
          }
        });

        if (window.__iasPET.queue.length > 0 && typeof window.__iasPET.start === 'function') {
          logger.log('Manually starting IAS queue processes for queue: ', queueId);

          window.__iasPET.start();
        }
      } else {
        if (!promiseResolved) {
          resolve({
            msg: 'No Ad Slots',
            queueId: queueId
          });
          promiseResolved = true;
        }
      }
    });
    preQueuePromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    return preQueuePromise;
  };

  var registerModuleWithAdFuel = function registerModuleWithAdFuel(config) {
    if (iasActive) {
      window.AdFuelVideoAPI = window.AdFuelVideoAPI || {};
      window.AdFuelVideoAPI.IAS = window.IASVideoAPI = {
        getTargetingForVideo: getTargetingForVideo
      };
      logger.log('Registering module with AdFuel');
      window.AdFuel.registerModule(MODULE_NAME, {
        preQueueCallback: preQueueCallback,
        preRefreshCallback: preQueueCallback
      }, MODULE_VERSION, config.IAS);
    }
  };

  var addIASJavascript = function addIASJavascript(config) {
    logger.log('Adding IAS script to head...');
    var iasTag = document.createElement('script');
    iasTag.async = true;
    iasTag.src = '//cdn.adsafeprotected.com/iasPET.1.js';
    var targetNode = document.getElementsByTagName('head')[0];
    targetNode.insertBefore(iasTag, targetNode.firstChild);
    iasActive = true;
    var pubId = isIntl() ? config.IAS.ACCOUNT_IDS.INTL : config.IAS.ACCOUNT_IDS.DOM;
    logger.log('Pub Ids: ', DOMESTIC_PUB_ID, INTERNATIONAL_PUB_ID);
    logger.log('Setting iasPET.pubId: ', pubId);
    window.__iasPET.pubId = pubId; // Set IAS publisher ID before pushing to the queue
  };

  var init = function init(config) {
    var initPromise = new Promise(function (resolve) {
      logger = getLogger(MODULE_NAME, MODULE_VERSION, 'ias', 'color: #d2b000; padding: 2px', config.IAS.DEBUG);
      logger.log('Initializing Module...');
      window.__iasPET = window.__iasPET || {};
      window.__iasPET.queue = window.__iasPET.queue || [];
      var consentRegion = getUserConsentRegion();
      var consentStatus = getConsent();

      if (config.USER_CONSENT && config.USER_CONSENT.ENABLED) {
        if (consentRegion === 'gdpr' && !consentStatus) {
          logger.log('Disabling IAS due to GDPR restrictions.');
        } else {
          addIASJavascript(config);

          if (window.AdFuel && window.AdFuel.cmd) {
            // AdFuel loaded first
            window.AdFuel.cmd.push(registerModuleWithAdFuel);
          } else if (window.AdFuel) {
            registerModuleWithAdFuel(config);
          } else {
            addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
          }
        }
      } else {
        addIASJavascript(config);
        getTargetingForVideo();

        if (window.AdFuel && window.AdFuel.cmd) {
          // AdFuel loaded first
          window.AdFuel.cmd.push(registerModuleWithAdFuel);
        } else if (window.AdFuel) {
          registerModuleWithAdFuel(config);
        } else {
          addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
        }
      }

      resolve();
    });
    initPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    return initPromise;
  };

  if (window.AdFuelOptions) {
    if (window.AdFuelOptions.USER_CONSENT.ENABLED) {
      var callInit = function callInit() {
        setTimeout(function () {
          if (window.WM.UserConsent && window.WM.UserConsent.isReady()) {
            if (window.WM.UserConsent.getRegion() === 'ccpa') {
              init(window.AdFuelOptions);
            } else {
              if (initEventSet || window.WM.UserConsent.isOptanonLoaded()) {
                init(window.AdFuelOptions);
              } else {
                addEvent(window, 'optanonLoaded', callInit);
                initEventSet = true;
              }
            }
          }
        }, 100);
      };

      if (window.WM && window.WM.UserConsent && window.WM.UserConsent.isReady()) {
        callInit();
      } else {
        addEvent(window, 'userConsentReady', callInit);
      }
    } else {
      init(window.AdFuelOptions);
    }
  }

  var index = {
    init: init,
    getTargetingForVideo: getTargetingForVideo,
    preQueueCallback: preQueueCallback,
    buildSlot: function buildSlot(slotData) {
      var buildPromise = new Promise(function (resolve) {
        preQueueCallback(slotData);
      });
      buildPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return buildPromise;
    },
    runAuction: function runAuction() {
      var auctionPromise = new Promise(function (resolve) {
        resolve();
      });
      auctionPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return auctionPromise;
    },
    setTargeting: function setTargeting(slotData) {
      var targetingPromise = new Promise(function (resolve) {
        resolve();
      });
      targetingPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return targetingPromise;
    },
    __NAME__: MODULE_NAME,
    __VERSION__: MODULE_VERSION
  };
  return index;
}); ////////////////////////////////////////////
// Krux for 2.0
////////////////////////////////////////////


(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof4(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.Krux = factory());
})(void 0, function () {
  'use strict';

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
    return module = {
      exports: {}
    }, fn(module, module.exports), module.exports;
  }

  var isMobile = createCommonjsModule(function (module) {
    (function (global) {
      var apple_phone = /iPhone/i,
          apple_ipod = /iPod/i,
          apple_tablet = /iPad/i,
          android_phone = /\bAndroid(?:.+)Mobile\b/i,
          // Match 'Android' AND 'Mobile'
      android_tablet = /Android/i,
          amazon_phone = /\bAndroid(?:.+)SD4930UR\b/i,
          amazon_tablet = /\bAndroid(?:.+)(?:KF[A-Z]{2,4})\b/i,
          windows_phone = /Windows Phone/i,
          windows_tablet = /\bWindows(?:.+)ARM\b/i,
          // Match 'Windows' AND 'ARM'
      other_blackberry = /BlackBerry/i,
          other_blackberry_10 = /BB10/i,
          other_opera = /Opera Mini/i,
          other_chrome = /\b(CriOS|Chrome)(?:.+)Mobile/i,
          other_firefox = /Mobile(?:.+)Firefox\b/i; // Match 'Mobile' AND 'Firefox'

      function match(regex, userAgent) {
        return regex.test(userAgent);
      }

      function isMobile(userAgent) {
        var ua = userAgent || (typeof navigator !== 'undefined' ? navigator.userAgent : ''); // Facebook mobile app's integrated browser adds a bunch of strings that
        // match everything. Strip it out if it exists.

        var tmp = ua.split('[FBAN');

        if (typeof tmp[1] !== 'undefined') {
          ua = tmp[0];
        } // Twitter mobile app's integrated browser on iPad adds a "Twitter for
        // iPhone" string. Same probably happens on other tablet platforms.
        // This will confuse detection so strip it out if it exists.


        tmp = ua.split('Twitter');

        if (typeof tmp[1] !== 'undefined') {
          ua = tmp[0];
        }

        var result = {
          apple: {
            phone: match(apple_phone, ua) && !match(windows_phone, ua),
            ipod: match(apple_ipod, ua),
            tablet: !match(apple_phone, ua) && match(apple_tablet, ua) && !match(windows_phone, ua),
            device: (match(apple_phone, ua) || match(apple_ipod, ua) || match(apple_tablet, ua)) && !match(windows_phone, ua)
          },
          amazon: {
            phone: match(amazon_phone, ua),
            tablet: !match(amazon_phone, ua) && match(amazon_tablet, ua),
            device: match(amazon_phone, ua) || match(amazon_tablet, ua)
          },
          android: {
            phone: !match(windows_phone, ua) && match(amazon_phone, ua) || !match(windows_phone, ua) && match(android_phone, ua),
            tablet: !match(windows_phone, ua) && !match(amazon_phone, ua) && !match(android_phone, ua) && (match(amazon_tablet, ua) || match(android_tablet, ua)),
            device: !match(windows_phone, ua) && (match(amazon_phone, ua) || match(amazon_tablet, ua) || match(android_phone, ua) || match(android_tablet, ua)) || match(/\bokhttp\b/i, ua)
          },
          windows: {
            phone: match(windows_phone, ua),
            tablet: match(windows_tablet, ua),
            device: match(windows_phone, ua) || match(windows_tablet, ua)
          },
          other: {
            blackberry: match(other_blackberry, ua),
            blackberry10: match(other_blackberry_10, ua),
            opera: match(other_opera, ua),
            firefox: match(other_firefox, ua),
            chrome: match(other_chrome, ua),
            device: match(other_blackberry, ua) || match(other_blackberry_10, ua) || match(other_opera, ua) || match(other_firefox, ua) || match(other_chrome, ua)
          }
        };
        result.any = result.apple.device || result.android.device || result.windows.device || result.other.device, // excludes 'other' devices and ipods, targeting touchscreen phones
        result.phone = result.apple.phone || result.android.phone || result.windows.phone, result.tablet = result.apple.tablet || result.android.tablet || result.windows.tablet;
        return result;
      }

      if (module.exports && typeof window === 'undefined') {
        // Node.js
        module.exports = isMobile;
      } else if (module.exports && typeof window !== 'undefined') {
        // Browserify
        module.exports = isMobile();
        module.exports.isMobile = isMobile;
      } else {
        global.isMobile = isMobile();
      }
    })(commonjsGlobal);
  });
  var isMobile_1 = isMobile.isMobile;
  var semver = createCommonjsModule(function (module, exports) {
    exports = module.exports = SemVer;
    var debug;
    /* istanbul ignore next */

    if ((typeof process === "undefined" ? "undefined" : _typeof4(process)) === 'object' && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
      debug = function debug() {
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift('SEMVER');
        console.log.apply(console, args);
      };
    } else {
      debug = function debug() {};
    } // Note: this is the semver.org version of the spec that it implements
    // Not necessarily the package version of this code.


    exports.SEMVER_SPEC_VERSION = '2.0.0';
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
    /* istanbul ignore next */
    9007199254740991; // Max safe segment length for coercion.

    var MAX_SAFE_COMPONENT_LENGTH = 16; // The actual regexps go on exports.re

    var re = exports.re = [];
    var src = exports.src = [];
    var R = 0; // The following Regular Expressions can be used for tokenizing,
    // validating, and parsing SemVer version strings.
    // ## Numeric Identifier
    // A single `0`, or a non-zero digit followed by zero or more digits.

    var NUMERICIDENTIFIER = R++;
    src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
    var NUMERICIDENTIFIERLOOSE = R++;
    src[NUMERICIDENTIFIERLOOSE] = '[0-9]+'; // ## Non-numeric Identifier
    // Zero or more digits, followed by a letter or hyphen, and then zero or
    // more letters, digits, or hyphens.

    var NONNUMERICIDENTIFIER = R++;
    src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*'; // ## Main Version
    // Three dot-separated numeric identifiers.

    var MAINVERSION = R++;
    src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' + '(' + src[NUMERICIDENTIFIER] + ')\\.' + '(' + src[NUMERICIDENTIFIER] + ')';
    var MAINVERSIONLOOSE = R++;
    src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[NUMERICIDENTIFIERLOOSE] + ')'; // ## Pre-release Version Identifier
    // A numeric identifier, or a non-numeric identifier.

    var PRERELEASEIDENTIFIER = R++;
    src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] + '|' + src[NONNUMERICIDENTIFIER] + ')';
    var PRERELEASEIDENTIFIERLOOSE = R++;
    src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] + '|' + src[NONNUMERICIDENTIFIER] + ')'; // ## Pre-release Version
    // Hyphen, followed by one or more dot-separated pre-release version
    // identifiers.

    var PRERELEASE = R++;
    src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] + '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';
    var PRERELEASELOOSE = R++;
    src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] + '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))'; // ## Build Metadata Identifier
    // Any combination of digits, letters, or hyphens.

    var BUILDIDENTIFIER = R++;
    src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+'; // ## Build Metadata
    // Plus sign, followed by one or more period-separated build metadata
    // identifiers.

    var BUILD = R++;
    src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] + '(?:\\.' + src[BUILDIDENTIFIER] + ')*))'; // ## Full Version String
    // A main version, followed optionally by a pre-release version and
    // build metadata.
    // Note that the only major, minor, patch, and pre-release sections of
    // the version string are capturing groups.  The build metadata is not a
    // capturing group, because it should not ever be used in version
    // comparison.

    var FULL = R++;
    var FULLPLAIN = 'v?' + src[MAINVERSION] + src[PRERELEASE] + '?' + src[BUILD] + '?';
    src[FULL] = '^' + FULLPLAIN + '$'; // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
    // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
    // common in the npm registry.

    var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] + src[PRERELEASELOOSE] + '?' + src[BUILD] + '?';
    var LOOSE = R++;
    src[LOOSE] = '^' + LOOSEPLAIN + '$';
    var GTLT = R++;
    src[GTLT] = '((?:<|>)?=?)'; // Something like "2.*" or "1.2.x".
    // Note that "x.x" is a valid xRange identifer, meaning "any version"
    // Only the first item is strictly required.

    var XRANGEIDENTIFIERLOOSE = R++;
    src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
    var XRANGEIDENTIFIER = R++;
    src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';
    var XRANGEPLAIN = R++;
    src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' + '(?:' + src[PRERELEASE] + ')?' + src[BUILD] + '?' + ')?)?';
    var XRANGEPLAINLOOSE = R++;
    src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:' + src[PRERELEASELOOSE] + ')?' + src[BUILD] + '?' + ')?)?';
    var XRANGE = R++;
    src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
    var XRANGELOOSE = R++;
    src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$'; // Coercion.
    // Extract anything that could conceivably be a part of a valid semver

    var COERCE = R++;
    src[COERCE] = '(?:^|[^\\d])' + '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' + '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:$|[^\\d])'; // Tilde ranges.
    // Meaning is "reasonably at or greater than"

    var LONETILDE = R++;
    src[LONETILDE] = '(?:~>?)';
    var TILDETRIM = R++;
    src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
    re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
    var tildeTrimReplace = '$1~';
    var TILDE = R++;
    src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
    var TILDELOOSE = R++;
    src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$'; // Caret ranges.
    // Meaning is "at least and backwards compatible with"

    var LONECARET = R++;
    src[LONECARET] = '(?:\\^)';
    var CARETTRIM = R++;
    src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
    re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
    var caretTrimReplace = '$1^';
    var CARET = R++;
    src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
    var CARETLOOSE = R++;
    src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$'; // A simple gt/lt/eq thing, or just "" to indicate "any version"

    var COMPARATORLOOSE = R++;
    src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
    var COMPARATOR = R++;
    src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$'; // An expression to strip any whitespace between the gtlt and the thing
    // it modifies, so that `> 1.2.3` ==> `>1.2.3`

    var COMPARATORTRIM = R++;
    src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] + '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')'; // this one has to use the /g flag

    re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
    var comparatorTrimReplace = '$1$2$3'; // Something like `1.2.3 - 1.2.4`
    // Note that these all use the loose form, because they'll be
    // checked against either the strict or loose comparator form
    // later.

    var HYPHENRANGE = R++;
    src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' + '\\s+-\\s+' + '(' + src[XRANGEPLAIN] + ')' + '\\s*$';
    var HYPHENRANGELOOSE = R++;
    src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' + '\\s+-\\s+' + '(' + src[XRANGEPLAINLOOSE] + ')' + '\\s*$'; // Star ranges basically just allow anything at all.

    var STAR = R++;
    src[STAR] = '(<|>)?=?\\s*\\*'; // Compile to actual regexp objects.
    // All are flag-free, unless they were created above with a flag.

    for (var i = 0; i < R; i++) {
      debug(i, src[i]);

      if (!re[i]) {
        re[i] = new RegExp(src[i]);
      }
    }

    exports.parse = parse;

    function parse(version, options) {
      if (!options || _typeof4(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (version instanceof SemVer) {
        return version;
      }

      if (typeof version !== 'string') {
        return null;
      }

      if (version.length > MAX_LENGTH) {
        return null;
      }

      var r = options.loose ? re[LOOSE] : re[FULL];

      if (!r.test(version)) {
        return null;
      }

      try {
        return new SemVer(version, options);
      } catch (er) {
        return null;
      }
    }

    exports.valid = valid;

    function valid(version, options) {
      var v = parse(version, options);
      return v ? v.version : null;
    }

    exports.clean = clean;

    function clean(version, options) {
      var s = parse(version.trim().replace(/^[=v]+/, ''), options);
      return s ? s.version : null;
    }

    exports.SemVer = SemVer;

    function SemVer(version, options) {
      if (!options || _typeof4(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (version instanceof SemVer) {
        if (version.loose === options.loose) {
          return version;
        } else {
          version = version.version;
        }
      } else if (typeof version !== 'string') {
        throw new TypeError('Invalid Version: ' + version);
      }

      if (version.length > MAX_LENGTH) {
        throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters');
      }

      if (!(this instanceof SemVer)) {
        return new SemVer(version, options);
      }

      debug('SemVer', version, options);
      this.options = options;
      this.loose = !!options.loose;
      var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL]);

      if (!m) {
        throw new TypeError('Invalid Version: ' + version);
      }

      this.raw = version; // these are actually numbers

      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];

      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError('Invalid major version');
      }

      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError('Invalid minor version');
      }

      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError('Invalid patch version');
      } // numberify any prerelease numeric ids


      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split('.').map(function (id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id;

            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num;
            }
          }

          return id;
        });
      }

      this.build = m[5] ? m[5].split('.') : [];
      this.format();
    }

    SemVer.prototype.format = function () {
      this.version = this.major + '.' + this.minor + '.' + this.patch;

      if (this.prerelease.length) {
        this.version += '-' + this.prerelease.join('.');
      }

      return this.version;
    };

    SemVer.prototype.toString = function () {
      return this.version;
    };

    SemVer.prototype.compare = function (other) {
      debug('SemVer.compare', this.version, this.options, other);

      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }

      return this.compareMain(other) || this.comparePre(other);
    };

    SemVer.prototype.compareMain = function (other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }

      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    };

    SemVer.prototype.comparePre = function (other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      } // NOT having a prerelease is > having one


      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }

      var i = 0;

      do {
        var a = this.prerelease[i];
        var b = other.prerelease[i];
        debug('prerelease compare', i, a, b);

        if (a === undefined && b === undefined) {
          return 0;
        } else if (b === undefined) {
          return 1;
        } else if (a === undefined) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i);
    }; // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.


    SemVer.prototype.inc = function (release, identifier) {
      switch (release) {
        case 'premajor':
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc('pre', identifier);
          break;

        case 'preminor':
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc('pre', identifier);
          break;

        case 'prepatch':
          // If this is already a prerelease, it will bump to the next version
          // drop any prereleases that might already exist, since they are not
          // relevant at this point.
          this.prerelease.length = 0;
          this.inc('patch', identifier);
          this.inc('pre', identifier);
          break;
        // If the input is a non-prerelease version, this acts the same as
        // prepatch.

        case 'prerelease':
          if (this.prerelease.length === 0) {
            this.inc('patch', identifier);
          }

          this.inc('pre', identifier);
          break;

        case 'major':
          // If this is a pre-major version, bump up to the same major version.
          // Otherwise increment major.
          // 1.0.0-5 bumps to 1.0.0
          // 1.1.0 bumps to 2.0.0
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }

          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;

        case 'minor':
          // If this is a pre-minor version, bump up to the same minor version.
          // Otherwise increment minor.
          // 1.2.0-5 bumps to 1.2.0
          // 1.2.1 bumps to 1.3.0
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }

          this.patch = 0;
          this.prerelease = [];
          break;

        case 'patch':
          // If this is not a pre-release version, it will increment the patch.
          // If it is a pre-release it will bump up to the same patch version.
          // 1.2.0-5 patches to 1.2.0
          // 1.2.0 patches to 1.2.1
          if (this.prerelease.length === 0) {
            this.patch++;
          }

          this.prerelease = [];
          break;
        // This probably shouldn't be used publicly.
        // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.

        case 'pre':
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            var i = this.prerelease.length;

            while (--i >= 0) {
              if (typeof this.prerelease[i] === 'number') {
                this.prerelease[i]++;
                i = -2;
              }
            }

            if (i === -1) {
              // didn't increment anything
              this.prerelease.push(0);
            }
          }

          if (identifier) {
            // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
            // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
            if (this.prerelease[0] === identifier) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier, 0];
              }
            } else {
              this.prerelease = [identifier, 0];
            }
          }

          break;

        default:
          throw new Error('invalid increment argument: ' + release);
      }

      this.format();
      this.raw = this.version;
      return this;
    };

    exports.inc = inc;

    function inc(version, release, loose, identifier) {
      if (typeof loose === 'string') {
        identifier = loose;
        loose = undefined;
      }

      try {
        return new SemVer(version, loose).inc(release, identifier).version;
      } catch (er) {
        return null;
      }
    }

    exports.diff = diff;

    function diff(version1, version2) {
      if (eq(version1, version2)) {
        return null;
      } else {
        var v1 = parse(version1);
        var v2 = parse(version2);
        var prefix = '';

        if (v1.prerelease.length || v2.prerelease.length) {
          prefix = 'pre';
          var defaultResult = 'prerelease';
        }

        for (var key in v1) {
          if (key === 'major' || key === 'minor' || key === 'patch') {
            if (v1[key] !== v2[key]) {
              return prefix + key;
            }
          }
        }

        return defaultResult; // may be undefined
      }
    }

    exports.compareIdentifiers = compareIdentifiers;
    var numeric = /^[0-9]+$/;

    function compareIdentifiers(a, b) {
      var anum = numeric.test(a);
      var bnum = numeric.test(b);

      if (anum && bnum) {
        a = +a;
        b = +b;
      }

      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    }

    exports.rcompareIdentifiers = rcompareIdentifiers;

    function rcompareIdentifiers(a, b) {
      return compareIdentifiers(b, a);
    }

    exports.major = major;

    function major(a, loose) {
      return new SemVer(a, loose).major;
    }

    exports.minor = minor;

    function minor(a, loose) {
      return new SemVer(a, loose).minor;
    }

    exports.patch = patch;

    function patch(a, loose) {
      return new SemVer(a, loose).patch;
    }

    exports.compare = compare;

    function compare(a, b, loose) {
      return new SemVer(a, loose).compare(new SemVer(b, loose));
    }

    exports.compareLoose = compareLoose;

    function compareLoose(a, b) {
      return compare(a, b, true);
    }

    exports.rcompare = rcompare;

    function rcompare(a, b, loose) {
      return compare(b, a, loose);
    }

    exports.sort = sort;

    function sort(list, loose) {
      return list.sort(function (a, b) {
        return exports.compare(a, b, loose);
      });
    }

    exports.rsort = rsort;

    function rsort(list, loose) {
      return list.sort(function (a, b) {
        return exports.rcompare(a, b, loose);
      });
    }

    exports.gt = gt;

    function gt(a, b, loose) {
      return compare(a, b, loose) > 0;
    }

    exports.lt = lt;

    function lt(a, b, loose) {
      return compare(a, b, loose) < 0;
    }

    exports.eq = eq;

    function eq(a, b, loose) {
      return compare(a, b, loose) === 0;
    }

    exports.neq = neq;

    function neq(a, b, loose) {
      return compare(a, b, loose) !== 0;
    }

    exports.gte = gte;

    function gte(a, b, loose) {
      return compare(a, b, loose) >= 0;
    }

    exports.lte = lte;

    function lte(a, b, loose) {
      return compare(a, b, loose) <= 0;
    }

    exports.cmp = cmp;

    function cmp(a, op, b, loose) {
      switch (op) {
        case '===':
          if (_typeof4(a) === 'object') a = a.version;
          if (_typeof4(b) === 'object') b = b.version;
          return a === b;

        case '!==':
          if (_typeof4(a) === 'object') a = a.version;
          if (_typeof4(b) === 'object') b = b.version;
          return a !== b;

        case '':
        case '=':
        case '==':
          return eq(a, b, loose);

        case '!=':
          return neq(a, b, loose);

        case '>':
          return gt(a, b, loose);

        case '>=':
          return gte(a, b, loose);

        case '<':
          return lt(a, b, loose);

        case '<=':
          return lte(a, b, loose);

        default:
          throw new TypeError('Invalid operator: ' + op);
      }
    }

    exports.Comparator = Comparator;

    function Comparator(comp, options) {
      if (!options || _typeof4(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }

      if (!(this instanceof Comparator)) {
        return new Comparator(comp, options);
      }

      debug('comparator', comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);

      if (this.semver === ANY) {
        this.value = '';
      } else {
        this.value = this.operator + this.semver.version;
      }

      debug('comp', this);
    }

    var ANY = {};

    Comparator.prototype.parse = function (comp) {
      var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
      var m = comp.match(r);

      if (!m) {
        throw new TypeError('Invalid comparator: ' + comp);
      }

      this.operator = m[1];

      if (this.operator === '=') {
        this.operator = '';
      } // if it literally is just '>' or '' then allow anything.


      if (!m[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m[2], this.options.loose);
      }
    };

    Comparator.prototype.toString = function () {
      return this.value;
    };

    Comparator.prototype.test = function (version) {
      debug('Comparator.test', version, this.options.loose);

      if (this.semver === ANY) {
        return true;
      }

      if (typeof version === 'string') {
        version = new SemVer(version, this.options);
      }

      return cmp(version, this.operator, this.semver, this.options);
    };

    Comparator.prototype.intersects = function (comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError('a Comparator is required');
      }

      if (!options || _typeof4(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      var rangeTmp;

      if (this.operator === '') {
        rangeTmp = new Range(comp.value, options);
        return satisfies(this.value, rangeTmp, options);
      } else if (comp.operator === '') {
        rangeTmp = new Range(this.value, options);
        return satisfies(comp.semver, rangeTmp, options);
      }

      var sameDirectionIncreasing = (this.operator === '>=' || this.operator === '>') && (comp.operator === '>=' || comp.operator === '>');
      var sameDirectionDecreasing = (this.operator === '<=' || this.operator === '<') && (comp.operator === '<=' || comp.operator === '<');
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive = (this.operator === '>=' || this.operator === '<=') && (comp.operator === '>=' || comp.operator === '<=');
      var oppositeDirectionsLessThan = cmp(this.semver, '<', comp.semver, options) && (this.operator === '>=' || this.operator === '>') && (comp.operator === '<=' || comp.operator === '<');
      var oppositeDirectionsGreaterThan = cmp(this.semver, '>', comp.semver, options) && (this.operator === '<=' || this.operator === '<') && (comp.operator === '>=' || comp.operator === '>');
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    };

    exports.Range = Range;

    function Range(range, options) {
      if (!options || _typeof4(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (range instanceof Range) {
        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options);
        }
      }

      if (range instanceof Comparator) {
        return new Range(range.value, options);
      }

      if (!(this instanceof Range)) {
        return new Range(range, options);
      }

      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease; // First, split based on boolean or ||

      this.raw = range;
      this.set = range.split(/\s*\|\|\s*/).map(function (range) {
        return this.parseRange(range.trim());
      }, this).filter(function (c) {
        // throw out any that are not relevant for whatever reason
        return c.length;
      });

      if (!this.set.length) {
        throw new TypeError('Invalid SemVer Range: ' + range);
      }

      this.format();
    }

    Range.prototype.format = function () {
      this.range = this.set.map(function (comps) {
        return comps.join(' ').trim();
      }).join('||').trim();
      return this.range;
    };

    Range.prototype.toString = function () {
      return this.range;
    };

    Range.prototype.parseRange = function (range) {
      var loose = this.options.loose;
      range = range.trim(); // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`

      var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
      range = range.replace(hr, hyphenReplace);
      debug('hyphen replace', range); // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`

      range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
      debug('comparator trim', range, re[COMPARATORTRIM]); // `~ 1.2.3` => `~1.2.3`

      range = range.replace(re[TILDETRIM], tildeTrimReplace); // `^ 1.2.3` => `^1.2.3`

      range = range.replace(re[CARETTRIM], caretTrimReplace); // normalize spaces

      range = range.split(/\s+/).join(' '); // At this point, the range is completely trimmed and
      // ready to be split into comparators.

      var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
      var set = range.split(' ').map(function (comp) {
        return parseComparator(comp, this.options);
      }, this).join(' ').split(/\s+/);

      if (this.options.loose) {
        // in loose mode, throw out any that are not valid comparators
        set = set.filter(function (comp) {
          return !!comp.match(compRe);
        });
      }

      set = set.map(function (comp) {
        return new Comparator(comp, this.options);
      }, this);
      return set;
    };

    Range.prototype.intersects = function (range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError('a Range is required');
      }

      return this.set.some(function (thisComparators) {
        return thisComparators.every(function (thisComparator) {
          return range.set.some(function (rangeComparators) {
            return rangeComparators.every(function (rangeComparator) {
              return thisComparator.intersects(rangeComparator, options);
            });
          });
        });
      });
    }; // Mostly just for testing and legacy API reasons


    exports.toComparators = toComparators;

    function toComparators(range, options) {
      return new Range(range, options).set.map(function (comp) {
        return comp.map(function (c) {
          return c.value;
        }).join(' ').trim().split(' ');
      });
    } // comprised of xranges, tildes, stars, and gtlt's at this point.
    // already replaced the hyphen ranges
    // turn into a set of JUST comparators.


    function parseComparator(comp, options) {
      debug('comp', comp, options);
      comp = replaceCarets(comp, options);
      debug('caret', comp);
      comp = replaceTildes(comp, options);
      debug('tildes', comp);
      comp = replaceXRanges(comp, options);
      debug('xrange', comp);
      comp = replaceStars(comp, options);
      debug('stars', comp);
      return comp;
    }

    function isX(id) {
      return !id || id.toLowerCase() === 'x' || id === '*';
    } // ~, ~> --> * (any, kinda silly)
    // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
    // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
    // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
    // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
    // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0


    function replaceTildes(comp, options) {
      return comp.trim().split(/\s+/).map(function (comp) {
        return replaceTilde(comp, options);
      }).join(' ');
    }

    function replaceTilde(comp, options) {
      var r = options.loose ? re[TILDELOOSE] : re[TILDE];
      return comp.replace(r, function (_, M, m, p, pr) {
        debug('tilde', comp, _, M, m, p, pr);
        var ret;

        if (isX(M)) {
          ret = '';
        } else if (isX(m)) {
          ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
        } else if (isX(p)) {
          // ~1.2 == >=1.2.0 <1.3.0
          ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
        } else if (pr) {
          debug('replaceTilde pr', pr);
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
        } else {
          // ~1.2.3 == >=1.2.3 <1.3.0
          ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
        }

        debug('tilde return', ret);
        return ret;
      });
    } // ^ --> * (any, kinda silly)
    // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
    // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
    // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
    // ^1.2.3 --> >=1.2.3 <2.0.0
    // ^1.2.0 --> >=1.2.0 <2.0.0


    function replaceCarets(comp, options) {
      return comp.trim().split(/\s+/).map(function (comp) {
        return replaceCaret(comp, options);
      }).join(' ');
    }

    function replaceCaret(comp, options) {
      debug('caret', comp, options);
      var r = options.loose ? re[CARETLOOSE] : re[CARET];
      return comp.replace(r, function (_, M, m, p, pr) {
        debug('caret', comp, _, M, m, p, pr);
        var ret;

        if (isX(M)) {
          ret = '';
        } else if (isX(m)) {
          ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
        } else if (isX(p)) {
          if (M === '0') {
            ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
          } else {
            ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
          }
        } else if (pr) {
          debug('replaceCaret pr', pr);

          if (M === '0') {
            if (m === '0') {
              ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + m + '.' + (+p + 1);
            } else {
              ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
            }
          } else {
            ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + (+M + 1) + '.0.0';
          }
        } else {
          debug('no pr');

          if (M === '0') {
            if (m === '0') {
              ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + m + '.' + (+p + 1);
            } else {
              ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
            }
          } else {
            ret = '>=' + M + '.' + m + '.' + p + ' <' + (+M + 1) + '.0.0';
          }
        }

        debug('caret return', ret);
        return ret;
      });
    }

    function replaceXRanges(comp, options) {
      debug('replaceXRanges', comp, options);
      return comp.split(/\s+/).map(function (comp) {
        return replaceXRange(comp, options);
      }).join(' ');
    }

    function replaceXRange(comp, options) {
      comp = comp.trim();
      var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];
      return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
        debug('xRange', comp, ret, gtlt, M, m, p, pr);
        var xM = isX(M);
        var xm = xM || isX(m);
        var xp = xm || isX(p);
        var anyX = xp;

        if (gtlt === '=' && anyX) {
          gtlt = '';
        }

        if (xM) {
          if (gtlt === '>' || gtlt === '<') {
            // nothing is allowed
            ret = '<0.0.0';
          } else {
            // nothing is forbidden
            ret = '*';
          }
        } else if (gtlt && anyX) {
          // we know patch is an x, because we have any x at all.
          // replace X with 0
          if (xm) {
            m = 0;
          }

          p = 0;

          if (gtlt === '>') {
            // >1 => >=2.0.0
            // >1.2 => >=1.3.0
            // >1.2.3 => >= 1.2.4
            gtlt = '>=';

            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === '<=') {
            // <=0.7.x is actually <0.8.0, since any 0.7.x should
            // pass.  Similarly, <=7.x is actually <8.0.0, etc.
            gtlt = '<';

            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }

          ret = gtlt + M + '.' + m + '.' + p;
        } else if (xm) {
          ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
        } else if (xp) {
          ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
        }

        debug('xRange return', ret);
        return ret;
      });
    } // Because * is AND-ed with everything else in the comparator,
    // and '' means "any version", just remove the *s entirely.


    function replaceStars(comp, options) {
      debug('replaceStars', comp, options); // Looseness is ignored here.  star is always as loose as it gets!

      return comp.trim().replace(re[STAR], '');
    } // This function is passed to string.replace(re[HYPHENRANGE])
    // M, m, patch, prerelease, build
    // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
    // 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
    // 1.2 - 3.4 => >=1.2.0 <3.5.0


    function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = '';
      } else if (isX(fm)) {
        from = '>=' + fM + '.0.0';
      } else if (isX(fp)) {
        from = '>=' + fM + '.' + fm + '.0';
      } else {
        from = '>=' + from;
      }

      if (isX(tM)) {
        to = '';
      } else if (isX(tm)) {
        to = '<' + (+tM + 1) + '.0.0';
      } else if (isX(tp)) {
        to = '<' + tM + '.' + (+tm + 1) + '.0';
      } else if (tpr) {
        to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
      } else {
        to = '<=' + to;
      }

      return (from + ' ' + to).trim();
    } // if ANY of the sets match ALL of its comparators, then pass


    Range.prototype.test = function (version) {
      if (!version) {
        return false;
      }

      if (typeof version === 'string') {
        version = new SemVer(version, this.options);
      }

      for (var i = 0; i < this.set.length; i++) {
        if (testSet(this.set[i], version, this.options)) {
          return true;
        }
      }

      return false;
    };

    function testSet(set, version, options) {
      for (var i = 0; i < set.length; i++) {
        if (!set[i].test(version)) {
          return false;
        }
      }

      if (version.prerelease.length && !options.includePrerelease) {
        // Find the set of versions that are allowed to have prereleases
        // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
        // That should allow `1.2.3-pr.2` to pass.
        // However, `1.2.4-alpha.notready` should NOT be allowed,
        // even though it's within the range set by the comparators.
        for (i = 0; i < set.length; i++) {
          debug(set[i].semver);

          if (set[i].semver === ANY) {
            continue;
          }

          if (set[i].semver.prerelease.length > 0) {
            var allowed = set[i].semver;

            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
              return true;
            }
          }
        } // Version has a -pre, but it's not one of the ones we like.


        return false;
      }

      return true;
    }

    exports.satisfies = satisfies;

    function satisfies(version, range, options) {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }

      return range.test(version);
    }

    exports.maxSatisfying = maxSatisfying;

    function maxSatisfying(versions, range, options) {
      var max = null;
      var maxSV = null;

      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }

      versions.forEach(function (v) {
        if (rangeObj.test(v)) {
          // satisfies(v, range, options)
          if (!max || maxSV.compare(v) === -1) {
            // compare(max, v, true)
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    }

    exports.minSatisfying = minSatisfying;

    function minSatisfying(versions, range, options) {
      var min = null;
      var minSV = null;

      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }

      versions.forEach(function (v) {
        if (rangeObj.test(v)) {
          // satisfies(v, range, options)
          if (!min || minSV.compare(v) === 1) {
            // compare(min, v, true)
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    }

    exports.minVersion = minVersion;

    function minVersion(range, loose) {
      range = new Range(range, loose);
      var minver = new SemVer('0.0.0');

      if (range.test(minver)) {
        return minver;
      }

      minver = new SemVer('0.0.0-0');

      if (range.test(minver)) {
        return minver;
      }

      minver = null;

      for (var i = 0; i < range.set.length; ++i) {
        var comparators = range.set[i];
        comparators.forEach(function (comparator) {
          // Clone to avoid manipulating the comparator's semver object.
          var compver = new SemVer(comparator.semver.version);

          switch (comparator.operator) {
            case '>':
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }

              compver.raw = compver.format();

            /* fallthrough */

            case '':
            case '>=':
              if (!minver || gt(minver, compver)) {
                minver = compver;
              }

              break;

            case '<':
            case '<=':
              /* Ignore maximum versions */
              break;

            /* istanbul ignore next */

            default:
              throw new Error('Unexpected operation: ' + comparator.operator);
          }
        });
      }

      if (minver && range.test(minver)) {
        return minver;
      }

      return null;
    }

    exports.validRange = validRange;

    function validRange(range, options) {
      try {
        // Return '*' instead of '' so that truthiness works.
        // This will throw if it's invalid anyway
        return new Range(range, options).range || '*';
      } catch (er) {
        return null;
      }
    } // Determine if version is less than all the versions possible in the range


    exports.ltr = ltr;

    function ltr(version, range, options) {
      return outside(version, range, '<', options);
    } // Determine if version is greater than all the versions possible in the range.


    exports.gtr = gtr;

    function gtr(version, range, options) {
      return outside(version, range, '>', options);
    }

    exports.outside = outside;

    function outside(version, range, hilo, options) {
      version = new SemVer(version, options);
      range = new Range(range, options);
      var gtfn, ltefn, ltfn, comp, ecomp;

      switch (hilo) {
        case '>':
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = '>';
          ecomp = '>=';
          break;

        case '<':
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = '<';
          ecomp = '<=';
          break;

        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      } // If it satisifes the range it is not outside


      if (satisfies(version, range, options)) {
        return false;
      } // From now on, variable terms are as if we're in "gtr" mode.
      // but note that everything is flipped for the "ltr" function.


      for (var i = 0; i < range.set.length; ++i) {
        var comparators = range.set[i];
        var high = null;
        var low = null;
        comparators.forEach(function (comparator) {
          if (comparator.semver === ANY) {
            comparator = new Comparator('>=0.0.0');
          }

          high = high || comparator;
          low = low || comparator;

          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        }); // If the edge version comparator has a operator then our version
        // isn't outside it

        if (high.operator === comp || high.operator === ecomp) {
          return false;
        } // If the lowest version comparator has an operator and our version
        // is less than it then it isn't higher than the range


        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }

      return true;
    }

    exports.prerelease = prerelease;

    function prerelease(version, options) {
      var parsed = parse(version, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    }

    exports.intersects = intersects;

    function intersects(r1, r2, options) {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2);
    }

    exports.coerce = coerce;

    function coerce(version) {
      if (version instanceof SemVer) {
        return version;
      }

      if (typeof version !== 'string') {
        return null;
      }

      var match = version.match(re[COERCE]);

      if (match == null) {
        return null;
      }

      return parse(match[1] + '.' + (match[2] || '0') + '.' + (match[3] || '0'));
    }
  });
  var semver_1 = semver.SEMVER_SPEC_VERSION;
  var semver_2 = semver.re;
  var semver_3 = semver.src;
  var semver_4 = semver.parse;
  var semver_5 = semver.valid;
  var semver_6 = semver.clean;
  var semver_7 = semver.SemVer;
  var semver_8 = semver.inc;
  var semver_9 = semver.diff;
  var semver_10 = semver.compareIdentifiers;
  var semver_11 = semver.rcompareIdentifiers;
  var semver_12 = semver.major;
  var semver_13 = semver.minor;
  var semver_14 = semver.patch;
  var semver_15 = semver.compare;
  var semver_16 = semver.compareLoose;
  var semver_17 = semver.rcompare;
  var semver_18 = semver.sort;
  var semver_19 = semver.rsort;
  var semver_20 = semver.gt;
  var semver_21 = semver.lt;
  var semver_22 = semver.eq;
  var semver_23 = semver.neq;
  var semver_24 = semver.gte;
  var semver_25 = semver.lte;
  var semver_26 = semver.cmp;
  var semver_27 = semver.Comparator;
  var semver_28 = semver.Range;
  var semver_29 = semver.toComparators;
  var semver_30 = semver.satisfies;
  var semver_31 = semver.maxSatisfying;
  var semver_32 = semver.minSatisfying;
  var semver_33 = semver.minVersion;
  var semver_34 = semver.validRange;
  var semver_35 = semver.ltr;
  var semver_36 = semver.gtr;
  var semver_37 = semver.outside;
  var semver_38 = semver.prerelease;
  var semver_39 = semver.intersects;
  var semver_40 = semver.coerce;
  /* global fetch, localStorage */

  var MODULE_NAME = 'Ad Utilities';
  var MODULE_VERSION = 'v4.0.6';
  var objectProto = Object.prototype;
  var toString = objectProto.toString;

  var noop = function noop() {};

  var cdnRoot = function cdnRoot() {
    return typeof document !== 'undefined' && document.location !== 'undefined' && document.location.hostname !== 'undefined' && document.location.hostname !== '' ? document.location.hostname.indexOf('cnn.com') >= 0 ? 'cdn.cnn.com' : 'i.cdn.turner.com' : 'i.cdn.turner.com';
  };

  var isFunction = function isFunction(object) {
    return toString.call(object) === '[object Function]';
  };

  var getUMTOCookies = function getUMTOCookies() {
    var FreewheelNetwork = document.location.pathname.indexOf('/dev/') > 0 || document.location.pathname.indexOf('/qa/') > 0 ? '42448' : '48804';
    logger.log('getting UMTO cookies');
    return (readCookie('bea4') ? '_fw_vcid2=' + FreewheelNetwork + ':' + readCookie('bea4') : readCookie('bea4r') ? '_fw_vcid2=' + FreewheelNetwork + ':' + readCookie('bea4r') : '') + (readCookie('kxuser') ? '&krux_user=' + readCookie('kxuser') : '') + (readCookie('zwmc') ? '&zwmc=' + readCookie('zwmc') : '') + (readCookie('ifyr') ? '&ifyr=' + readCookie('ifyr') : '') + (readCookie('hkgc') ? '&hkgc=' + readCookie('hkgc') : '') + (readCookie('goiz') ? '&goiz=' + readCookie('goiz') : '');
  };

  var isObject = function isObject(object) {
    var type = _typeof4(object);

    return (type === 'function' || type === 'object') && !!object;
  };

  var getURLParam = function getURLParam(name) {
    if (typeof document === 'undefined') {
      return '';
    }

    var nameParam = name.replace(/[[]/, '\\[').replace(/[\]]/, '\\]');
    var regexS = '[\\?&]' + nameParam + '=([^&#]*)';
    var regex = new RegExp(regexS);

    if (document && document.location && document.location.search) {
      var results = regex.exec(document.location.search);

      if (results) {
        return results[1];
      }

      return '';
    }

    return '';
  };

  var hasCookie = function hasCookie(name) {
    if (typeof window === 'undefined') return false;

    if (document && document.cookie) {
      logger.log('found?', document.cookie.indexOf('; ' + name + '=') >= 0 || document.cookie.indexOf(name + '=') === 0);
      return document.cookie.indexOf('; ' + name + '=') >= 0 || document.cookie.indexOf(name + '=') === 0;
    }

    return false;
  };

  var getViewport = function getViewport() {
    var viewportWidth;
    var viewportHeight;

    if (typeof window !== 'undefined' && window && typeof window.innerWidth !== 'undefined') {
      viewportWidth = window.innerWidth;
      viewportHeight = window.innerHeight;
    } else if (typeof document !== 'undefined' && document && typeof document.documentElement !== 'undefined' && typeof document.documentElement.clientWidth !== 'undefined' && document.documentElement.clientWidth !== 0) {
      viewportWidth = document.documentElement.clientWidth;
      viewportHeight = document.documentElement.clientHeight;
    } else {
      viewportWidth = document.getElementsByTagName('body')[0].clientWidth;
      viewportHeight = document.getElementsByTagName('body')[0].clientHeight;
    }

    return [viewportWidth, viewportHeight];
  };

  var getBrowser = function getBrowser() {
    logger.time('Getting Browser Information');
    var ua = navigator.userAgent;
    var tem;
    var M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];

    if (/trident/i.test(M[1])) {
      tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
      return 'IE ' + (tem[1] || '');
    }

    if (M[1] === 'Chrome') {
      tem = ua.match(/\b(OPR|Edge)\/(\d+)/);

      if (tem !== null) {
        return tem.slice(1).join(' ').replace('OPR', 'Opera');
      }
    }

    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?']; // eslint-disable-next-line

    if ((tem = ua.match(/version\/(\d+)/i)) !== null) M.splice(1, 1, tem[1]);
    logger.timeEnd('Getting Browser Information');
    return M.join(' ');
  };

  var readCookie = function readCookie(name) {
    var readTheCookie = function readTheCookie(key) {
      if (typeof document === 'undefined' || !document.cookie) {
        // there is no cookie, so go no further
        return null;
      } // there is a cookie


      return document.cookie.match(RegExp(key + '=.*?;')) ? document.cookie.match(RegExp(key + '=.*?;'))[0].replace(RegExp(key + '=|;', 'g'), '') : null;
    };

    var lsSupport = false;
    var data = null; // Check for native support

    if (typeof localStorage !== 'undefined') {
      lsSupport = true;
    } // No value supplied, return value


    if (typeof value === 'undefined') {
      // Get value
      if (lsSupport) {
        // Native support
        data = localStorage.getItem(name);
      }

      if (!lsSupport || data === null) {
        // Use cookie
        data = readTheCookie(name);
      }
    }

    return data;
  };

  var emptyTarget = function emptyTarget(value) {
    return Array.isArray(value) ? [] : {};
  };

  var deepmerge = function deepmerge(target, source, optionsArgument) {
    var array = Array.isArray(source);
    var options = optionsArgument || {
      arrayMerge: combineMerge
    };
    var arrayMerge = options.arrayMerge || combineMerge;

    if (array) {
      return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument);
    } else {
      return mergeObject(target, source, optionsArgument);
    }
  };

  var combineMerge = function combineMerge(target, source, options) {
    var destination = target.slice();
    source.forEach(function (e, i) {
      if (typeof destination[i] === 'undefined') {
        var cloneRequested = clone !== false;
        var shouldClone = cloneRequested && isMergeableObject(e);
        destination[i] = shouldClone ? deepmerge(emptyTarget(e), e, options) : e;
      } else if (isMergeableObject(e)) {
        destination[i] = merge(target[i], e);
      } else if (target.indexOf(e) === -1) {
        destination.push(e);
      }
    });
    return destination;
  };

  var isMergeableObject = function isMergeableObject(val) {
    var nonNullObject = val && _typeof4(val) === 'object';
    return nonNullObject && Object.prototype.toString.call(val) !== '[object RegExp]' && Object.prototype.toString.call(val) !== '[object Date]';
  };

  var cloneIfNecessary = function cloneIfNecessary(value, optionsArgument) {
    var clone = optionsArgument && optionsArgument.clone === true;
    return clone && isMergeableObject(value) ? deepmerge(emptyTarget(value), value, optionsArgument) : value;
  };

  var mergeObject = function mergeObject(target, source, optionsArgument) {
    var destination = {};

    if (isMergeableObject(target)) {
      Object.keys(target).forEach(function (key) {
        destination[key] = cloneIfNecessary(target[key], optionsArgument);
      });
    }

    Object.keys(source).forEach(function (key) {
      if (!isMergeableObject(source[key]) || !target[key]) {
        destination[key] = cloneIfNecessary(source[key], optionsArgument);
      } else {
        destination[key] = deepmerge(target[key], source[key], optionsArgument);
      }
    });
    return destination;
  };

  deepmerge.all = function (array, optionsArgument) {
    if (!Array.isArray(array) || array.length < 2) {
      throw new Error('first argument should be an array with at least two elements');
    } // we are sure there are at least 2 values, so it is safe to have no initial value


    return array.reduce(function (prev, next) {
      return deepmerge(prev, next, optionsArgument);
    });
  };

  var mergeDeep = function mergeDeep(target, source) {
    return deepmerge(target, source);
  };

  var countryCode = readCookie('countryCode') || (readCookie('CG') ? readCookie('CG').substr(0, 2) : '');
  var appId = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwbGF0Zm9ybSI6IndlYiIsInByb2R1Y3QiOiJhZGZ1ZWwiLCJuZXR3b3JrIjoiY25uIiwiYXBwSWQiOiJjbm4tYWRmdWVsLXdlYi14bWQ2dTkifQ.N-lYZh_mvCV2gChDusNhd85B2BD7AiCIcNY2Gr5Rc6c';
  var locationServiceURL = 'https://geo.ngtv.io/locate?appId=' + appId;

  var getLocation = function getLocation() {
    return new Promise(function (resolve, reject) {
      fetch(locationServiceURL).then(function (resp) {
        resolve(resp.json());
      })["catch"](function (err) {
        reject(new Error("Could not get user location: ".concat(err)));
      });
    });
  };

  var selectedEdition = readCookie('SelectedEdition') ? readCookie('SelectedEdition') : 'www';
  var monetizedSizes = ['160x600', '300x250', '300x600', '320x50', '728x90', '970x90', '970x250'];
  var invalidMappings = ['_ns_', '_nfs_'];
  var invalidAdUnitSegments = [];
  var invalidAdUnits = ['CNN/health', 'CNN/health/healthgrades', 'CNN/health/leaf', 'CNN/health/list', 'CNN/health/photos', 'CNN/health/specials', 'CNN/health/video', 'CNN/student-news'];

  var getLogger = function getLogger(moduleName, moduleVersion, logKey, style, override) {
    var log = noop;
    var info = noop;
    var warn = noop;
    var time = noop;
    var timeEnd = noop;
    var group = noop;
    var groupEnd = noop;
    var error = noop;
    var inGroup = false;
    var tag;
    var styleFinal = style || '';
    var logKeyFinal = logKey || moduleName.toLowerCase();
    var debug = getURLParam('debug').split(',');
    var debugTest = isObject(console) && isFunction(console.log) && (debug[0] === 'true' || debug.indexOf(logKeyFinal.toLowerCase()) >= 0);
    if (override) debugTest = true;

    if (debugTest) {
      log = function log() {
        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }

        if (!inGroup) {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.log.apply(console, tag);
        } else {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.log.apply(console, tag);
        }
      };

      info = function info() {
        for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
          args[_key8] = arguments[_key8];
        }

        if (!inGroup) {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.info.apply(console, tag);
        } else {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.info.apply(console, tag);
        }
      };

      warn = function warn() {
        for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
          args[_key9] = arguments[_key9];
        }

        if (!inGroup) {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.warn.apply(console, tag);
        } else {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.warn.apply(console, tag);
        }
      };

      error = function error() {
        for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
          args[_key10] = arguments[_key10];
        }

        if (!inGroup) {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.error.apply(console, tag);
        } else {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.error.apply(console, tag);
        }
      };

      group = function group(groupName) {
        if (!inGroup) {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] - START', styleFinal, groupName];
          inGroup = true;
          console.log.apply(console, tag);
        }
      };

      groupEnd = function groupEnd(groupName) {
        tag = ['%c[' + moduleName + ' ' + moduleVersion + '] - END', styleFinal, groupName];
        inGroup = false;

        try {
          console.log.apply(console, tag);
        } catch (err) {// Do Nothing
        }
      };

      time = function time(timeTag) {
        var timeKey = '[' + moduleName + ' ' + moduleVersion + '] - ' + timeTag;
        group(timeTag);
        addMark(timeKey + '-Start');
        console.time(timeKey);
      };

      timeEnd = function timeEnd(timeTag) {
        var timeKey = '[' + moduleName + ' ' + moduleVersion + '] - ' + timeTag;
        addMark(timeKey + '-End');
        addMeasure(timeKey, timeKey + '-Start', timeKey + '-End');
        groupEnd(timeTag);
        console.timeEnd(timeKey);
      };
    }

    var logger = {
      log: log,
      info: info,
      warn: warn,
      error: error,
      time: time,
      timeEnd: timeEnd,
      group: group,
      groupEnd: groupEnd
    };
    return logger;
  };

  var hostname = '';

  var setHostAndPathNames = function setHostAndPathNames() {
    var parser = typeof document !== 'undefined' ? document.createElement('a') : {
      href: '',
      hostname: '',
      pathname: ''
    };
    parser.href = typeof document !== 'undefined' ? document.location.href : '';
    hostname = parser.hostname;
  };

  var logger = getLogger(MODULE_NAME, MODULE_VERSION, 'utils', 'color: coral; padding: 2px');

  var addEvent = function addEvent(element, event, fn) {
    if (element.addEventListener) {
      element.addEventListener(event, fn, true);
    } else if (element.attachEvent) {
      element.attachEvent('on' + event, fn);
    }
  };

  var bind = function bind(fn, context) {
    for (var _len11 = arguments.length, args = new Array(_len11 > 2 ? _len11 - 2 : 0), _key11 = 2; _key11 < _len11; _key11++) {
      args[_key11 - 2] = arguments[_key11];
    }

    if (!isFunction(fn)) {
      throw new TypeError('Bind must be called on a function');
    }

    return function bound() {
      return fn.apply(context, args.concat(Array.prototype.slice.call(arguments)));
    };
  };
  /* eslint-disable-next-line */


  var re = /(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()\[\]\.,;:\s@\"]+\.)+[^<>()\[\]\.,;:\s@\"]{2,})/i;

  var piiIsPresentInQueryString = function piiIsPresentInQueryString() {
    if (document.location.search) {
      var dirtyResults = document.location.search.search(re) + 1;
      var cleanResults;

      try {
        cleanResults = decodeURIComponent(document.location.search).search(re) + 1;
      } catch (err) {
        cleanResults = dirtyResults;
      }

      return dirtyResults === 1 || cleanResults === 1;
    }

    return false;
  };

  var piiIsPresentInHash = function piiIsPresentInHash() {
    if (document.location.hash) {
      var dirtyResults = document.location.hash.search(re) + 1;
      var cleanResults;

      try {
        cleanResults = decodeURIComponent(document.location.hash).search(re) + 1;
      } catch (err) {
        cleanResults = dirtyResults;
      }

      return dirtyResults || cleanResults;
    }

    return false;
  };

  var piiIsPresentInReferrer = function piiIsPresentInReferrer() {
    if (document.referrer) {
      var dirtyResults = document.referrer.search(re) + 1;
      var cleanResults;

      try {
        cleanResults = decodeURIComponent(document.location.referrer).search(re) + 1;
      } catch (err) {
        cleanResults = dirtyResults;
      }

      return dirtyResults || cleanResults;
    }

    return false;
  };

  var piiIsPresent = function piiIsPresent() {
    return piiIsPresentInQueryString() || piiIsPresentInHash() || piiIsPresentInReferrer();
  };

  var filterDFPRequest = function filterDFPRequest() {
    if (piiIsPresentInQueryString() || piiIsPresentInHash() || piiIsPresentInReferrer()) {
      if (typeof window !== 'undefined' && window.AdFuel) {
        logger.log('Filtering DFP Request due to PII in query string.');
        var AdFuelMethods = Object.getOwnPropertyNames(window.AdFuel);

        for (var x = 0; x < AdFuelMethods.length; x++) {
          window.AdFuel[AdFuelMethods[x]] = function filteredAdFuelMethod() {};
        }

        window.googletag = null;
      }

      return true;
    }

    return false;
  };

  var piiFilter = {
    qs: piiIsPresentInQueryString,
    hash: piiIsPresentInHash,
    ref: piiIsPresentInReferrer,
    isPIIPresent: piiIsPresent,
    filter: filterDFPRequest
  };
  var consentStatus = false;
  var consentChecked = false;
  var gdprApplies = false;

  var getFullConsentState = function getFullConsentState() {
    return window.WM.UserConsent.getConsentState();
  };

  var getConsentVersion = function getConsentVersion() {
    return window.WM.UserConsent.getConsentVersion();
  };

  var getConsentString = function getConsentString() {
    var consentString = '';

    if (hasCookie('eupubconsent')) {
      logger.log('Getting Consent Object from cookie...');
      consentString = readCookie('eupubconsent');
    } else {
      if (typeof window !== 'undefined' && window.__tcfapi && typeof window.__tcfapi === 'function') {
        logger.log('Getting Consent Object from __tcfapi...');

        window.__tcfapi('getTCData', 2, function (tcData, success) {
          if (success) {
            consentString = tcData.tcString;
            return tcData.tcString;
          } else {
            consentString = '';
            return '';
          }
        });
      } else if (typeof window !== 'undefined' && window.__cmp && typeof window.__cmp === 'function') {
        logger.log('Getting Consent Object from __cmp...');

        window.__cmp('getVendorConsents', null, function (result) {
          consentString = result.metadata;
        });
      }
    }

    logger.log('Returning consent string...', consentString);
    return consentString;
  };

  var getConsent = function getConsent() {
    var consentStates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['data-store', 'ads-contextual', 'ads-person-prof', 'ads-person', 'vendor'];
    if (consentChecked) return consentStatus;
    var consentVersion = '1.3.6';

    try {
      consentVersion = window.WM.UserConsent.getVersion();
    } catch (err) {
      logger.warn('Running Older UserConsent - Please Update!');
    }

    logger.log('UserConsent Version: ', consentVersion);
    consentStatus = window.WM ? window.WM.UserConsent.isReady() ? semver.satisfies(consentVersion, '>=2.0.0') ? window.WM.UserConsent.inUserConsentState(consentStates) : window.WM.UserConsent.inUserConsentState(['ads-general', 'ads-vendor']) : true : true;
    logger.log('Consent Granted: ', consentStatus);
    var region = getUserConsentRegion();

    if (region === 'ccpa' && getURLParam('renderStatic') !== '') {
      logger.log('Render Static: ', getURLParam('renderStatic'));
      logger.log('Using override for Static Ad Rendering...');
      consentStatus = false;
    } else {
      logger.log('Not overriding for static rendering...');
    }

    consentChecked = true;
    return consentStatus;
  };

  var getGDPRApplies = function getGDPRApplies() {
    return window.WM.UserConsent.isInGdprRegion();
  };

  var getCCPAApplies = function getCCPAApplies() {
    return window.WM.UserConsent.isInCcpaRegion();
  };

  var getUserConsentRegion = function getUserConsentRegion() {
    return window.WM ? window.WM.UserConsent.getRegion() : '';
  };

  var monetizedSlots = {};

  var isMonetized = function isMonetized(slot) {
    var rktrSlotId = slot.rktr_slot_id;
    logger.group('Checking Monetization for: ' + rktrSlotId);
    var rktrAdId = slot.rktr_ad_id;
    var responsive = slot.responsive;
    var sizes = slot.sizes;

    if (typeof monetizedSlots[rktrSlotId] !== 'undefined') {
      logger.log('Slot already monetized.', monetizedSlots[rktrSlotId]);
      logger.groupEnd('Checking Monetization for: ' + rktrSlotId);
      return monetizedSlots[rktrSlotId];
    }

    var slotId = rktrSlotId;

    if (slotId === 'page') {
      logger.log('Skipping Page-Level Object.');
      logger.groupEnd('Checking Monetization for: ' + rktrSlotId);
      monetizedSlots[slotId] = {
        isMonetized: false,
        filteredSizes: []
      };
      return {
        isMonetized: false,
        filteredSizes: []
      };
    }

    var monetized = true;
    var viewportChecked = false;
    var browser = getViewport();
    var responsiveSizes = [];
    var filteredSizes = [];
    invalidMappings.forEach(function forEachMap(invalidMapping) {
      if (slotId.indexOf(invalidMapping) > 0) {
        logger.log('Slot includes invalid mapping: ', invalidMapping);
        monetizedSlots[slotId] = false;
        monetized = false;
      }
    });
    invalidAdUnitSegments.forEach(function forEachSegment(invalidAdUnitSegment) {
      if (rktrAdId && rktrAdId.indexOf(invalidAdUnitSegment) >= 0) {
        logger.log('Slot contains an invalid Ad Unit segment: ', invalidAdUnitSegment);
        monetized = false;
      }
    });
    invalidAdUnits.forEach(function forEachAdUnit(invalidAdUnit) {
      if (rktrAdId === invalidAdUnit) {
        logger.log('Slot uses an invalid Ad Unit: ', invalidAdUnit);
        monetized = false;
      }
    });

    if (responsive && responsive.length > 0) {
      responsive.map(function (viewport) {
        if (!viewportChecked && parseInt(viewport[0][0], 10) < browser[0] && parseInt(viewport[0][1], 10) < browser[1]) {
          viewportChecked = true;
          logger.log('Checking Responsive Sizes: ', viewport, browser);
          responsiveSizes = viewport[1];

          if (viewport[1][0] === 'suppress' || responsiveSizes === 'suppress') {
            logger.log('Slot is suppressed: ', viewport[1][0], responsiveSizes);
            monetized = false;
          }
        }

        return viewport;
      });
    }

    filteredSizes = monetized && responsiveSizes.length > 0 ? responsiveSizes : sizes;

    if (monetized) {
      filteredSizes = filteredSizes.filter(function sizeFilter(size) {
        var retSize = size;

        if (retSize !== 'suppress') {
          retSize = retSize.join('x');
        }

        return monetizedSizes.indexOf(retSize) !== -1;
      });
    }

    if (filteredSizes.length === 0) {
      logger.log('Slot contains no monetized sizes.', filteredSizes);
      monetizedSlots[slotId] = false;
      monetized = false;
    }

    logger.log('Slot is Monetized: ', monetized);
    logger.groupEnd('Checking Monetization for: ' + rktrSlotId);
    monetizedSlots[slotId] = {
      isMonetized: monetized,
      filteredSizes: filteredSizes
    };
    return {
      isMonetized: monetized,
      filteredSizes: filteredSizes
    };
  };

  var hasOwn = function hasOwn(object, key) {
    return object !== null && Object.prototype.hasOwnProperty.call(object, key);
  };

  var once = function once(fn) {
    return function () {
      if (fn) {
        fn.apply(this, arguments); // eslint-disable-next-line

        fn = null;
      }
    };
  };

  var keyMap = function () {
    var map = {};

    var has = function has(id) {
      return id in map;
    };

    var addKey = function addKey(id, key) {
      if (!has(id)) {
        map[id] = [];
      }

      map[id].push(key);
    };

    var getKeys = function getKeys(id) {
      return has(id) ? Array.prototype.slice.call(map[id]) : [];
    };

    var clearKeys = function clearKeys(id) {
      if (has(id)) {
        map[id].length = 0;
        return true;
      }

      return false;
    };

    return {
      has: has,
      clearKeys: clearKeys,
      getKeys: getKeys,
      addKey: addKey
    };
  }();

  var roundFloat = function roundFloat(value, toNearest, fixed) {
    return (Math.ceil(value / toNearest) * toNearest).toFixed(fixed);
  };

  var generateCacheBuster = function generateCacheBuster() {
    // return_<9-digit-random-hex>
    var cb = '';

    for (var i = 0; i < 10; i++) {
      cb += Math.floor(Math.random() * 9).toString();
    }

    return cb;
  };

  var debounce = function debounce(func, wait, immediate) {
    var timeout;
    return function () {
      for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
        args[_key12] = arguments[_key12];
      }

      var context = this;

      var later = function later() {
        timeout = null;
        if (!immediate) func.apply(context, args);
      };

      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) func.apply(context, args);
    };
  };

  var clone = function clone(obj) {
    // Handle the 3 simple types, and null or undefined
    if (obj === null || _typeof4(obj) !== 'object') return obj; // Handle Date

    if (obj instanceof Date) {
      var copyDate = new Date();
      copyDate.setTime(obj.getTime());
      return copyDate;
    } // Handle Array


    if (obj instanceof Array) {
      var copyArray = [];

      for (var i = 0, len = obj.length; i < len; i++) {
        copyArray[i] = clone(obj[i]);
      }

      return copyArray;
    } // Handle Object


    if (obj instanceof Object) {
      var copyObject = {};
      Object.keys(obj).forEach(function (attr) {
        copyObject[attr] = clone(obj[attr]);
      });
      return copyObject;
    }

    throw new Error("Unable to copy obj! Its type isn't supported.");
  };

  var logsSent = false;
  var onCNNE = false;

  var isIntl = function isIntl() {
    var isIntl = false;
    setHostAndPathNames();

    if (getURLParam('isIntl') === 'true') {
      if (!logsSent) {
        logsSent = true;
        logger.log('Faking international site. Using International PubIds.');
      }

      isIntl = true;
    } else if (hostname.search(/^.*(edition|edition-m|arabic)\./) >= 0) {
      if (!logsSent) {
        logsSent = true;
        logger.log('Full international site. Using International PubIds.');
      }

      isIntl = true;
    } else if (countryCode === '' || countryCode === null) {
      if (hostname.search(/^.*(cnnespanol|cnne-test)\./) >= 0) {
        logger.log('Setting isCNNE to `true`');
        onCNNE = true;
        var locationMeta = document && document.querySelectorAll('meta#geo-location-data');

        if (locationMeta && locationMeta.length > 0) {
          if (['US', 'CA'].indexOf(locationMeta[0].dataset.geoCountryCode) >= 0) {
            isIntl = false;
          } else {
            isIntl = true;
          }
        } else {
          if (!logsSent) {
            logsSent = true;
            logger.log('No country code.');
          }
        }
      } else {
        if (!logsSent) {
          logsSent = true;
          logger.log('No country code.');
        }

        isIntl = false;
      }
    } else if (countryCode !== 'US' && countryCode !== 'CA') {
      if (hostname.search(/^.*(money|cnnespanol|cnne-test|\.cnn)\./) >= 0) {
        if (hostname.search(/^.*(money\.cnn)\./) < 0) {
          logger.log('Setting isCNNE to `true`');
          onCNNE = true;
        }

        if (!logsSent) {
          logsSent = true;
          logger.log('International country code. Using International PubIds.');
        }

        isIntl = true;
      } else {
        if (!logsSent) {
          logsSent = true;
          logger.log('International country code but domestic site.');
        }

        isIntl = true;
      }
    } else {
      if (hostname.search(/^.*(cnnespanol|cnne-test)\./) >= 0) {
        if (!logsSent) {
          logger.log('On CNN Espanol... looking for geo-location-data meta tag...');
          logger.log('Setting isCNNE to `true`');
          onCNNE = true;
        }

        locationMeta = document && document.querySelectorAll('meta#geo-location-data');

        if (locationMeta && locationMeta.length > 0) {
          countryCode = locationMeta[0].dataset.geoCountryCode.toUpperCase();

          if (!logsSent) {
            logger.log('Found geo-location-data meta tag with countryCode: ', countryCode);
          }

          if (['US', 'CA'].indexOf(countryCode) >= 0) {
            if (!logsSent) {
              logger.log('Domestic country code. Using Domestic PubIds.');
              logsSent = true;
            }

            isIntl = false;
          } else {
            if (!logsSent) {
              logger.log('International country code. Using International PubIds.');
              logsSent = true;
            }

            isIntl = true;
          }
        } else {
          if (!logsSent) {
            logsSent = true;
            logger.log('No country code. Domestic Site.');
            isIntl = false;
          }
        }
      } else {
        if (!logsSent) {
          logsSent = true;
          logger.log('Domestic site or country code.');
          isIntl = false;
        }
      }
    }

    return isIntl;
  };

  var isCNNE = function isCNNE() {
    isIntl();
    logger.log('Is User on CNN Español? ', onCNNE);
    return onCNNE;
  };

  var merge = function merge(source, mods) {
    var dest = {};
    Object.keys(source).forEach(function (attrname) {
      dest[attrname] = source[attrname];
    });
    Object.keys(mods).forEach(function (attrname) {
      dest[attrname] = mods[attrname];
    });
    return dest;
  };

  var getTrackPerformance = function getTrackPerformance() {
    return new Promise(function (resolve, reject) {
      if (typeof window !== 'undefined' && !window.CNN || !window.jQuery) {
        reject(new Error('trackPerformance not needed'));
      } else if (typeof window !== 'undefined' && window.CNN.Analytics && window.CNN.Analytics.segment && typeof window.CNN.Analytics.segment.trackPerformance === 'function') {
        resolve();
      } else if (typeof window !== 'undefined' && typeof window.jQuery.fn.onSegmentReady === 'function') {
        window.jQuery(document).onSegmentReady(function _handleSegmentReady() {
          resolve();
        });
      } else {
        reject(new Error('trackPerformance not available'));
      }
    });
  };

  var adfuelEntries = [];

  var queueEntry = function queueEntry(eventName) {
    var entries = typeof window !== 'undefined' ? window.performance.getEntriesByName('[ADFUEL] ' + eventName) : [];

    for (var i = 0; i < entries.length; i++) {
      adfuelEntries.push(entries[i]);
    }
  };

  var addMark = function addMark(name) {
    typeof window !== 'undefined' && window.performance.mark('[ADFUEL] ' + name);
  };

  var addMeasure = function addMeasure(name, start, end) {
    typeof window !== 'undefined' && window.performance.measure('[ADFUEL] ' + name, '[ADFUEL] ' + start, '[ADFUEL] ' + end);
  };

  var getMarks = function getMarks() {
    return typeof window !== 'undefined' ? window.performance.getEntriesByType('mark').filter(function (mark) {
      return mark.name.indexOf('[ADFUEL]');
    }) : [];
  };

  var getMeasures = function getMeasures() {
    return typeof window !== 'undefined' ? window.performance.getEntriesByType('measure').filter(function (mark) {
      return mark.name.indexOf('[ADFUEL]');
    }) : [];
  };

  if (typeof document !== 'undefined') {
    addEvent(document, 'AdFuelCreated', filterDFPRequest);
  }

  var hasUserConsent = typeof window !== 'undefined' && window.WM && window.WM.UserConsent || false;
  var performance = {
    adfuelEntries: adfuelEntries,
    getTrackPerformance: getTrackPerformance,
    mark: addMark,
    measure: addMeasure,
    marks: getMarks,
    measures: getMeasures,
    queueEntry: queueEntry,
    slotDetails: {}
  };

  var loadError = function loadError(oError) {
    throw new URIError("The script ".concat(oError.target.src, " didn't load correctly."));
  };

  var affixScriptToHead = function affixScriptToHead(url) {
    var async = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var onloadFunction = arguments.length > 2 ? arguments[2] : undefined;
    var onerrorFunction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : loadError;
    var newScript = document.createElement('script');
    newScript.async = async;
    newScript.onerror = onerrorFunction;

    if (onloadFunction) {
      newScript.onload = onloadFunction;
    }

    var targetNode = document.getElementsByTagName('head')[0];
    targetNode.insertBefore(newScript, targetNode.firstChild);
    newScript.src = url;
  };

  var hasVideo = function hasVideo() {
    var videoElement = document.getElementsByTagName('video');

    if (videoElement.length) {
      return true;
    } else {
      return false;
    }
  };

  var AdFuelUtils = {
    addEvent: addEvent,
    affixScriptToHead: affixScriptToHead,
    bind: bind,
    cdnRoot: cdnRoot,
    clone: clone,
    countryCode: countryCode,
    debounce: debounce,
    gdprApplies: gdprApplies,
    getFullConsentState: getFullConsentState,
    getConsentVersion: getConsentVersion,
    getConsentString: getConsentString,
    getConsent: getConsent,
    getGDPRApplies: getGDPRApplies,
    getCCPAApplies: getCCPAApplies,
    getUserConsentRegion: getUserConsentRegion,
    getLocation: getLocation,
    generateCacheBuster: generateCacheBuster,
    getBrowser: getBrowser,
    getLogger: getLogger,
    getUMTOCookies: getUMTOCookies,
    getURLParam: getURLParam,
    getViewport: getViewport,
    hasCookie: hasCookie,
    hasOwn: hasOwn,
    hasUserConsent: hasUserConsent,
    hasVideo: hasVideo,
    isCNNE: isCNNE,
    isFunction: isFunction,
    isIntl: isIntl,
    isMobile: isMobile,
    isMonetized: isMonetized,
    isObject: isObject,
    keyMap: keyMap,
    merge: merge,
    mergeDeep: mergeDeep,
    noop: noop,
    once: once,
    performance: performance,
    piiFilter: piiFilter,
    readCookie: readCookie,
    roundFloat: roundFloat,
    selectedEdition: selectedEdition,
    setHostAndPathNames: setHostAndPathNames,
    setIsIntl: isIntl,
    __VERSION__: MODULE_VERSION
  };
  window.AdFuelUtils = AdFuelUtils;
  var ZionMessageBus_1 = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });

    var ZionMessageBus =
    /** @class */
    function () {
      /**
       * This is private so nobody can use the constructor
       * @memberof ZionMessageBus
       */
      function ZionMessageBus() {
        this.watching = {};
      }
      /**
       * this creates a static global message bus
       * all implementers can use window.ZION_MESSAGE_BUS
       * or ZionMessageBus.getInstance()
       *
       * @static
       * @returns {ZionMessageBus}
       * @memberof ZionMessageBus
       */


      ZionMessageBus.getInstance = function () {
        if (!window.ZION_MESSAGE_BUS) {
          window.ZION_MESSAGE_BUS = new ZionMessageBus(); // TODO: remove this subscription this is for testing until the bridgeSDK is done
          // (window as any).ZION_MESSAGE_BUS
          //         .subscribe('id_found', (x: object) => {console.log(`IN Bus Subscribe: ${JSON.stringify(x)}`); });
        }

        return window.ZION_MESSAGE_BUS;
      };

      ZionMessageBus.prototype.addToMessageQueue = function (topic, payload) {
        // To handle messages with no subscribers, this topic needs a topicModel
        // before being able to set the messageCount below.
        if (!this.watching.hasOwnProperty(topic)) {
          this.watching[topic] = this.addTopicModel(topic, [function () {
            return undefined;
          }]);
        }

        var now = new Date();
        var messageModel = {
          message: payload,
          messageCount: ++this.watching[topic].messageCount,
          timestamp: now.getTime(),
          topic: topic
        };
        this.watching[topic].messageQueue.push(messageModel);
        return this.watching[topic].messageQueue;
      };

      ZionMessageBus.prototype.getMessageCallbacks = function (topic) {
        /* istanbul ignore else */
        // I don't think the else condition can ever occur
        if (this.watching.hasOwnProperty(topic) && this.watching[topic].callBacks.length) {
          return this.watching[topic].callBacks;
        } else {
          return [];
        }
      };

      ZionMessageBus.prototype.messageBroadcast = function (topic, payload) {
        if (this.watching.hasOwnProperty(topic)) {
          var callbacks = this.getMessageCallbacks(topic);
          var messageQueue = this.addToMessageQueue(topic, payload);

          for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {
            var callback = callbacks_1[_i];
            callback(messageQueue.slice());
          }
        } else {
          // If there are no subscribers yet, we will still keep track of event messages
          this.addToMessageQueue(topic, payload);
        }

        return this.watching; // returned for testing purposes
      };

      ZionMessageBus.prototype.addTopicModel = function (topic, callbacks) {
        return {
          callBacks: callbacks,
          messageCount: 0,
          messageQueue: [],
          topic: topic
        };
      };

      ZionMessageBus.prototype.subscribeSetup = function (topics, callback) {
        topics = this.makeIterable(topics);

        for (var _i = 0, topics_1 = topics; _i < topics_1.length; _i++) {
          var topic = topics_1[_i];

          if (!this.watching.hasOwnProperty(topic)) {
            this.watching[topic] = this.addTopicModel(topic, [callback]);
          } else {
            this.watching[topic].callBacks.push(callback);
          }
        }

        return this.watching; // returned for testing purposes
      };

      ZionMessageBus.prototype.makeIterable = function (data) {
        if (Array.isArray(data)) {
          return data;
        } else if (typeof data === 'string') {
          return [data];
        } else {
          return [];
        }
      };

      ZionMessageBus.prototype.subscribe = function (topics, callback) {
        return this.subscribeSetup(topics, callback);
      };

      ZionMessageBus.prototype.publish = function (topic, payload) {
        return this.messageBroadcast(topic, payload);
      };

      return ZionMessageBus;
    }();

    exports.ZionMessageBus = ZionMessageBus;
    exports["default"] = ZionMessageBus;
  });
  unwrapExports(ZionMessageBus_1);
  var ZionMessageBus_2 = ZionMessageBus_1.ZionMessageBus;
  /*
      Krux Module - Version 4.1.2
      @4.0.0: - Initialization Update for GDPR/CCPA
      @4.1.2: - OptanonLoaded timing fix
  	    ------------------------------------------------------
      GDPR Status: Blocked
      CCPA Status: Blocked
  */

  var MODULE_NAME$1 = 'Krux Module';
  var MODULE_VERSION$1 = 'v4.1.2';
  var consentTags = ['data-store', 'ads-person-prof', 'ads-person', 'measure-ads', 'measure-content', 'measure-market'];
  var logger$1;
  var enableKrux = true;
  var initEventSet = false;
  var zionBus;
  var processCookie;
  var setControlTag;
  var registerModuleWithAdFuel;
  var messageSent = false;
  var subscribersSet = false;
  var targetingSet = false;

  var retrieve = function retrieve(n) {
    var k = 'kx' + n;

    var ls = function () {
      try {
        return window.localStorage;
      } catch (e) {
        return null;
      }
    }();

    if (ls) {
      return ls[k] || '';
    } else if (navigator.cookieEnabled) {
      var m = document.cookie.match(k + '=([^;]*)');
      return m && unescape(m[1]) || '';
    } else {
      return '';
    }
  };

  var init = function init(config) {
    var initPromise = new Promise(function (resolve) {
      logger$1 = getLogger(MODULE_NAME$1, MODULE_VERSION$1, 'krux', 'color: #d2b000; padding: 2px', config.KRUX.DEBUG);
      logger$1.log('Initializing Module: ', config);
      var consentStatus = getConsent(consentTags);

      if (!consentStatus) {
        logger$1.log('Disabling Krux due to User Consent restrictions.');
        enableKrux = false;
      } else {
        logger$1.log('Consent given...');
      }

      if (enableKrux) {
        window.Krux || ((window.Krux = function () {
          window.Krux.q.push([arguments]);
        }).q = []);
      }

      window.krux_getFWKeyValues = enableKrux ? function (prefix, limit) {
        window.Krux.segments = retrieve('segs') ? retrieve('segs').split(',') : [];
        var segPrefix = prefix || '_fwu:386123:';
        var segLimit = limit || 35;
        var fwKVP = {};

        for (var x = 0; x < window.Krux.segments.length; x++) {
          if (x < segLimit) fwKVP[segPrefix + window.Krux.segments[x]] = 1;
        }

        return fwKVP;
      } : function () {};
      window.krux_getDESegments = enableKrux ? function () {
        var segmentString = '&kxid=';

        if (window.Krux.user) {
          segmentString += window.Krux.user;
        }

        segmentString += '&kxseg=' + window.kvs.join(',');
        return segmentString;
      } : function () {};
      window.krux_getFWSegments = enableKrux ? function () {
        window.Krux.segments = retrieve('segs') ? retrieve('segs').split(',') : [];
        return 'kxseg=' + window.Krux.segments.join(',kxseg=');
      } : function () {};
      window.krux_getUser = enableKrux ? function () {
        window.Krux.user = retrieve('user');
        return window.Krux.user;
      } : function () {};
      window.krux_getKuid = enableKrux ? function () {
        window.Krux.kuid = retrieve('kuid');
        return window.Krux.kuid;
      } : function () {};
      processCookie = enableKrux ? function (asset) {
        var processCookiePromise = new Promise(function (resolve) {
          window.Krux.user = retrieve('user');
          window.Krux.segments = retrieve('segs') ? retrieve('segs').split(',') : [];
          window.Krux.kuid = retrieve('kuid');
          var kuser = window.Krux.user;
          var ksg = window.Krux.segments.filter(function filterFunc(segment, index) {
            return index < 35;
          });
          var kuid = window.Krux.kuid;

          if (config.KRUX.SEND_VALUES_TO_ZION && !messageSent) {
            messageSent = true;
            logger$1.log('Publishing to Zion Bus', {
              zionBus: zionBus,
              kuser: kuser,
              kuid: kuid,
              ksg: ksg
            });
            zionBus.publish('id_found', {
              type: 'krux_kuid',
              value: kuid
            });
            zionBus.publish('id_found', {
              type: 'krux_kxuser',
              value: kuser
            });
            zionBus.publish('sg_found', {
              type: 'ksg',
              value: ksg
            });
          }

          if (!targetingSet) {
            targetingSet = true;
            logger$1.log('Adding Krux Targeting...');

            if (window.AdFuel) {
              window.AdFuel.addPageLevelTarget('kuid', kuid);
              window.AdFuel.addPageLevelTarget('ksg', ksg);
            } else {
              window.googletag.cmd.push(function () {
                window.googletag.pubads().setTargeting('kuid', kuid);
                window.googletag.pubads().setTargeting('ksg', ksg);
              });
            }
          }

          resolve({
            ksg: ksg,
            kuid: kuid,
            kuser: kuser
          });
        });
        processCookiePromise.id = "".concat(MODULE_NAME$1, " ").concat(MODULE_VERSION$1);
        return processCookiePromise;
      } : function () {
        var mockPromise = new Promise(function (resolve) {
          resolve();
        });
        mockPromise.id = "".concat(MODULE_NAME$1, " ").concat(MODULE_VERSION$1);
        return mockPromise;
      };
      registerModuleWithAdFuel = enableKrux ? function () {
        window.AdFuel.registerModule(MODULE_NAME$1, {
          preDispatchCallback: processCookie
        }, MODULE_VERSION$1, config.KRUX);
      } : function () {};
      setControlTag = enableKrux ? function (controlTagId) {
        logger$1.log('Setting Control Tag: ', controlTagId); // execute script to set cookie

        var a = document;
        var b = a.createElement('script');
        var c = a.getElementsByTagName('head')[0];
        b.type = 'text/javascript';
        b.async = true;
        var m;
        var src = (m = a.location.href.match(/\bkxsrc=([^&]+)/)) && decodeURIComponent(m[1]);
        b.src = /^https?:\/\/([^/]+\.)?krxd\.net(:\d{1,5})?\//i.test(src) ? src : src === 'disable' ? '' : (a.location.protocol === 'https:' ? 'https:' : 'http:') + '//cdn.krxd.net/controltag?confid=' + controlTagId;

        if (!piiFilter.hash() && !piiFilter.qs() && !piiFilter.ref()) {
          logger$1.log('Adding Krux Script To Head of Page...', b.src);
          c.appendChild(b);
        }
      } : function () {};

      var start = function start() {
        if (config.KRUX) {
          // set based on site
          var controlTags = config.KRUX.CONTROLTAGS ? config.KRUX.CONTROLTAGS : {
            DOM: config.KRUX.DOM_CONTROLTAG,
            INTL: config.KRUX.INTL_CONTROLTAG
          };

          if (config.KRUX.SEND_VALUES_TO_ZION && !subscribersSet) {
            subscribersSet = true;
            zionBus = ZionMessageBus_2.getInstance();
            zionBus.subscribe('id_found', function (x) {
              logger$1.log("From id_found subscription: ".concat(JSON.stringify(x)));
            });
            zionBus.subscribe('sg_found', function (x) {
              logger$1.log("From sg_found subscription: ".concat(JSON.stringify(x)));
            });
          }

          var controlTag = isIntl() ? controlTags.INTL : controlTags.DOM;

          if (enableKrux) {
            setControlTag(controlTag);

            if (window.AdFuel) {
              // AdFuel loaded first
              registerModuleWithAdFuel();
            } else {
              addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
            }
          }
        }

        resolve();
      };

      start();
    });
    initPromise.id = "".concat(MODULE_NAME$1, " ").concat(MODULE_VERSION$1);
    return initPromise;
  };

  if (window.AdFuelOptions) {
    if (window.AdFuelOptions.USER_CONSENT.ENABLED) {
      var callInit = function callInit() {
        setTimeout(function () {
          if (window.WM.UserConsent && window.WM.UserConsent.isReady()) {
            if (window.WM.UserConsent.getRegion() === 'ccpa') {
              init(window.AdFuelOptions);
            } else {
              if (initEventSet || window.WM.UserConsent.isOptanonLoaded()) {
                init(window.AdFuelOptions);
              } else {
                addEvent(window, 'optanonLoaded', callInit);
                initEventSet = true;
              }
            }
          }
        }, 100);
      };

      if (window.WM && window.WM.UserConsent && window.WM.UserConsent.isReady()) {
        callInit();
      } else {
        addEvent(window, 'userConsentReady', callInit);
      }
    } else {
      init(window.AdFuelOptions);
    }
  }

  var index = {
    preDispatchCallback: processCookie,
    init: init,
    buildSlot: function buildSlot(slotData) {
      var buildPromise = new Promise(function (resolve) {
        resolve();
      });
      buildPromise.id = "".concat(MODULE_NAME$1, " ").concat(MODULE_VERSION$1);
      return buildPromise;
    },
    runAuction: function runAuction(slotData) {
      var auctionPromise = new Promise(function (resolve) {
        resolve();
      });
      auctionPromise.id = "".concat(MODULE_NAME$1, " ").concat(MODULE_VERSION$1);
      return auctionPromise;
    },
    setTargeting: function setTargeting(slotData) {
      var targetingPromise = new Promise(function (resolve) {
        processCookie(slotData, resolve);
      });
      targetingPromise.id = "".concat(MODULE_NAME$1, " ").concat(MODULE_VERSION$1);
      return targetingPromise;
    },
    __NAME__: MODULE_NAME$1,
    __VERSION__: MODULE_VERSION$1
  };
  return index;
}); ////////////////////////////////////////////
// Malvertising Detection for 2.0
////////////////////////////////////////////


(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof4(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.MalvertisingDetection = factory());
})(void 0, function () {
  'use strict';
  /*
      Malvertising Detection Module - Version 4.0.5
  */

  var MODULE_NAME = 'Malvertising Detection';
  var MODULE_VERSION = 'v4.0.5';
  var getLogger = window.AdFuelUtils.getLogger;
  var addEvent = window.AdFuelUtils.addEvent;
  var logger = null;
  var addScript = true;
  var scriptAdded = false;
  var initEventSet = false;

  var addMdScript = function addMdScript(options) {
    if (addScript && !scriptAdded) {
      var head = document.getElementsByTagName('head')[0];
      var mdScript = document.createElement('script');
      var src = options.SCRIPT_SRC;
      mdScript.type = 'text/javascript';
      mdScript.src = src;

      if (!!src && !!head) {
        head.insertBefore(mdScript, head.firstChild);
        scriptAdded = true;
        logger.log("Added Malvertising Detection script to head of page: ".concat(mdScript));
      } else {
        logger.log('Failed to add Malvertising Detection script...');
      }
    }
  };

  var init = function init(opts) {
    var initPromise = new Promise(function (resolve) {
      logger = getLogger(MODULE_NAME, MODULE_VERSION, 'maldetect', 'color: #58f53f; padding: 2px', opts.MALVERTISING.DEBUG);
      logger.log('Initialization Options: ', opts);
      addScript = true;

      if (typeof window !== 'undefined') {
        addMdScript(opts.MALVERTISING);
      }

      var registerModuleWithAdFuel = function registerModuleWithAdFuel() {
        window.AdFuel.registerModule(MODULE_NAME, {}, MODULE_VERSION, opts.MALVERTISING);
      };

      if (window.AdFuel) {
        // AdFuel loaded first
        registerModuleWithAdFuel();
      } else {
        // wait for AdFuel to load
        addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
      }

      resolve();
    });
    initPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    return initPromise;
  };

  if (window.AdFuelOptions) {
    if (window.AdFuelOptions.USER_CONSENT.ENABLED) {
      var callInit = function callInit() {
        setTimeout(function () {
          if (window.WM.UserConsent && window.WM.UserConsent.isReady()) {
            if (window.WM.UserConsent.getRegion() === 'ccpa') {
              init(window.AdFuelOptions);
            } else {
              if (initEventSet || window.WM.UserConsent.isOptanonLoaded()) {
                init(window.AdFuelOptions);
              } else {
                addEvent(window, 'optanonLoaded', callInit);
                initEventSet = true;
              }
            }
          }
        }, 100);
      };

      if (window.WM && window.WM.UserConsent && window.WM.UserConsent.isReady()) {
        callInit();
      } else {
        addEvent(window, 'userConsentReady', callInit);
      }
    } else {
      init(window.AdFuelOptions);
    }
  }

  var index = {
    __VERSION__: MODULE_VERSION,
    __NAME__: MODULE_NAME,
    init: init,
    addMdScript: addMdScript
  };
  return index;
}); ////////////////////////////////////////////
// Sourcepoint Addon: Ad Blocker Detection for 2.0
////////////////////////////////////////////


(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof4(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.SourcepointAdBlocking = factory());
})(void 0, function () {
  'use strict';

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
    return module = {
      exports: {}
    }, fn(module, module.exports), module.exports;
  }

  var isMobile = createCommonjsModule(function (module) {
    (function (global) {
      var apple_phone = /iPhone/i,
          apple_ipod = /iPod/i,
          apple_tablet = /iPad/i,
          android_phone = /\bAndroid(?:.+)Mobile\b/i,
          // Match 'Android' AND 'Mobile'
      android_tablet = /Android/i,
          amazon_phone = /\bAndroid(?:.+)SD4930UR\b/i,
          amazon_tablet = /\bAndroid(?:.+)(?:KF[A-Z]{2,4})\b/i,
          windows_phone = /Windows Phone/i,
          windows_tablet = /\bWindows(?:.+)ARM\b/i,
          // Match 'Windows' AND 'ARM'
      other_blackberry = /BlackBerry/i,
          other_blackberry_10 = /BB10/i,
          other_opera = /Opera Mini/i,
          other_chrome = /\b(CriOS|Chrome)(?:.+)Mobile/i,
          other_firefox = /Mobile(?:.+)Firefox\b/i; // Match 'Mobile' AND 'Firefox'

      function match(regex, userAgent) {
        return regex.test(userAgent);
      }

      function isMobile(userAgent) {
        var ua = userAgent || (typeof navigator !== 'undefined' ? navigator.userAgent : ''); // Facebook mobile app's integrated browser adds a bunch of strings that
        // match everything. Strip it out if it exists.

        var tmp = ua.split('[FBAN');

        if (typeof tmp[1] !== 'undefined') {
          ua = tmp[0];
        } // Twitter mobile app's integrated browser on iPad adds a "Twitter for
        // iPhone" string. Same probably happens on other tablet platforms.
        // This will confuse detection so strip it out if it exists.


        tmp = ua.split('Twitter');

        if (typeof tmp[1] !== 'undefined') {
          ua = tmp[0];
        }

        var result = {
          apple: {
            phone: match(apple_phone, ua) && !match(windows_phone, ua),
            ipod: match(apple_ipod, ua),
            tablet: !match(apple_phone, ua) && match(apple_tablet, ua) && !match(windows_phone, ua),
            device: (match(apple_phone, ua) || match(apple_ipod, ua) || match(apple_tablet, ua)) && !match(windows_phone, ua)
          },
          amazon: {
            phone: match(amazon_phone, ua),
            tablet: !match(amazon_phone, ua) && match(amazon_tablet, ua),
            device: match(amazon_phone, ua) || match(amazon_tablet, ua)
          },
          android: {
            phone: !match(windows_phone, ua) && match(amazon_phone, ua) || !match(windows_phone, ua) && match(android_phone, ua),
            tablet: !match(windows_phone, ua) && !match(amazon_phone, ua) && !match(android_phone, ua) && (match(amazon_tablet, ua) || match(android_tablet, ua)),
            device: !match(windows_phone, ua) && (match(amazon_phone, ua) || match(amazon_tablet, ua) || match(android_phone, ua) || match(android_tablet, ua)) || match(/\bokhttp\b/i, ua)
          },
          windows: {
            phone: match(windows_phone, ua),
            tablet: match(windows_tablet, ua),
            device: match(windows_phone, ua) || match(windows_tablet, ua)
          },
          other: {
            blackberry: match(other_blackberry, ua),
            blackberry10: match(other_blackberry_10, ua),
            opera: match(other_opera, ua),
            firefox: match(other_firefox, ua),
            chrome: match(other_chrome, ua),
            device: match(other_blackberry, ua) || match(other_blackberry_10, ua) || match(other_opera, ua) || match(other_firefox, ua) || match(other_chrome, ua)
          }
        };
        result.any = result.apple.device || result.android.device || result.windows.device || result.other.device, // excludes 'other' devices and ipods, targeting touchscreen phones
        result.phone = result.apple.phone || result.android.phone || result.windows.phone, result.tablet = result.apple.tablet || result.android.tablet || result.windows.tablet;
        return result;
      }

      if (module.exports && typeof window === 'undefined') {
        // Node.js
        module.exports = isMobile;
      } else if (module.exports && typeof window !== 'undefined') {
        // Browserify
        module.exports = isMobile();
        module.exports.isMobile = isMobile;
      } else {
        global.isMobile = isMobile();
      }
    })(commonjsGlobal);
  });
  var isMobile_1 = isMobile.isMobile;
  var semver = createCommonjsModule(function (module, exports) {
    exports = module.exports = SemVer;
    var debug;
    /* istanbul ignore next */

    if ((typeof process === "undefined" ? "undefined" : _typeof4(process)) === 'object' && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
      debug = function debug() {
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift('SEMVER');
        console.log.apply(console, args);
      };
    } else {
      debug = function debug() {};
    } // Note: this is the semver.org version of the spec that it implements
    // Not necessarily the package version of this code.


    exports.SEMVER_SPEC_VERSION = '2.0.0';
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
    /* istanbul ignore next */
    9007199254740991; // Max safe segment length for coercion.

    var MAX_SAFE_COMPONENT_LENGTH = 16; // The actual regexps go on exports.re

    var re = exports.re = [];
    var src = exports.src = [];
    var R = 0; // The following Regular Expressions can be used for tokenizing,
    // validating, and parsing SemVer version strings.
    // ## Numeric Identifier
    // A single `0`, or a non-zero digit followed by zero or more digits.

    var NUMERICIDENTIFIER = R++;
    src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
    var NUMERICIDENTIFIERLOOSE = R++;
    src[NUMERICIDENTIFIERLOOSE] = '[0-9]+'; // ## Non-numeric Identifier
    // Zero or more digits, followed by a letter or hyphen, and then zero or
    // more letters, digits, or hyphens.

    var NONNUMERICIDENTIFIER = R++;
    src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*'; // ## Main Version
    // Three dot-separated numeric identifiers.

    var MAINVERSION = R++;
    src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' + '(' + src[NUMERICIDENTIFIER] + ')\\.' + '(' + src[NUMERICIDENTIFIER] + ')';
    var MAINVERSIONLOOSE = R++;
    src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[NUMERICIDENTIFIERLOOSE] + ')'; // ## Pre-release Version Identifier
    // A numeric identifier, or a non-numeric identifier.

    var PRERELEASEIDENTIFIER = R++;
    src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] + '|' + src[NONNUMERICIDENTIFIER] + ')';
    var PRERELEASEIDENTIFIERLOOSE = R++;
    src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] + '|' + src[NONNUMERICIDENTIFIER] + ')'; // ## Pre-release Version
    // Hyphen, followed by one or more dot-separated pre-release version
    // identifiers.

    var PRERELEASE = R++;
    src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] + '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';
    var PRERELEASELOOSE = R++;
    src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] + '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))'; // ## Build Metadata Identifier
    // Any combination of digits, letters, or hyphens.

    var BUILDIDENTIFIER = R++;
    src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+'; // ## Build Metadata
    // Plus sign, followed by one or more period-separated build metadata
    // identifiers.

    var BUILD = R++;
    src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] + '(?:\\.' + src[BUILDIDENTIFIER] + ')*))'; // ## Full Version String
    // A main version, followed optionally by a pre-release version and
    // build metadata.
    // Note that the only major, minor, patch, and pre-release sections of
    // the version string are capturing groups.  The build metadata is not a
    // capturing group, because it should not ever be used in version
    // comparison.

    var FULL = R++;
    var FULLPLAIN = 'v?' + src[MAINVERSION] + src[PRERELEASE] + '?' + src[BUILD] + '?';
    src[FULL] = '^' + FULLPLAIN + '$'; // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
    // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
    // common in the npm registry.

    var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] + src[PRERELEASELOOSE] + '?' + src[BUILD] + '?';
    var LOOSE = R++;
    src[LOOSE] = '^' + LOOSEPLAIN + '$';
    var GTLT = R++;
    src[GTLT] = '((?:<|>)?=?)'; // Something like "2.*" or "1.2.x".
    // Note that "x.x" is a valid xRange identifer, meaning "any version"
    // Only the first item is strictly required.

    var XRANGEIDENTIFIERLOOSE = R++;
    src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
    var XRANGEIDENTIFIER = R++;
    src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';
    var XRANGEPLAIN = R++;
    src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' + '(?:' + src[PRERELEASE] + ')?' + src[BUILD] + '?' + ')?)?';
    var XRANGEPLAINLOOSE = R++;
    src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:' + src[PRERELEASELOOSE] + ')?' + src[BUILD] + '?' + ')?)?';
    var XRANGE = R++;
    src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
    var XRANGELOOSE = R++;
    src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$'; // Coercion.
    // Extract anything that could conceivably be a part of a valid semver

    var COERCE = R++;
    src[COERCE] = '(?:^|[^\\d])' + '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' + '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' + '(?:$|[^\\d])'; // Tilde ranges.
    // Meaning is "reasonably at or greater than"

    var LONETILDE = R++;
    src[LONETILDE] = '(?:~>?)';
    var TILDETRIM = R++;
    src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
    re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
    var tildeTrimReplace = '$1~';
    var TILDE = R++;
    src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
    var TILDELOOSE = R++;
    src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$'; // Caret ranges.
    // Meaning is "at least and backwards compatible with"

    var LONECARET = R++;
    src[LONECARET] = '(?:\\^)';
    var CARETTRIM = R++;
    src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
    re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
    var caretTrimReplace = '$1^';
    var CARET = R++;
    src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
    var CARETLOOSE = R++;
    src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$'; // A simple gt/lt/eq thing, or just "" to indicate "any version"

    var COMPARATORLOOSE = R++;
    src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
    var COMPARATOR = R++;
    src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$'; // An expression to strip any whitespace between the gtlt and the thing
    // it modifies, so that `> 1.2.3` ==> `>1.2.3`

    var COMPARATORTRIM = R++;
    src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] + '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')'; // this one has to use the /g flag

    re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
    var comparatorTrimReplace = '$1$2$3'; // Something like `1.2.3 - 1.2.4`
    // Note that these all use the loose form, because they'll be
    // checked against either the strict or loose comparator form
    // later.

    var HYPHENRANGE = R++;
    src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' + '\\s+-\\s+' + '(' + src[XRANGEPLAIN] + ')' + '\\s*$';
    var HYPHENRANGELOOSE = R++;
    src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' + '\\s+-\\s+' + '(' + src[XRANGEPLAINLOOSE] + ')' + '\\s*$'; // Star ranges basically just allow anything at all.

    var STAR = R++;
    src[STAR] = '(<|>)?=?\\s*\\*'; // Compile to actual regexp objects.
    // All are flag-free, unless they were created above with a flag.

    for (var i = 0; i < R; i++) {
      debug(i, src[i]);

      if (!re[i]) {
        re[i] = new RegExp(src[i]);
      }
    }

    exports.parse = parse;

    function parse(version, options) {
      if (!options || _typeof4(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (version instanceof SemVer) {
        return version;
      }

      if (typeof version !== 'string') {
        return null;
      }

      if (version.length > MAX_LENGTH) {
        return null;
      }

      var r = options.loose ? re[LOOSE] : re[FULL];

      if (!r.test(version)) {
        return null;
      }

      try {
        return new SemVer(version, options);
      } catch (er) {
        return null;
      }
    }

    exports.valid = valid;

    function valid(version, options) {
      var v = parse(version, options);
      return v ? v.version : null;
    }

    exports.clean = clean;

    function clean(version, options) {
      var s = parse(version.trim().replace(/^[=v]+/, ''), options);
      return s ? s.version : null;
    }

    exports.SemVer = SemVer;

    function SemVer(version, options) {
      if (!options || _typeof4(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (version instanceof SemVer) {
        if (version.loose === options.loose) {
          return version;
        } else {
          version = version.version;
        }
      } else if (typeof version !== 'string') {
        throw new TypeError('Invalid Version: ' + version);
      }

      if (version.length > MAX_LENGTH) {
        throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters');
      }

      if (!(this instanceof SemVer)) {
        return new SemVer(version, options);
      }

      debug('SemVer', version, options);
      this.options = options;
      this.loose = !!options.loose;
      var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL]);

      if (!m) {
        throw new TypeError('Invalid Version: ' + version);
      }

      this.raw = version; // these are actually numbers

      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];

      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError('Invalid major version');
      }

      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError('Invalid minor version');
      }

      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError('Invalid patch version');
      } // numberify any prerelease numeric ids


      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split('.').map(function (id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id;

            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num;
            }
          }

          return id;
        });
      }

      this.build = m[5] ? m[5].split('.') : [];
      this.format();
    }

    SemVer.prototype.format = function () {
      this.version = this.major + '.' + this.minor + '.' + this.patch;

      if (this.prerelease.length) {
        this.version += '-' + this.prerelease.join('.');
      }

      return this.version;
    };

    SemVer.prototype.toString = function () {
      return this.version;
    };

    SemVer.prototype.compare = function (other) {
      debug('SemVer.compare', this.version, this.options, other);

      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }

      return this.compareMain(other) || this.comparePre(other);
    };

    SemVer.prototype.compareMain = function (other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }

      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    };

    SemVer.prototype.comparePre = function (other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      } // NOT having a prerelease is > having one


      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }

      var i = 0;

      do {
        var a = this.prerelease[i];
        var b = other.prerelease[i];
        debug('prerelease compare', i, a, b);

        if (a === undefined && b === undefined) {
          return 0;
        } else if (b === undefined) {
          return 1;
        } else if (a === undefined) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i);
    }; // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.


    SemVer.prototype.inc = function (release, identifier) {
      switch (release) {
        case 'premajor':
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc('pre', identifier);
          break;

        case 'preminor':
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc('pre', identifier);
          break;

        case 'prepatch':
          // If this is already a prerelease, it will bump to the next version
          // drop any prereleases that might already exist, since they are not
          // relevant at this point.
          this.prerelease.length = 0;
          this.inc('patch', identifier);
          this.inc('pre', identifier);
          break;
        // If the input is a non-prerelease version, this acts the same as
        // prepatch.

        case 'prerelease':
          if (this.prerelease.length === 0) {
            this.inc('patch', identifier);
          }

          this.inc('pre', identifier);
          break;

        case 'major':
          // If this is a pre-major version, bump up to the same major version.
          // Otherwise increment major.
          // 1.0.0-5 bumps to 1.0.0
          // 1.1.0 bumps to 2.0.0
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }

          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;

        case 'minor':
          // If this is a pre-minor version, bump up to the same minor version.
          // Otherwise increment minor.
          // 1.2.0-5 bumps to 1.2.0
          // 1.2.1 bumps to 1.3.0
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }

          this.patch = 0;
          this.prerelease = [];
          break;

        case 'patch':
          // If this is not a pre-release version, it will increment the patch.
          // If it is a pre-release it will bump up to the same patch version.
          // 1.2.0-5 patches to 1.2.0
          // 1.2.0 patches to 1.2.1
          if (this.prerelease.length === 0) {
            this.patch++;
          }

          this.prerelease = [];
          break;
        // This probably shouldn't be used publicly.
        // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.

        case 'pre':
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            var i = this.prerelease.length;

            while (--i >= 0) {
              if (typeof this.prerelease[i] === 'number') {
                this.prerelease[i]++;
                i = -2;
              }
            }

            if (i === -1) {
              // didn't increment anything
              this.prerelease.push(0);
            }
          }

          if (identifier) {
            // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
            // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
            if (this.prerelease[0] === identifier) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier, 0];
              }
            } else {
              this.prerelease = [identifier, 0];
            }
          }

          break;

        default:
          throw new Error('invalid increment argument: ' + release);
      }

      this.format();
      this.raw = this.version;
      return this;
    };

    exports.inc = inc;

    function inc(version, release, loose, identifier) {
      if (typeof loose === 'string') {
        identifier = loose;
        loose = undefined;
      }

      try {
        return new SemVer(version, loose).inc(release, identifier).version;
      } catch (er) {
        return null;
      }
    }

    exports.diff = diff;

    function diff(version1, version2) {
      if (eq(version1, version2)) {
        return null;
      } else {
        var v1 = parse(version1);
        var v2 = parse(version2);
        var prefix = '';

        if (v1.prerelease.length || v2.prerelease.length) {
          prefix = 'pre';
          var defaultResult = 'prerelease';
        }

        for (var key in v1) {
          if (key === 'major' || key === 'minor' || key === 'patch') {
            if (v1[key] !== v2[key]) {
              return prefix + key;
            }
          }
        }

        return defaultResult; // may be undefined
      }
    }

    exports.compareIdentifiers = compareIdentifiers;
    var numeric = /^[0-9]+$/;

    function compareIdentifiers(a, b) {
      var anum = numeric.test(a);
      var bnum = numeric.test(b);

      if (anum && bnum) {
        a = +a;
        b = +b;
      }

      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    }

    exports.rcompareIdentifiers = rcompareIdentifiers;

    function rcompareIdentifiers(a, b) {
      return compareIdentifiers(b, a);
    }

    exports.major = major;

    function major(a, loose) {
      return new SemVer(a, loose).major;
    }

    exports.minor = minor;

    function minor(a, loose) {
      return new SemVer(a, loose).minor;
    }

    exports.patch = patch;

    function patch(a, loose) {
      return new SemVer(a, loose).patch;
    }

    exports.compare = compare;

    function compare(a, b, loose) {
      return new SemVer(a, loose).compare(new SemVer(b, loose));
    }

    exports.compareLoose = compareLoose;

    function compareLoose(a, b) {
      return compare(a, b, true);
    }

    exports.rcompare = rcompare;

    function rcompare(a, b, loose) {
      return compare(b, a, loose);
    }

    exports.sort = sort;

    function sort(list, loose) {
      return list.sort(function (a, b) {
        return exports.compare(a, b, loose);
      });
    }

    exports.rsort = rsort;

    function rsort(list, loose) {
      return list.sort(function (a, b) {
        return exports.rcompare(a, b, loose);
      });
    }

    exports.gt = gt;

    function gt(a, b, loose) {
      return compare(a, b, loose) > 0;
    }

    exports.lt = lt;

    function lt(a, b, loose) {
      return compare(a, b, loose) < 0;
    }

    exports.eq = eq;

    function eq(a, b, loose) {
      return compare(a, b, loose) === 0;
    }

    exports.neq = neq;

    function neq(a, b, loose) {
      return compare(a, b, loose) !== 0;
    }

    exports.gte = gte;

    function gte(a, b, loose) {
      return compare(a, b, loose) >= 0;
    }

    exports.lte = lte;

    function lte(a, b, loose) {
      return compare(a, b, loose) <= 0;
    }

    exports.cmp = cmp;

    function cmp(a, op, b, loose) {
      switch (op) {
        case '===':
          if (_typeof4(a) === 'object') a = a.version;
          if (_typeof4(b) === 'object') b = b.version;
          return a === b;

        case '!==':
          if (_typeof4(a) === 'object') a = a.version;
          if (_typeof4(b) === 'object') b = b.version;
          return a !== b;

        case '':
        case '=':
        case '==':
          return eq(a, b, loose);

        case '!=':
          return neq(a, b, loose);

        case '>':
          return gt(a, b, loose);

        case '>=':
          return gte(a, b, loose);

        case '<':
          return lt(a, b, loose);

        case '<=':
          return lte(a, b, loose);

        default:
          throw new TypeError('Invalid operator: ' + op);
      }
    }

    exports.Comparator = Comparator;

    function Comparator(comp, options) {
      if (!options || _typeof4(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }

      if (!(this instanceof Comparator)) {
        return new Comparator(comp, options);
      }

      debug('comparator', comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);

      if (this.semver === ANY) {
        this.value = '';
      } else {
        this.value = this.operator + this.semver.version;
      }

      debug('comp', this);
    }

    var ANY = {};

    Comparator.prototype.parse = function (comp) {
      var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
      var m = comp.match(r);

      if (!m) {
        throw new TypeError('Invalid comparator: ' + comp);
      }

      this.operator = m[1];

      if (this.operator === '=') {
        this.operator = '';
      } // if it literally is just '>' or '' then allow anything.


      if (!m[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m[2], this.options.loose);
      }
    };

    Comparator.prototype.toString = function () {
      return this.value;
    };

    Comparator.prototype.test = function (version) {
      debug('Comparator.test', version, this.options.loose);

      if (this.semver === ANY) {
        return true;
      }

      if (typeof version === 'string') {
        version = new SemVer(version, this.options);
      }

      return cmp(version, this.operator, this.semver, this.options);
    };

    Comparator.prototype.intersects = function (comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError('a Comparator is required');
      }

      if (!options || _typeof4(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      var rangeTmp;

      if (this.operator === '') {
        rangeTmp = new Range(comp.value, options);
        return satisfies(this.value, rangeTmp, options);
      } else if (comp.operator === '') {
        rangeTmp = new Range(this.value, options);
        return satisfies(comp.semver, rangeTmp, options);
      }

      var sameDirectionIncreasing = (this.operator === '>=' || this.operator === '>') && (comp.operator === '>=' || comp.operator === '>');
      var sameDirectionDecreasing = (this.operator === '<=' || this.operator === '<') && (comp.operator === '<=' || comp.operator === '<');
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive = (this.operator === '>=' || this.operator === '<=') && (comp.operator === '>=' || comp.operator === '<=');
      var oppositeDirectionsLessThan = cmp(this.semver, '<', comp.semver, options) && (this.operator === '>=' || this.operator === '>') && (comp.operator === '<=' || comp.operator === '<');
      var oppositeDirectionsGreaterThan = cmp(this.semver, '>', comp.semver, options) && (this.operator === '<=' || this.operator === '<') && (comp.operator === '>=' || comp.operator === '>');
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    };

    exports.Range = Range;

    function Range(range, options) {
      if (!options || _typeof4(options) !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (range instanceof Range) {
        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options);
        }
      }

      if (range instanceof Comparator) {
        return new Range(range.value, options);
      }

      if (!(this instanceof Range)) {
        return new Range(range, options);
      }

      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease; // First, split based on boolean or ||

      this.raw = range;
      this.set = range.split(/\s*\|\|\s*/).map(function (range) {
        return this.parseRange(range.trim());
      }, this).filter(function (c) {
        // throw out any that are not relevant for whatever reason
        return c.length;
      });

      if (!this.set.length) {
        throw new TypeError('Invalid SemVer Range: ' + range);
      }

      this.format();
    }

    Range.prototype.format = function () {
      this.range = this.set.map(function (comps) {
        return comps.join(' ').trim();
      }).join('||').trim();
      return this.range;
    };

    Range.prototype.toString = function () {
      return this.range;
    };

    Range.prototype.parseRange = function (range) {
      var loose = this.options.loose;
      range = range.trim(); // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`

      var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
      range = range.replace(hr, hyphenReplace);
      debug('hyphen replace', range); // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`

      range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
      debug('comparator trim', range, re[COMPARATORTRIM]); // `~ 1.2.3` => `~1.2.3`

      range = range.replace(re[TILDETRIM], tildeTrimReplace); // `^ 1.2.3` => `^1.2.3`

      range = range.replace(re[CARETTRIM], caretTrimReplace); // normalize spaces

      range = range.split(/\s+/).join(' '); // At this point, the range is completely trimmed and
      // ready to be split into comparators.

      var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
      var set = range.split(' ').map(function (comp) {
        return parseComparator(comp, this.options);
      }, this).join(' ').split(/\s+/);

      if (this.options.loose) {
        // in loose mode, throw out any that are not valid comparators
        set = set.filter(function (comp) {
          return !!comp.match(compRe);
        });
      }

      set = set.map(function (comp) {
        return new Comparator(comp, this.options);
      }, this);
      return set;
    };

    Range.prototype.intersects = function (range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError('a Range is required');
      }

      return this.set.some(function (thisComparators) {
        return thisComparators.every(function (thisComparator) {
          return range.set.some(function (rangeComparators) {
            return rangeComparators.every(function (rangeComparator) {
              return thisComparator.intersects(rangeComparator, options);
            });
          });
        });
      });
    }; // Mostly just for testing and legacy API reasons


    exports.toComparators = toComparators;

    function toComparators(range, options) {
      return new Range(range, options).set.map(function (comp) {
        return comp.map(function (c) {
          return c.value;
        }).join(' ').trim().split(' ');
      });
    } // comprised of xranges, tildes, stars, and gtlt's at this point.
    // already replaced the hyphen ranges
    // turn into a set of JUST comparators.


    function parseComparator(comp, options) {
      debug('comp', comp, options);
      comp = replaceCarets(comp, options);
      debug('caret', comp);
      comp = replaceTildes(comp, options);
      debug('tildes', comp);
      comp = replaceXRanges(comp, options);
      debug('xrange', comp);
      comp = replaceStars(comp, options);
      debug('stars', comp);
      return comp;
    }

    function isX(id) {
      return !id || id.toLowerCase() === 'x' || id === '*';
    } // ~, ~> --> * (any, kinda silly)
    // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
    // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
    // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
    // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
    // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0


    function replaceTildes(comp, options) {
      return comp.trim().split(/\s+/).map(function (comp) {
        return replaceTilde(comp, options);
      }).join(' ');
    }

    function replaceTilde(comp, options) {
      var r = options.loose ? re[TILDELOOSE] : re[TILDE];
      return comp.replace(r, function (_, M, m, p, pr) {
        debug('tilde', comp, _, M, m, p, pr);
        var ret;

        if (isX(M)) {
          ret = '';
        } else if (isX(m)) {
          ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
        } else if (isX(p)) {
          // ~1.2 == >=1.2.0 <1.3.0
          ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
        } else if (pr) {
          debug('replaceTilde pr', pr);
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
        } else {
          // ~1.2.3 == >=1.2.3 <1.3.0
          ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
        }

        debug('tilde return', ret);
        return ret;
      });
    } // ^ --> * (any, kinda silly)
    // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
    // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
    // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
    // ^1.2.3 --> >=1.2.3 <2.0.0
    // ^1.2.0 --> >=1.2.0 <2.0.0


    function replaceCarets(comp, options) {
      return comp.trim().split(/\s+/).map(function (comp) {
        return replaceCaret(comp, options);
      }).join(' ');
    }

    function replaceCaret(comp, options) {
      debug('caret', comp, options);
      var r = options.loose ? re[CARETLOOSE] : re[CARET];
      return comp.replace(r, function (_, M, m, p, pr) {
        debug('caret', comp, _, M, m, p, pr);
        var ret;

        if (isX(M)) {
          ret = '';
        } else if (isX(m)) {
          ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
        } else if (isX(p)) {
          if (M === '0') {
            ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
          } else {
            ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
          }
        } else if (pr) {
          debug('replaceCaret pr', pr);

          if (M === '0') {
            if (m === '0') {
              ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + m + '.' + (+p + 1);
            } else {
              ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + M + '.' + (+m + 1) + '.0';
            }
          } else {
            ret = '>=' + M + '.' + m + '.' + p + '-' + pr + ' <' + (+M + 1) + '.0.0';
          }
        } else {
          debug('no pr');

          if (M === '0') {
            if (m === '0') {
              ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + m + '.' + (+p + 1);
            } else {
              ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
            }
          } else {
            ret = '>=' + M + '.' + m + '.' + p + ' <' + (+M + 1) + '.0.0';
          }
        }

        debug('caret return', ret);
        return ret;
      });
    }

    function replaceXRanges(comp, options) {
      debug('replaceXRanges', comp, options);
      return comp.split(/\s+/).map(function (comp) {
        return replaceXRange(comp, options);
      }).join(' ');
    }

    function replaceXRange(comp, options) {
      comp = comp.trim();
      var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];
      return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
        debug('xRange', comp, ret, gtlt, M, m, p, pr);
        var xM = isX(M);
        var xm = xM || isX(m);
        var xp = xm || isX(p);
        var anyX = xp;

        if (gtlt === '=' && anyX) {
          gtlt = '';
        }

        if (xM) {
          if (gtlt === '>' || gtlt === '<') {
            // nothing is allowed
            ret = '<0.0.0';
          } else {
            // nothing is forbidden
            ret = '*';
          }
        } else if (gtlt && anyX) {
          // we know patch is an x, because we have any x at all.
          // replace X with 0
          if (xm) {
            m = 0;
          }

          p = 0;

          if (gtlt === '>') {
            // >1 => >=2.0.0
            // >1.2 => >=1.3.0
            // >1.2.3 => >= 1.2.4
            gtlt = '>=';

            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === '<=') {
            // <=0.7.x is actually <0.8.0, since any 0.7.x should
            // pass.  Similarly, <=7.x is actually <8.0.0, etc.
            gtlt = '<';

            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }

          ret = gtlt + M + '.' + m + '.' + p;
        } else if (xm) {
          ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
        } else if (xp) {
          ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
        }

        debug('xRange return', ret);
        return ret;
      });
    } // Because * is AND-ed with everything else in the comparator,
    // and '' means "any version", just remove the *s entirely.


    function replaceStars(comp, options) {
      debug('replaceStars', comp, options); // Looseness is ignored here.  star is always as loose as it gets!

      return comp.trim().replace(re[STAR], '');
    } // This function is passed to string.replace(re[HYPHENRANGE])
    // M, m, patch, prerelease, build
    // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
    // 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
    // 1.2 - 3.4 => >=1.2.0 <3.5.0


    function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = '';
      } else if (isX(fm)) {
        from = '>=' + fM + '.0.0';
      } else if (isX(fp)) {
        from = '>=' + fM + '.' + fm + '.0';
      } else {
        from = '>=' + from;
      }

      if (isX(tM)) {
        to = '';
      } else if (isX(tm)) {
        to = '<' + (+tM + 1) + '.0.0';
      } else if (isX(tp)) {
        to = '<' + tM + '.' + (+tm + 1) + '.0';
      } else if (tpr) {
        to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
      } else {
        to = '<=' + to;
      }

      return (from + ' ' + to).trim();
    } // if ANY of the sets match ALL of its comparators, then pass


    Range.prototype.test = function (version) {
      if (!version) {
        return false;
      }

      if (typeof version === 'string') {
        version = new SemVer(version, this.options);
      }

      for (var i = 0; i < this.set.length; i++) {
        if (testSet(this.set[i], version, this.options)) {
          return true;
        }
      }

      return false;
    };

    function testSet(set, version, options) {
      for (var i = 0; i < set.length; i++) {
        if (!set[i].test(version)) {
          return false;
        }
      }

      if (version.prerelease.length && !options.includePrerelease) {
        // Find the set of versions that are allowed to have prereleases
        // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
        // That should allow `1.2.3-pr.2` to pass.
        // However, `1.2.4-alpha.notready` should NOT be allowed,
        // even though it's within the range set by the comparators.
        for (i = 0; i < set.length; i++) {
          debug(set[i].semver);

          if (set[i].semver === ANY) {
            continue;
          }

          if (set[i].semver.prerelease.length > 0) {
            var allowed = set[i].semver;

            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
              return true;
            }
          }
        } // Version has a -pre, but it's not one of the ones we like.


        return false;
      }

      return true;
    }

    exports.satisfies = satisfies;

    function satisfies(version, range, options) {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }

      return range.test(version);
    }

    exports.maxSatisfying = maxSatisfying;

    function maxSatisfying(versions, range, options) {
      var max = null;
      var maxSV = null;

      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }

      versions.forEach(function (v) {
        if (rangeObj.test(v)) {
          // satisfies(v, range, options)
          if (!max || maxSV.compare(v) === -1) {
            // compare(max, v, true)
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    }

    exports.minSatisfying = minSatisfying;

    function minSatisfying(versions, range, options) {
      var min = null;
      var minSV = null;

      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }

      versions.forEach(function (v) {
        if (rangeObj.test(v)) {
          // satisfies(v, range, options)
          if (!min || minSV.compare(v) === 1) {
            // compare(min, v, true)
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    }

    exports.minVersion = minVersion;

    function minVersion(range, loose) {
      range = new Range(range, loose);
      var minver = new SemVer('0.0.0');

      if (range.test(minver)) {
        return minver;
      }

      minver = new SemVer('0.0.0-0');

      if (range.test(minver)) {
        return minver;
      }

      minver = null;

      for (var i = 0; i < range.set.length; ++i) {
        var comparators = range.set[i];
        comparators.forEach(function (comparator) {
          // Clone to avoid manipulating the comparator's semver object.
          var compver = new SemVer(comparator.semver.version);

          switch (comparator.operator) {
            case '>':
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }

              compver.raw = compver.format();

            /* fallthrough */

            case '':
            case '>=':
              if (!minver || gt(minver, compver)) {
                minver = compver;
              }

              break;

            case '<':
            case '<=':
              /* Ignore maximum versions */
              break;

            /* istanbul ignore next */

            default:
              throw new Error('Unexpected operation: ' + comparator.operator);
          }
        });
      }

      if (minver && range.test(minver)) {
        return minver;
      }

      return null;
    }

    exports.validRange = validRange;

    function validRange(range, options) {
      try {
        // Return '*' instead of '' so that truthiness works.
        // This will throw if it's invalid anyway
        return new Range(range, options).range || '*';
      } catch (er) {
        return null;
      }
    } // Determine if version is less than all the versions possible in the range


    exports.ltr = ltr;

    function ltr(version, range, options) {
      return outside(version, range, '<', options);
    } // Determine if version is greater than all the versions possible in the range.


    exports.gtr = gtr;

    function gtr(version, range, options) {
      return outside(version, range, '>', options);
    }

    exports.outside = outside;

    function outside(version, range, hilo, options) {
      version = new SemVer(version, options);
      range = new Range(range, options);
      var gtfn, ltefn, ltfn, comp, ecomp;

      switch (hilo) {
        case '>':
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = '>';
          ecomp = '>=';
          break;

        case '<':
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = '<';
          ecomp = '<=';
          break;

        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      } // If it satisifes the range it is not outside


      if (satisfies(version, range, options)) {
        return false;
      } // From now on, variable terms are as if we're in "gtr" mode.
      // but note that everything is flipped for the "ltr" function.


      for (var i = 0; i < range.set.length; ++i) {
        var comparators = range.set[i];
        var high = null;
        var low = null;
        comparators.forEach(function (comparator) {
          if (comparator.semver === ANY) {
            comparator = new Comparator('>=0.0.0');
          }

          high = high || comparator;
          low = low || comparator;

          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        }); // If the edge version comparator has a operator then our version
        // isn't outside it

        if (high.operator === comp || high.operator === ecomp) {
          return false;
        } // If the lowest version comparator has an operator and our version
        // is less than it then it isn't higher than the range


        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }

      return true;
    }

    exports.prerelease = prerelease;

    function prerelease(version, options) {
      var parsed = parse(version, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    }

    exports.intersects = intersects;

    function intersects(r1, r2, options) {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2);
    }

    exports.coerce = coerce;

    function coerce(version) {
      if (version instanceof SemVer) {
        return version;
      }

      if (typeof version !== 'string') {
        return null;
      }

      var match = version.match(re[COERCE]);

      if (match == null) {
        return null;
      }

      return parse(match[1] + '.' + (match[2] || '0') + '.' + (match[3] || '0'));
    }
  });
  var semver_1 = semver.SEMVER_SPEC_VERSION;
  var semver_2 = semver.re;
  var semver_3 = semver.src;
  var semver_4 = semver.parse;
  var semver_5 = semver.valid;
  var semver_6 = semver.clean;
  var semver_7 = semver.SemVer;
  var semver_8 = semver.inc;
  var semver_9 = semver.diff;
  var semver_10 = semver.compareIdentifiers;
  var semver_11 = semver.rcompareIdentifiers;
  var semver_12 = semver.major;
  var semver_13 = semver.minor;
  var semver_14 = semver.patch;
  var semver_15 = semver.compare;
  var semver_16 = semver.compareLoose;
  var semver_17 = semver.rcompare;
  var semver_18 = semver.sort;
  var semver_19 = semver.rsort;
  var semver_20 = semver.gt;
  var semver_21 = semver.lt;
  var semver_22 = semver.eq;
  var semver_23 = semver.neq;
  var semver_24 = semver.gte;
  var semver_25 = semver.lte;
  var semver_26 = semver.cmp;
  var semver_27 = semver.Comparator;
  var semver_28 = semver.Range;
  var semver_29 = semver.toComparators;
  var semver_30 = semver.satisfies;
  var semver_31 = semver.maxSatisfying;
  var semver_32 = semver.minSatisfying;
  var semver_33 = semver.minVersion;
  var semver_34 = semver.validRange;
  var semver_35 = semver.ltr;
  var semver_36 = semver.gtr;
  var semver_37 = semver.outside;
  var semver_38 = semver.prerelease;
  var semver_39 = semver.intersects;
  var semver_40 = semver.coerce;
  /* global fetch, localStorage */

  var MODULE_NAME = 'Ad Utilities';
  var MODULE_VERSION = 'v4.0.6';
  var objectProto = Object.prototype;
  var toString = objectProto.toString;

  var noop = function noop() {};

  var cdnRoot = function cdnRoot() {
    return typeof document !== 'undefined' && document.location !== 'undefined' && document.location.hostname !== 'undefined' && document.location.hostname !== '' ? document.location.hostname.indexOf('cnn.com') >= 0 ? 'cdn.cnn.com' : 'i.cdn.turner.com' : 'i.cdn.turner.com';
  };

  var isFunction = function isFunction(object) {
    return toString.call(object) === '[object Function]';
  };

  var getUMTOCookies = function getUMTOCookies() {
    var FreewheelNetwork = document.location.pathname.indexOf('/dev/') > 0 || document.location.pathname.indexOf('/qa/') > 0 ? '42448' : '48804';
    logger.log('getting UMTO cookies');
    return (readCookie('bea4') ? '_fw_vcid2=' + FreewheelNetwork + ':' + readCookie('bea4') : readCookie('bea4r') ? '_fw_vcid2=' + FreewheelNetwork + ':' + readCookie('bea4r') : '') + (readCookie('kxuser') ? '&krux_user=' + readCookie('kxuser') : '') + (readCookie('zwmc') ? '&zwmc=' + readCookie('zwmc') : '') + (readCookie('ifyr') ? '&ifyr=' + readCookie('ifyr') : '') + (readCookie('hkgc') ? '&hkgc=' + readCookie('hkgc') : '') + (readCookie('goiz') ? '&goiz=' + readCookie('goiz') : '');
  };

  var isObject = function isObject(object) {
    var type = _typeof4(object);

    return (type === 'function' || type === 'object') && !!object;
  };

  var getURLParam = function getURLParam(name) {
    if (typeof document === 'undefined') {
      return '';
    }

    var nameParam = name.replace(/[[]/, '\\[').replace(/[\]]/, '\\]');
    var regexS = '[\\?&]' + nameParam + '=([^&#]*)';
    var regex = new RegExp(regexS);

    if (document && document.location && document.location.search) {
      var results = regex.exec(document.location.search);

      if (results) {
        return results[1];
      }

      return '';
    }

    return '';
  };

  var hasCookie = function hasCookie(name) {
    if (typeof window === 'undefined') return false;

    if (document && document.cookie) {
      logger.log('found?', document.cookie.indexOf('; ' + name + '=') >= 0 || document.cookie.indexOf(name + '=') === 0);
      return document.cookie.indexOf('; ' + name + '=') >= 0 || document.cookie.indexOf(name + '=') === 0;
    }

    return false;
  };

  var getViewport = function getViewport() {
    var viewportWidth;
    var viewportHeight;

    if (typeof window !== 'undefined' && window && typeof window.innerWidth !== 'undefined') {
      viewportWidth = window.innerWidth;
      viewportHeight = window.innerHeight;
    } else if (typeof document !== 'undefined' && document && typeof document.documentElement !== 'undefined' && typeof document.documentElement.clientWidth !== 'undefined' && document.documentElement.clientWidth !== 0) {
      viewportWidth = document.documentElement.clientWidth;
      viewportHeight = document.documentElement.clientHeight;
    } else {
      viewportWidth = document.getElementsByTagName('body')[0].clientWidth;
      viewportHeight = document.getElementsByTagName('body')[0].clientHeight;
    }

    return [viewportWidth, viewportHeight];
  };

  var getBrowser = function getBrowser() {
    logger.time('Getting Browser Information');
    var ua = navigator.userAgent;
    var tem;
    var M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];

    if (/trident/i.test(M[1])) {
      tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
      return 'IE ' + (tem[1] || '');
    }

    if (M[1] === 'Chrome') {
      tem = ua.match(/\b(OPR|Edge)\/(\d+)/);

      if (tem !== null) {
        return tem.slice(1).join(' ').replace('OPR', 'Opera');
      }
    }

    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?']; // eslint-disable-next-line

    if ((tem = ua.match(/version\/(\d+)/i)) !== null) M.splice(1, 1, tem[1]);
    logger.timeEnd('Getting Browser Information');
    return M.join(' ');
  };

  var readCookie = function readCookie(name) {
    var readTheCookie = function readTheCookie(key) {
      if (typeof document === 'undefined' || !document.cookie) {
        // there is no cookie, so go no further
        return null;
      } // there is a cookie


      return document.cookie.match(RegExp(key + '=.*?;')) ? document.cookie.match(RegExp(key + '=.*?;'))[0].replace(RegExp(key + '=|;', 'g'), '') : null;
    };

    var lsSupport = false;
    var data = null; // Check for native support

    if (typeof localStorage !== 'undefined') {
      lsSupport = true;
    } // No value supplied, return value


    if (typeof value === 'undefined') {
      // Get value
      if (lsSupport) {
        // Native support
        data = localStorage.getItem(name);
      }

      if (!lsSupport || data === null) {
        // Use cookie
        data = readTheCookie(name);
      }
    }

    return data;
  };

  var emptyTarget = function emptyTarget(value) {
    return Array.isArray(value) ? [] : {};
  };

  var deepmerge = function deepmerge(target, source, optionsArgument) {
    var array = Array.isArray(source);
    var options = optionsArgument || {
      arrayMerge: combineMerge
    };
    var arrayMerge = options.arrayMerge || combineMerge;

    if (array) {
      return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument);
    } else {
      return mergeObject(target, source, optionsArgument);
    }
  };

  var combineMerge = function combineMerge(target, source, options) {
    var destination = target.slice();
    source.forEach(function (e, i) {
      if (typeof destination[i] === 'undefined') {
        var cloneRequested = clone !== false;
        var shouldClone = cloneRequested && isMergeableObject(e);
        destination[i] = shouldClone ? deepmerge(emptyTarget(e), e, options) : e;
      } else if (isMergeableObject(e)) {
        destination[i] = merge(target[i], e);
      } else if (target.indexOf(e) === -1) {
        destination.push(e);
      }
    });
    return destination;
  };

  var isMergeableObject = function isMergeableObject(val) {
    var nonNullObject = val && _typeof4(val) === 'object';
    return nonNullObject && Object.prototype.toString.call(val) !== '[object RegExp]' && Object.prototype.toString.call(val) !== '[object Date]';
  };

  var cloneIfNecessary = function cloneIfNecessary(value, optionsArgument) {
    var clone = optionsArgument && optionsArgument.clone === true;
    return clone && isMergeableObject(value) ? deepmerge(emptyTarget(value), value, optionsArgument) : value;
  };

  var mergeObject = function mergeObject(target, source, optionsArgument) {
    var destination = {};

    if (isMergeableObject(target)) {
      Object.keys(target).forEach(function (key) {
        destination[key] = cloneIfNecessary(target[key], optionsArgument);
      });
    }

    Object.keys(source).forEach(function (key) {
      if (!isMergeableObject(source[key]) || !target[key]) {
        destination[key] = cloneIfNecessary(source[key], optionsArgument);
      } else {
        destination[key] = deepmerge(target[key], source[key], optionsArgument);
      }
    });
    return destination;
  };

  deepmerge.all = function (array, optionsArgument) {
    if (!Array.isArray(array) || array.length < 2) {
      throw new Error('first argument should be an array with at least two elements');
    } // we are sure there are at least 2 values, so it is safe to have no initial value


    return array.reduce(function (prev, next) {
      return deepmerge(prev, next, optionsArgument);
    });
  };

  var mergeDeep = function mergeDeep(target, source) {
    return deepmerge(target, source);
  };

  var countryCode = readCookie('countryCode') || (readCookie('CG') ? readCookie('CG').substr(0, 2) : '');
  var appId = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwbGF0Zm9ybSI6IndlYiIsInByb2R1Y3QiOiJhZGZ1ZWwiLCJuZXR3b3JrIjoiY25uIiwiYXBwSWQiOiJjbm4tYWRmdWVsLXdlYi14bWQ2dTkifQ.N-lYZh_mvCV2gChDusNhd85B2BD7AiCIcNY2Gr5Rc6c';
  var locationServiceURL = 'https://geo.ngtv.io/locate?appId=' + appId;

  var getLocation = function getLocation() {
    return new Promise(function (resolve, reject) {
      fetch(locationServiceURL).then(function (resp) {
        resolve(resp.json());
      })["catch"](function (err) {
        reject(new Error("Could not get user location: ".concat(err)));
      });
    });
  };

  var selectedEdition = readCookie('SelectedEdition') ? readCookie('SelectedEdition') : 'www';
  var monetizedSizes = ['160x600', '300x250', '300x600', '320x50', '728x90', '970x90', '970x250'];
  var invalidMappings = ['_ns_', '_nfs_'];
  var invalidAdUnitSegments = [];
  var invalidAdUnits = ['CNN/health', 'CNN/health/healthgrades', 'CNN/health/leaf', 'CNN/health/list', 'CNN/health/photos', 'CNN/health/specials', 'CNN/health/video', 'CNN/student-news'];

  var getLogger = function getLogger(moduleName, moduleVersion, logKey, style, override) {
    var log = noop;
    var info = noop;
    var warn = noop;
    var time = noop;
    var timeEnd = noop;
    var group = noop;
    var groupEnd = noop;
    var error = noop;
    var inGroup = false;
    var tag;
    var styleFinal = style || '';
    var logKeyFinal = logKey || moduleName.toLowerCase();
    var debug = getURLParam('debug').split(',');
    var debugTest = isObject(console) && isFunction(console.log) && (debug[0] === 'true' || debug.indexOf(logKeyFinal.toLowerCase()) >= 0);
    if (override) debugTest = true;

    if (debugTest) {
      log = function log() {
        for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
          args[_key13] = arguments[_key13];
        }

        if (!inGroup) {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.log.apply(console, tag);
        } else {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.log.apply(console, tag);
        }
      };

      info = function info() {
        for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
          args[_key14] = arguments[_key14];
        }

        if (!inGroup) {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.info.apply(console, tag);
        } else {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.info.apply(console, tag);
        }
      };

      warn = function warn() {
        for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
          args[_key15] = arguments[_key15];
        }

        if (!inGroup) {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.warn.apply(console, tag);
        } else {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.warn.apply(console, tag);
        }
      };

      error = function error() {
        for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
          args[_key16] = arguments[_key16];
        }

        if (!inGroup) {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.error.apply(console, tag);
        } else {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] ', styleFinal];
          tag.push.apply(tag, args);
          console.error.apply(console, tag);
        }
      };

      group = function group(groupName) {
        if (!inGroup) {
          tag = ['%c[' + moduleName + ' ' + moduleVersion + '] - START', styleFinal, groupName];
          inGroup = true;
          console.log.apply(console, tag);
        }
      };

      groupEnd = function groupEnd(groupName) {
        tag = ['%c[' + moduleName + ' ' + moduleVersion + '] - END', styleFinal, groupName];
        inGroup = false;

        try {
          console.log.apply(console, tag);
        } catch (err) {// Do Nothing
        }
      };

      time = function time(timeTag) {
        var timeKey = '[' + moduleName + ' ' + moduleVersion + '] - ' + timeTag;
        group(timeTag);
        addMark(timeKey + '-Start');
        console.time(timeKey);
      };

      timeEnd = function timeEnd(timeTag) {
        var timeKey = '[' + moduleName + ' ' + moduleVersion + '] - ' + timeTag;
        addMark(timeKey + '-End');
        addMeasure(timeKey, timeKey + '-Start', timeKey + '-End');
        groupEnd(timeTag);
        console.timeEnd(timeKey);
      };
    }

    var logger = {
      log: log,
      info: info,
      warn: warn,
      error: error,
      time: time,
      timeEnd: timeEnd,
      group: group,
      groupEnd: groupEnd
    };
    return logger;
  };

  var hostname = '';

  var setHostAndPathNames = function setHostAndPathNames() {
    var parser = typeof document !== 'undefined' ? document.createElement('a') : {
      href: '',
      hostname: '',
      pathname: ''
    };
    parser.href = typeof document !== 'undefined' ? document.location.href : '';
    hostname = parser.hostname;
  };

  var logger = getLogger(MODULE_NAME, MODULE_VERSION, 'utils', 'color: coral; padding: 2px');

  var addEvent = function addEvent(element, event, fn) {
    if (element.addEventListener) {
      element.addEventListener(event, fn, true);
    } else if (element.attachEvent) {
      element.attachEvent('on' + event, fn);
    }
  };

  var bind = function bind(fn, context) {
    for (var _len17 = arguments.length, args = new Array(_len17 > 2 ? _len17 - 2 : 0), _key17 = 2; _key17 < _len17; _key17++) {
      args[_key17 - 2] = arguments[_key17];
    }

    if (!isFunction(fn)) {
      throw new TypeError('Bind must be called on a function');
    }

    return function bound() {
      return fn.apply(context, args.concat(Array.prototype.slice.call(arguments)));
    };
  };
  /* eslint-disable-next-line */


  var re = /(([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()\[\]\.,;:\s@\"]+\.)+[^<>()\[\]\.,;:\s@\"]{2,})/i;

  var piiIsPresentInQueryString = function piiIsPresentInQueryString() {
    if (document.location.search) {
      var dirtyResults = document.location.search.search(re) + 1;
      var cleanResults;

      try {
        cleanResults = decodeURIComponent(document.location.search).search(re) + 1;
      } catch (err) {
        cleanResults = dirtyResults;
      }

      return dirtyResults === 1 || cleanResults === 1;
    }

    return false;
  };

  var piiIsPresentInHash = function piiIsPresentInHash() {
    if (document.location.hash) {
      var dirtyResults = document.location.hash.search(re) + 1;
      var cleanResults;

      try {
        cleanResults = decodeURIComponent(document.location.hash).search(re) + 1;
      } catch (err) {
        cleanResults = dirtyResults;
      }

      return dirtyResults || cleanResults;
    }

    return false;
  };

  var piiIsPresentInReferrer = function piiIsPresentInReferrer() {
    if (document.referrer) {
      var dirtyResults = document.referrer.search(re) + 1;
      var cleanResults;

      try {
        cleanResults = decodeURIComponent(document.location.referrer).search(re) + 1;
      } catch (err) {
        cleanResults = dirtyResults;
      }

      return dirtyResults || cleanResults;
    }

    return false;
  };

  var piiIsPresent = function piiIsPresent() {
    return piiIsPresentInQueryString() || piiIsPresentInHash() || piiIsPresentInReferrer();
  };

  var filterDFPRequest = function filterDFPRequest() {
    if (piiIsPresentInQueryString() || piiIsPresentInHash() || piiIsPresentInReferrer()) {
      if (typeof window !== 'undefined' && window.AdFuel) {
        logger.log('Filtering DFP Request due to PII in query string.');
        var AdFuelMethods = Object.getOwnPropertyNames(window.AdFuel);

        for (var x = 0; x < AdFuelMethods.length; x++) {
          window.AdFuel[AdFuelMethods[x]] = function filteredAdFuelMethod() {};
        }

        window.googletag = null;
      }

      return true;
    }

    return false;
  };

  var piiFilter = {
    qs: piiIsPresentInQueryString,
    hash: piiIsPresentInHash,
    ref: piiIsPresentInReferrer,
    isPIIPresent: piiIsPresent,
    filter: filterDFPRequest
  };
  var consentStatus = false;
  var consentChecked = false;
  var gdprApplies = false;

  var getFullConsentState = function getFullConsentState() {
    return window.WM.UserConsent.getConsentState();
  };

  var getConsentVersion = function getConsentVersion() {
    return window.WM.UserConsent.getConsentVersion();
  };

  var getConsentString = function getConsentString() {
    var consentString = '';

    if (hasCookie('eupubconsent')) {
      logger.log('Getting Consent Object from cookie...');
      consentString = readCookie('eupubconsent');
    } else {
      if (typeof window !== 'undefined' && window.__tcfapi && typeof window.__tcfapi === 'function') {
        logger.log('Getting Consent Object from __tcfapi...');

        window.__tcfapi('getTCData', 2, function (tcData, success) {
          if (success) {
            consentString = tcData.tcString;
            return tcData.tcString;
          } else {
            consentString = '';
            return '';
          }
        });
      } else if (typeof window !== 'undefined' && window.__cmp && typeof window.__cmp === 'function') {
        logger.log('Getting Consent Object from __cmp...');

        window.__cmp('getVendorConsents', null, function (result) {
          consentString = result.metadata;
        });
      }
    }

    logger.log('Returning consent string...', consentString);
    return consentString;
  };

  var getConsent = function getConsent() {
    var consentStates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['data-store', 'ads-contextual', 'ads-person-prof', 'ads-person', 'vendor'];
    if (consentChecked) return consentStatus;
    var consentVersion = '1.3.6';

    try {
      consentVersion = window.WM.UserConsent.getVersion();
    } catch (err) {
      logger.warn('Running Older UserConsent - Please Update!');
    }

    logger.log('UserConsent Version: ', consentVersion);
    consentStatus = window.WM ? window.WM.UserConsent.isReady() ? semver.satisfies(consentVersion, '>=2.0.0') ? window.WM.UserConsent.inUserConsentState(consentStates) : window.WM.UserConsent.inUserConsentState(['ads-general', 'ads-vendor']) : true : true;
    logger.log('Consent Granted: ', consentStatus);
    var region = getUserConsentRegion();

    if (region === 'ccpa' && getURLParam('renderStatic') !== '') {
      logger.log('Render Static: ', getURLParam('renderStatic'));
      logger.log('Using override for Static Ad Rendering...');
      consentStatus = false;
    } else {
      logger.log('Not overriding for static rendering...');
    }

    consentChecked = true;
    return consentStatus;
  };

  var getGDPRApplies = function getGDPRApplies() {
    return window.WM.UserConsent.isInGdprRegion();
  };

  var getCCPAApplies = function getCCPAApplies() {
    return window.WM.UserConsent.isInCcpaRegion();
  };

  var getUserConsentRegion = function getUserConsentRegion() {
    return window.WM ? window.WM.UserConsent.getRegion() : '';
  };

  var monetizedSlots = {};

  var isMonetized = function isMonetized(slot) {
    var rktrSlotId = slot.rktr_slot_id;
    logger.group('Checking Monetization for: ' + rktrSlotId);
    var rktrAdId = slot.rktr_ad_id;
    var responsive = slot.responsive;
    var sizes = slot.sizes;

    if (typeof monetizedSlots[rktrSlotId] !== 'undefined') {
      logger.log('Slot already monetized.', monetizedSlots[rktrSlotId]);
      logger.groupEnd('Checking Monetization for: ' + rktrSlotId);
      return monetizedSlots[rktrSlotId];
    }

    var slotId = rktrSlotId;

    if (slotId === 'page') {
      logger.log('Skipping Page-Level Object.');
      logger.groupEnd('Checking Monetization for: ' + rktrSlotId);
      monetizedSlots[slotId] = {
        isMonetized: false,
        filteredSizes: []
      };
      return {
        isMonetized: false,
        filteredSizes: []
      };
    }

    var monetized = true;
    var viewportChecked = false;
    var browser = getViewport();
    var responsiveSizes = [];
    var filteredSizes = [];
    invalidMappings.forEach(function forEachMap(invalidMapping) {
      if (slotId.indexOf(invalidMapping) > 0) {
        logger.log('Slot includes invalid mapping: ', invalidMapping);
        monetizedSlots[slotId] = false;
        monetized = false;
      }
    });
    invalidAdUnitSegments.forEach(function forEachSegment(invalidAdUnitSegment) {
      if (rktrAdId && rktrAdId.indexOf(invalidAdUnitSegment) >= 0) {
        logger.log('Slot contains an invalid Ad Unit segment: ', invalidAdUnitSegment);
        monetized = false;
      }
    });
    invalidAdUnits.forEach(function forEachAdUnit(invalidAdUnit) {
      if (rktrAdId === invalidAdUnit) {
        logger.log('Slot uses an invalid Ad Unit: ', invalidAdUnit);
        monetized = false;
      }
    });

    if (responsive && responsive.length > 0) {
      responsive.map(function (viewport) {
        if (!viewportChecked && parseInt(viewport[0][0], 10) < browser[0] && parseInt(viewport[0][1], 10) < browser[1]) {
          viewportChecked = true;
          logger.log('Checking Responsive Sizes: ', viewport, browser);
          responsiveSizes = viewport[1];

          if (viewport[1][0] === 'suppress' || responsiveSizes === 'suppress') {
            logger.log('Slot is suppressed: ', viewport[1][0], responsiveSizes);
            monetized = false;
          }
        }

        return viewport;
      });
    }

    filteredSizes = monetized && responsiveSizes.length > 0 ? responsiveSizes : sizes;

    if (monetized) {
      filteredSizes = filteredSizes.filter(function sizeFilter(size) {
        var retSize = size;

        if (retSize !== 'suppress') {
          retSize = retSize.join('x');
        }

        return monetizedSizes.indexOf(retSize) !== -1;
      });
    }

    if (filteredSizes.length === 0) {
      logger.log('Slot contains no monetized sizes.', filteredSizes);
      monetizedSlots[slotId] = false;
      monetized = false;
    }

    logger.log('Slot is Monetized: ', monetized);
    logger.groupEnd('Checking Monetization for: ' + rktrSlotId);
    monetizedSlots[slotId] = {
      isMonetized: monetized,
      filteredSizes: filteredSizes
    };
    return {
      isMonetized: monetized,
      filteredSizes: filteredSizes
    };
  };

  var hasOwn = function hasOwn(object, key) {
    return object !== null && Object.prototype.hasOwnProperty.call(object, key);
  };

  var once = function once(fn) {
    return function () {
      if (fn) {
        fn.apply(this, arguments); // eslint-disable-next-line

        fn = null;
      }
    };
  };

  var keyMap = function () {
    var map = {};

    var has = function has(id) {
      return id in map;
    };

    var addKey = function addKey(id, key) {
      if (!has(id)) {
        map[id] = [];
      }

      map[id].push(key);
    };

    var getKeys = function getKeys(id) {
      return has(id) ? Array.prototype.slice.call(map[id]) : [];
    };

    var clearKeys = function clearKeys(id) {
      if (has(id)) {
        map[id].length = 0;
        return true;
      }

      return false;
    };

    return {
      has: has,
      clearKeys: clearKeys,
      getKeys: getKeys,
      addKey: addKey
    };
  }();

  var roundFloat = function roundFloat(value, toNearest, fixed) {
    return (Math.ceil(value / toNearest) * toNearest).toFixed(fixed);
  };

  var generateCacheBuster = function generateCacheBuster() {
    // return_<9-digit-random-hex>
    var cb = '';

    for (var i = 0; i < 10; i++) {
      cb += Math.floor(Math.random() * 9).toString();
    }

    return cb;
  };

  var debounce = function debounce(func, wait, immediate) {
    var timeout;
    return function () {
      for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
        args[_key18] = arguments[_key18];
      }

      var context = this;

      var later = function later() {
        timeout = null;
        if (!immediate) func.apply(context, args);
      };

      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) func.apply(context, args);
    };
  };

  var clone = function clone(obj) {
    // Handle the 3 simple types, and null or undefined
    if (obj === null || _typeof4(obj) !== 'object') return obj; // Handle Date

    if (obj instanceof Date) {
      var copyDate = new Date();
      copyDate.setTime(obj.getTime());
      return copyDate;
    } // Handle Array


    if (obj instanceof Array) {
      var copyArray = [];

      for (var i = 0, len = obj.length; i < len; i++) {
        copyArray[i] = clone(obj[i]);
      }

      return copyArray;
    } // Handle Object


    if (obj instanceof Object) {
      var copyObject = {};
      Object.keys(obj).forEach(function (attr) {
        copyObject[attr] = clone(obj[attr]);
      });
      return copyObject;
    }

    throw new Error("Unable to copy obj! Its type isn't supported.");
  };

  var logsSent = false;
  var onCNNE = false;

  var isIntl = function isIntl() {
    var isIntl = false;
    setHostAndPathNames();

    if (getURLParam('isIntl') === 'true') {
      if (!logsSent) {
        logsSent = true;
        logger.log('Faking international site. Using International PubIds.');
      }

      isIntl = true;
    } else if (hostname.search(/^.*(edition|edition-m|arabic)\./) >= 0) {
      if (!logsSent) {
        logsSent = true;
        logger.log('Full international site. Using International PubIds.');
      }

      isIntl = true;
    } else if (countryCode === '' || countryCode === null) {
      if (hostname.search(/^.*(cnnespanol|cnne-test)\./) >= 0) {
        logger.log('Setting isCNNE to `true`');
        onCNNE = true;
        var locationMeta = document && document.querySelectorAll('meta#geo-location-data');

        if (locationMeta && locationMeta.length > 0) {
          if (['US', 'CA'].indexOf(locationMeta[0].dataset.geoCountryCode) >= 0) {
            isIntl = false;
          } else {
            isIntl = true;
          }
        } else {
          if (!logsSent) {
            logsSent = true;
            logger.log('No country code.');
          }
        }
      } else {
        if (!logsSent) {
          logsSent = true;
          logger.log('No country code.');
        }

        isIntl = false;
      }
    } else if (countryCode !== 'US' && countryCode !== 'CA') {
      if (hostname.search(/^.*(money|cnnespanol|cnne-test|\.cnn)\./) >= 0) {
        if (hostname.search(/^.*(money\.cnn)\./) < 0) {
          logger.log('Setting isCNNE to `true`');
          onCNNE = true;
        }

        if (!logsSent) {
          logsSent = true;
          logger.log('International country code. Using International PubIds.');
        }

        isIntl = true;
      } else {
        if (!logsSent) {
          logsSent = true;
          logger.log('International country code but domestic site.');
        }

        isIntl = true;
      }
    } else {
      if (hostname.search(/^.*(cnnespanol|cnne-test)\./) >= 0) {
        if (!logsSent) {
          logger.log('On CNN Espanol... looking for geo-location-data meta tag...');
          logger.log('Setting isCNNE to `true`');
          onCNNE = true;
        }

        locationMeta = document && document.querySelectorAll('meta#geo-location-data');

        if (locationMeta && locationMeta.length > 0) {
          countryCode = locationMeta[0].dataset.geoCountryCode.toUpperCase();

          if (!logsSent) {
            logger.log('Found geo-location-data meta tag with countryCode: ', countryCode);
          }

          if (['US', 'CA'].indexOf(countryCode) >= 0) {
            if (!logsSent) {
              logger.log('Domestic country code. Using Domestic PubIds.');
              logsSent = true;
            }

            isIntl = false;
          } else {
            if (!logsSent) {
              logger.log('International country code. Using International PubIds.');
              logsSent = true;
            }

            isIntl = true;
          }
        } else {
          if (!logsSent) {
            logsSent = true;
            logger.log('No country code. Domestic Site.');
            isIntl = false;
          }
        }
      } else {
        if (!logsSent) {
          logsSent = true;
          logger.log('Domestic site or country code.');
          isIntl = false;
        }
      }
    }

    return isIntl;
  };

  var isCNNE = function isCNNE() {
    isIntl();
    logger.log('Is User on CNN Español? ', onCNNE);
    return onCNNE;
  };

  var merge = function merge(source, mods) {
    var dest = {};
    Object.keys(source).forEach(function (attrname) {
      dest[attrname] = source[attrname];
    });
    Object.keys(mods).forEach(function (attrname) {
      dest[attrname] = mods[attrname];
    });
    return dest;
  };

  var getTrackPerformance = function getTrackPerformance() {
    return new Promise(function (resolve, reject) {
      if (typeof window !== 'undefined' && !window.CNN || !window.jQuery) {
        reject(new Error('trackPerformance not needed'));
      } else if (typeof window !== 'undefined' && window.CNN.Analytics && window.CNN.Analytics.segment && typeof window.CNN.Analytics.segment.trackPerformance === 'function') {
        resolve();
      } else if (typeof window !== 'undefined' && typeof window.jQuery.fn.onSegmentReady === 'function') {
        window.jQuery(document).onSegmentReady(function _handleSegmentReady() {
          resolve();
        });
      } else {
        reject(new Error('trackPerformance not available'));
      }
    });
  };

  var adfuelEntries = [];

  var queueEntry = function queueEntry(eventName) {
    var entries = typeof window !== 'undefined' ? window.performance.getEntriesByName('[ADFUEL] ' + eventName) : [];

    for (var i = 0; i < entries.length; i++) {
      adfuelEntries.push(entries[i]);
    }
  };

  var addMark = function addMark(name) {
    typeof window !== 'undefined' && window.performance.mark('[ADFUEL] ' + name);
  };

  var addMeasure = function addMeasure(name, start, end) {
    typeof window !== 'undefined' && window.performance.measure('[ADFUEL] ' + name, '[ADFUEL] ' + start, '[ADFUEL] ' + end);
  };

  var getMarks = function getMarks() {
    return typeof window !== 'undefined' ? window.performance.getEntriesByType('mark').filter(function (mark) {
      return mark.name.indexOf('[ADFUEL]');
    }) : [];
  };

  var getMeasures = function getMeasures() {
    return typeof window !== 'undefined' ? window.performance.getEntriesByType('measure').filter(function (mark) {
      return mark.name.indexOf('[ADFUEL]');
    }) : [];
  };

  if (typeof document !== 'undefined') {
    addEvent(document, 'AdFuelCreated', filterDFPRequest);
  }

  var hasUserConsent = typeof window !== 'undefined' && window.WM && window.WM.UserConsent || false;
  var performance = {
    adfuelEntries: adfuelEntries,
    getTrackPerformance: getTrackPerformance,
    mark: addMark,
    measure: addMeasure,
    marks: getMarks,
    measures: getMeasures,
    queueEntry: queueEntry,
    slotDetails: {}
  };

  var loadError = function loadError(oError) {
    throw new URIError("The script ".concat(oError.target.src, " didn't load correctly."));
  };

  var affixScriptToHead = function affixScriptToHead(url) {
    var async = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var onloadFunction = arguments.length > 2 ? arguments[2] : undefined;
    var onerrorFunction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : loadError;
    var newScript = document.createElement('script');
    newScript.async = async;
    newScript.onerror = onerrorFunction;

    if (onloadFunction) {
      newScript.onload = onloadFunction;
    }

    var targetNode = document.getElementsByTagName('head')[0];
    targetNode.insertBefore(newScript, targetNode.firstChild);
    newScript.src = url;
  };

  var hasVideo = function hasVideo() {
    var videoElement = document.getElementsByTagName('video');

    if (videoElement.length) {
      return true;
    } else {
      return false;
    }
  };

  var AdFuelUtils = {
    addEvent: addEvent,
    affixScriptToHead: affixScriptToHead,
    bind: bind,
    cdnRoot: cdnRoot,
    clone: clone,
    countryCode: countryCode,
    debounce: debounce,
    gdprApplies: gdprApplies,
    getFullConsentState: getFullConsentState,
    getConsentVersion: getConsentVersion,
    getConsentString: getConsentString,
    getConsent: getConsent,
    getGDPRApplies: getGDPRApplies,
    getCCPAApplies: getCCPAApplies,
    getUserConsentRegion: getUserConsentRegion,
    getLocation: getLocation,
    generateCacheBuster: generateCacheBuster,
    getBrowser: getBrowser,
    getLogger: getLogger,
    getUMTOCookies: getUMTOCookies,
    getURLParam: getURLParam,
    getViewport: getViewport,
    hasCookie: hasCookie,
    hasOwn: hasOwn,
    hasUserConsent: hasUserConsent,
    hasVideo: hasVideo,
    isCNNE: isCNNE,
    isFunction: isFunction,
    isIntl: isIntl,
    isMobile: isMobile,
    isMonetized: isMonetized,
    isObject: isObject,
    keyMap: keyMap,
    merge: merge,
    mergeDeep: mergeDeep,
    noop: noop,
    once: once,
    performance: performance,
    piiFilter: piiFilter,
    readCookie: readCookie,
    roundFloat: roundFloat,
    selectedEdition: selectedEdition,
    setHostAndPathNames: setHostAndPathNames,
    setIsIntl: isIntl,
    __VERSION__: MODULE_VERSION
  };
  window.AdFuelUtils = AdFuelUtils;
  /*
      ------------------------------------------------------
      GDPR Status: Blocked
      CCPA Status: Allowed
  */

  var MODULE_NAME$1 = 'Sourcepoint Add-on: Ad Blocking';
  var MODULE_VERSION$1 = 'v4.0.1'; // Stub out AdFuelOptions in case it's not on the page.

  var blockerStatus;
  var initEventSet = false;
  var logger$1;

  var spIsBlocking = function spIsBlocking() {
    logger$1.log('Returning Ad Blocker Status: ', blockerStatus);
    return blockerStatus || false;
  };

  var init = function init(config) {
    var initPromise = new Promise(function (resolve) {
      logger$1 = getLogger(MODULE_NAME$1, MODULE_VERSION$1, 'spblocking', 'color: #00e1e1; padding: 2px', config.SOURCEPOINT.DEBUG);
      logger$1.log('Initializing Module Add-On...');

      var registerModuleWithAdFuel = function registerModuleWithAdFuel() {
        window.AdFuel.registerModule(MODULE_NAME$1, {}, MODULE_VERSION$1, config.SOURCEPOINT);
      };

      if (window.AdFuel) {
        // AdFuel loaded first
        registerModuleWithAdFuel();
      } else {
        // wait for AdFuel to load
        addEvent(document, 'AdFuelCreated', registerModuleWithAdFuel);
      }

      window.spIsBlocking = spIsBlocking;
      addEvent(document, 'sp.blocking', function (e) {
        logger$1.log('Ad Status: BLOCKED');
        blockerStatus = true;
      });
      addEvent(document, 'sp.not_blocking', function (e) {
        logger$1.log('Ad Status: Not Blocked');
        blockerStatus = false;
      });
    });
    initPromise.id = "".concat(MODULE_NAME$1, " ").concat(MODULE_VERSION$1);
    return initPromise;
  };

  if (window.AdFuelOptions) {
    if (window.AdFuelOptions.USER_CONSENT.ENABLED) {
      var callInit = function callInit() {
        setTimeout(function () {
          if (window.WM.UserConsent && window.WM.UserConsent.isReady()) {
            if (window.WM.UserConsent.getRegion() === 'ccpa') {
              init(window.AdFuelOptions);
            } else {
              if (initEventSet || window.WM.UserConsent.isOptanonLoaded()) {
                init(window.AdFuelOptions);
              } else {
                addEvent(window, 'optanonLoaded', callInit);
                initEventSet = true;
              }
            }
          }
        }, 100);
      };

      if (window.WM && window.WM.UserConsent && window.WM.UserConsent.isReady()) {
        callInit();
      } else {
        addEvent(window, 'userConsentReady', callInit);
      }
    } else {
      init(window.AdFuelOptions);
    }
  }

  var index = {
    init: init,
    spIsBlocking: spIsBlocking,
    buildSlot: function buildSlot(slotData) {
      var buildPromise = new Promise(function (resolve) {
        resolve();
      });
      buildPromise.id = "".concat(MODULE_NAME$1, " ").concat(MODULE_VERSION$1);
      return buildPromise;
    },
    runAuction: function runAuction(slotData) {
      var auctionPromise = new Promise(function (resolve) {
        resolve();
      });
      auctionPromise.id = "".concat(MODULE_NAME$1, " ").concat(MODULE_VERSION$1);
      return auctionPromise;
    },
    setTargeting: function setTargeting(slotData) {
      var targetingPromise = new Promise(function (resolve) {
        resolve();
      });
      targetingPromise.id = "".concat(MODULE_NAME$1, " ").concat(MODULE_VERSION$1);
      return targetingPromise;
    },
    __NAME__: MODULE_NAME$1,
    __VERSION__: MODULE_VERSION$1
  };
  return index;
}); ////////////////////////////////////////////
// TransactionID for 2.0
////////////////////////////////////////////


(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof4(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.TransactionID = factory());
})(void 0, function () {
  'use strict';
  /*
      Transaction ID Module - Version 4.0.1
      @4.0.0: - Initialization Update for GDPR/CCPA
      @4.0.1: - OptanonLoaded timing fix
       ------------------------------------------------------
      GDPR Status: Blocked
      CCPA Status: Allowed
  */

  var MODULE_NAME = 'Transaction ID Module';
  var MODULE_VERSION = 'v4.0.1';
  var getLogger = window.AdFuelUtils.getLogger;
  var getUserConsentRegion = window.AdFuelUtils.getUserConsentRegion;
  var getConsent = window.AdFuelUtils.getConsent;
  var addEvent = window.AdFuelUtils.addEvent;
  var logger;
  var targetingSet = false;
  var initEventSet = false;

  var registerModuleWithAdfuel = function registerModuleWithAdfuel() {
    window.AdFuel.registerModule(MODULE_NAME, {}, MODULE_VERSION, {});
    setTransIdTargeting();
  };

  var setTransIdTargeting = function setTransIdTargeting() {
    var transId = window.turner_getTransactionId();

    if (!targetingSet) {
      targetingSet = true;

      if (window.AdFuel) {
        logger.log('AdFuel: setting transid targeting', {
          transId: transId
        });
        window.AdFuel.addPageLevelTarget('transId', transId);
      } else {
        logger.log('googletag: setting transid targeting', {
          transId: transId
        });
        window.googletag.pubads().setTargeting('transId', transId);
      }
    }
  };

  var init = function init(siteConfig) {
    var initPromise = new Promise(function (resolve) {
      logger = getLogger(MODULE_NAME, MODULE_VERSION, 'transid', 'color: #d2b000; padding: 2px', siteConfig.TRANSACTION_ID.DEBUG);
      window.cnnad_transactionID = null; // referenced by registries

      window.cnnad_getTransactionID = function () {
        if (!window.cnnad_transactionID) {
          window.cnnad_transactionID = Math.round(new Date().getTime() / 1000) + '' + Math.floor(Math.random() * 9007199254740992);
        }

        return window.cnnad_transactionID;
      };

      window.turner_getTransactionId = window.cnnad_getTransactionID;
      window.turner_getTransactionId();

      if (siteConfig.USER_CONSENT && siteConfig.USER_CONSENT.ENABLED) {
        var consentRegion = getUserConsentRegion();
        var consentStatus = getConsent();

        if ((consentRegion === 'ccpa' || consentRegion === 'gdpr') && !consentStatus) {
          logger.log('Disabling module due to GDPR restrictions.');
        } else {
          logger.log('Initializing Module...');

          if (window.AdFuel) {
            // AdFuel loaded first
            registerModuleWithAdfuel();
          } else {
            // wait for AdFuel to load
            addEvent(document, 'AdFuelCreated', registerModuleWithAdfuel);
          }
        }
      } else {
        logger.log('Initializing Module...');

        if (window.AdFuel) {
          // AdFuel loaded first
          registerModuleWithAdfuel();
        } else {
          // wait for AdFuel to load
          addEvent(document, 'AdFuelCreated', registerModuleWithAdfuel);
        }
      }
    });
    initPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
    return initPromise;
  };

  if (window.AdFuelOptions) {
    if (window.AdFuelOptions.USER_CONSENT.ENABLED) {
      var callInit = function callInit() {
        setTimeout(function () {
          if (window.WM.UserConsent && window.WM.UserConsent.isReady()) {
            if (window.WM.UserConsent.getRegion() === 'ccpa') {
              init(window.AdFuelOptions);
            } else {
              if (initEventSet || window.WM.UserConsent.isOptanonLoaded()) {
                init(window.AdFuelOptions);
              } else {
                addEvent(window, 'optanonLoaded', callInit);
                initEventSet = true;
              }
            }
          }
        }, 100);
      };

      if (window.WM && window.WM.UserConsent && window.WM.UserConsent.isReady()) {
        callInit();
      } else {
        addEvent(window, 'userConsentReady', callInit);
      }
    } else {
      init(window.AdFuelOptions);
    }
  }

  var index = {
    init: init,
    buildSlot: function buildSlot(slotData) {
      var buildPromise = new Promise(function (resolve) {
        resolve();
      });
      buildPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return buildPromise;
    },
    runAuction: function runAuction(slotData) {
      var auctionPromise = new Promise(function (resolve) {
        resolve();
      });
      auctionPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return auctionPromise;
    },
    setTargeting: function setTargeting(slotData) {
      var targetingPromise = new Promise(function (resolve) {
        setTransIdTargeting();
        resolve();
      });
      targetingPromise.id = "".concat(MODULE_NAME, " ").concat(MODULE_VERSION);
      return targetingPromise;
    },
    __NAME__: MODULE_NAME,
    __VERSION__: MODULE_VERSION
  };
  return index;
});